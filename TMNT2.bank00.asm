    .db 20
OBJ_STATE_0x80_HANDLER: ; 00:0001, 0x000001
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Get switch.
    JSR SWITCH_CODE_PTRS_PAST_JSR ; Do rtn.
    LOW(SWITCH_RTN_A)
    HIGH(SWITCH_RTN_A)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
SWITCH_RTN_A: ; 00:000B, 0x00000B
    LDA #$2B ; Swap banks.
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$16 ; Palette entry assign.
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$00
    STA OBJ_ANIMATION_DISPLAY[18],X ; Clear.
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Clear.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Next switch.
    JMP OBJECT_X_MOVE? ; Put to screen.
SWITCH_RTN_B: ; 00:0026, 0x000026
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$03 ; Keep 0000.0011
    BNE DONT_MAKE_OBJS ; != 0, goto.
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    BEQ DATA_ENTRY_ZERO ; If zero, goto.
    LDA INF_LOOP_COUNTER ; Load
    AND #$5F ; Keep 0101.1111
    BNE DEC_TIMER_UNK ; != 0, goto.
DATA_ENTRY_ZERO: ; 00:0038, 0x000038
    LDY #$07 ; Obj
    LDA #$00
    STA TMP_00 ; Init
LOOP_ALL_OBJS: ; 00:003E, 0x00003E
    LDA OBJ_ENABLED_STATE+MORE?[18],Y ; Load
    CMP #$81 ; If _ #$81
    BNE STATE_NE_0x81 ; !=, goto.
    INC TMP_00 ; ++ if == 0x81
STATE_NE_0x81: ; 00:0047, 0x000047
    INY ; Move obj pair.
    INY
    CPY #$11 ; If _ #$11
    BCC LOOP_ALL_OBJS ; <, goto.
    LDA TMP_00 ; Load count.
    CMP #$02 ; If _ #$02
    BCS DONT_MAKE_OBJS ; >=, goto.
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS ; Get objs.
    BCS DONT_MAKE_OBJS ; Failed, skip.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Copy pos.
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X ; Copy
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X ; Copy Y
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA 4C6_OBJ_UNK[18],X ; Copy
    STA 4C6_OBJ_UNK[18],Y
    LDA #$81
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Move to other state.
    LDA #$00
    STA 556_OBJ_STATUS_FLAGS_A[18],Y ; Clear.
DEC_TIMER_UNK: ; 00:007A, 0x00007A
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
DONT_MAKE_OBJS: ; 00:007D, 0x00007D
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; ++ step, but unknown use here.
    JSR OBJECT_X_MOVE? ; Do.
    JMP TEST_OBJ_UPDATE_FLAG_INIT ; Goto.
UNUSED_CODE????????: ; 00:0086, 0x000086
    JSR OBJECT_X_MOVE?
    JMP OBJ_POS_BASED_INIT_CLEAR
OBJ_STATE_0x85_HANDLER: ; 00:008C, 0x00008C
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    BNE HAS_SECONDARY ; != 0, goto.
    LDA #$A2
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$06
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Set palette.
    LDY #$0C ; Val?
    LDA OBJ_ANIMATION_DISPLAY[18] ; Load
    AND OBJ_ANIMATION_DISPLAY+2 ; And with P2.
    BEQ P1_P2_AND_EQ_ZERO
    LDY #$14 ; Alt val.
P1_P2_AND_EQ_ZERO: ; 00:00AA, 0x0000AA
    TYA ; Val to A.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Set as attr.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JMP OBJECT_X_MOVE? ; Move.
HAS_SECONDARY: ; 00:00B4, 0x0000B4
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$03 ; Test bottom bits.
    BNE EXIT_MOVE ; Set, goto.
    LDY #$80 ; Val?
    LDA OBJ_ANIMATION_DISPLAY[18] ; Load anim.
    BEQ P1_NOT_DISPLAYING ; Not displaying, goto.
    LDA OBJ_ANIMATION_DISPLAY+2 ; Load P2.
    BEQ P2_NOT_DISPLAYING ; Not displaying, goto.
    LDY #$40 ; Alt val.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Move step.
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    LSR A ; >> 1
    BCC P2_NOT_DISPLAYING ; CC, goto.
P1_NOT_DISPLAYING: ; 00:00D2, 0x0000D2
    STY TMP_00 ; Val to.
    LDY #$02 ; Seed P2.
    BNE FOCUS_SEEDED ; If set, goto.
P2_NOT_DISPLAYING: ; 00:00D8, 0x0000D8
    STY TMP_00 ; Val to.
    LDY #$00 ; Seed P1.
FOCUS_SEEDED: ; 00:00DC, 0x0000DC
    TYA ; To A.
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; To focus.
    LDA TMP_00 ; Load val.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Store to index.
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load.
    CMP 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; If _ Attr
    BCC EXIT_INC_HOLD ; <, goto.
    LDA OBJ_POS_X??[18],Y ; Load
    CMP #$C7 ; If _ #$C7
    BCC EXIT_MOVE ; <, goto.
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Clear hold.
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS ; Get obj pair.
    BCS EXIT_MOVE ; Didn't get, leave.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Move step.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Copy pos to new obj.
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA #$86
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Set new state.
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; X attr --
    BNE EXIT_INC_HOLD ; != 0, goto.
    JMP INIT_OBJECT[X]_DATA_FULL ; If zero, die.
EXIT_INC_HOLD: ; 00:0126, 0x000126
    INC OBJ_ANIM_HOLD_TIMER?[18],X ; Hold++
EXIT_MOVE: ; 00:0129, 0x000129
    JSR OBJECT_X_MOVE? ; Move.
    JMP TEST_OBJ_UPDATE_FLAG_INIT ; Do ??
OBJ_STATE_0x84_HANDLER: ; 00:012F, 0x00012F
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load attr.
    BNE VAL_NE_ZERO ; Nonzero, goto.
    LDA #$47
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Set flag.
    ORA #$04
    STA 556_OBJ_STATUS_FLAGS_A[18],X
VAL_NE_ZERO: ; 00:0141, 0x000141
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    JSR OBJECT_X_MOVE? ; Do.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$03 ; Keep bottom.
    BNE JMP_INIT_OBJECT[X]_DATA_FULL ; Either set, destroy.
    JMP OBJECT_X_MOVE? ; Move otherwise.
OBJ_STATE_0x82_HANDLER: ; 00:0151, 0x000151
    LDY BG_UPDATING_INDEX ; Load index.
    TXA ; Xobj to A.
    PHA ; Save obj.
    LDA BG_UPDATE_DATA_B,Y ; Load data with index.
    JSR BACKGROUND_UPDATING_INTERFACE ; Use in background mod rtn.
    PLA ; Pull saved obj.
    TAX ; Restore Xobj.
    LDA BG_UPDATING_FLAG_UNK ; Load
    BNE RTS ; Nonezero, leave.
    INC BG_UPDATING_INDEX ; Move on zero.
JMP_INIT_OBJECT[X]_DATA_FULL: ; 00:0163, 0x000163
    JMP INIT_OBJECT[X]_DATA_FULL ; Init self. Abuse RTS.
RTS: ; 00:0166, 0x000166
    RTS ; Leave.
OBJ_STATE_0x81_HANDLER: ; 00:0167, 0x000167
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load secondary.
    BNE SECONDARY_NONZERO ; != 0, goto.
    LDA #$2D
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$87
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$80 ; Load val.
    SEC ; Prep sub.
    SBC OBJ_POS_X??[18],X ; Sub val.
    LSR A ; >> 1, /2.
    EOR #$FF ; Invert.
    CLC ; Prep add.
    ADC #$01 ; Add val.
    STA 4C6_OBJ_UNK[18],X ; Store to attr.
    STA 4C6_OBJ_UNK+1,X ; Store to pair.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load pos.
    STA OBJ_POS_X_CONFIRMED+1,X ; Store to pair.
    LDA #$A7 ; Load val.
    STA OBJ_ENABLED_STATE+MORE?+1,X ; Set pair.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JSR OBJECT_X_MOVE? ; Move obj.
    JMP MAIN_TO_PAIR_OBJ_UNK ; Do, abuse RTS.
SECONDARY_NONZERO: ; 00:01A1, 0x0001A1
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do rtn.
    LDA OBJ_POS_X??[18],X ; Load Xpos.
    CMP #$E0 ; If _ #$E0
    BCC ONSCREEN? ; <, goto.
    JSR INIT_OBJECT[X]_DATA_FULL ; Init.
    INX ; Also pair.
    JMP INIT_OBJECT[X]_DATA_FULL ; Abuse RTS.
ONSCREEN?: ; 00:01B2, 0x0001B2
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Switch on tert.
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(SWITCH_RTN_A)
    HIGH(SWITCH_RTN_A)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
SWITCH_RTN_A: ; 00:01D6, 0x0001D6
    LDA #$FD
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set delta.
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    LDA #$01
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Set pos.
    LDA #$00
    STA 520_OBJ_POS_X_LARGE?[18],X
    LDA #$80
    STA 544_OBJ_UNK_POS_DELTA?+1,X ; Set pair delta.
    LDA #$00
    STA OBJ_POS_X_DELTA?[18],X
    LDA INF_LOOP_COUNTER ; Load val.
    AND #$BF ; Keep 1011.1111
    CLC ; Prep add.
    ADC #$50 ; Add 0101.0000
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Store as subpx delta.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JSR OBJECT_X_MOVE? ; Move.
    JMP MAIN_TO_PAIR_OBJ_UNK ; Do ??
SWITCH_RTN_B: ; 00:0207, 0x000207
    LDA #$80
    LDY #$00
    JSR ADD_A/Y_TO_DELTA_UNK_C ; Mod delta.
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK ; Move.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    BMI EXIT_MOVE_PAIR_STUFF ; If negative, goto.
    LDA 4C6_OBJ_UNK[18],X ; Load.
    SEC ; Prep sub.
    SBC 4C6_OBJ_UNK+1,X ; Sub with pair.
    BMI EXIT_MOVE_PAIR_STUFF ; If negative result,  goto.
    LDA 4C6_OBJ_UNK+1,X ; Load pair.
    STA 4C6_OBJ_UNK[18],X ; Store to main.
    JSR CLEAR_OBJ_ATTRS_DELTAS? ; Delta manip.
    STA 4D8_OBJ_UNK[18],X ; Store clear, too.
    LDA #$80
    LDY #$00
    JSR ADD_A/Y_TO_DELTA_UNK_B ; Mod delta.
    LDA #$40
    LDY #$00
    JSR ADD_A/Y_TO_DELTA_UNK_A ; Mod delta.
    LDA 4C6_OBJ_UNK+1,X ; Load pair.
    BEQ EXIT_MOVE_TERT ; == 0, goto.
    LDA #$1C
    JSR SND_BANKED_DISPATCH ; Play sound.
EXIT_MOVE_TERT: ; 00:0243, 0x000243
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_MOVE_PAIR_STUFF: ; 00:0246, 0x000246
    JSR OBJECT_X_MOVE? ; Do.
    JMP MAIN_TO_PAIR_OBJ_UNK ; To pair exit.
SWITCH_RTN_C: ; 00:024C, 0x00024C
    LDA #$FB
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set delta.
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    BEQ EXIT_MOVE_TERT ; Always taken, goto.
MAIN_TO_PAIR_OBJ_UNK: ; 00:0258, 0x000258
    LDA #$84 ; Load val.
    SEC ; Prep sub.
    SBC OBJ_POS_X??[18],X ; Sub attr.
    BPL RESULT_POSITIVE ; Positive, goto.
    LDA #$00 ; Seed val.
RESULT_POSITIVE: ; 00:0262, 0x000262
    LSR A ; >> 1, /2.
    EOR #$FF ; Invert.
    CLC ; Prep add.
    ADC #$01 ; Add with.
    STA 4C6_OBJ_UNK+1,X ; Store to pair.
    RTS ; Leave.
OBJ_STATE_0xA7_HANDLER: ; 00:026C, 0x00026C
    LDA #$04
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA OBJ_POS_Y_CONFIRMED+17,X
    STA OBJ_POS_X_CONFIRMED[18],X
    LDA OBJ_POS_X_SUBPIXEL?+17,X
    STA OBJ_POS_X??[18],X
    LDA 4C6_OBJ_UNK[18],X
    BEQ L_00:028D
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    BMI L_00:028D
    JSR CLEAR_OBJ_ATTRS_DELTAS?
    STA 4C6_OBJ_UNK[18],X
L_00:028D: ; 00:028D, 0x00028D
    JSR OBJECT_X_MOVE?
    LDA 544_OBJ_UNK_POS_DELTA?+17,X
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    RTS
OBJ_STATE_0xB0_HANDLER: ; 00:0297, 0x000297
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0xB0_SWITCH_A)
    HIGH(STATE_0xB0_SWITCH_A)
    LOW(STATE_0xB0_SWITCH_B)
    HIGH(STATE_0xB0_SWITCH_B)
    LOW(STATE_0xB0_SWITCH_C)
    HIGH(STATE_0xB0_SWITCH_C)
    LOW(STATE_0xB0_SWITCH_D)
    HIGH(STATE_0xB0_SWITCH_D)
STATE_0xB0_SWITCH_A: ; 00:02A5, 0x0002A5
    LDA #$2A
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA PPU_UPDATE_BUF_INDEX
    CMP #$50
    BCS L_00:02C1
    LDY #$09
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$00
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$34
    JSR SND_BANKED_DISPATCH
    INC OBJ_TERTIARY_SWITCH?[18],X
L_00:02C1: ; 00:02C1, 0x0002C1
    JMP OBJECT_X_MOVE?
STATE_0xB0_SWITCH_B: ; 00:02C4, 0x0002C4
    LDY BG_UPDATING_INDEX
    TXA
    PHA
    LDA BG_UPDATE_DATA_A,Y
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:02E3
    LDA #$65
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
    INC BG_UPDATING_INDEX
L_00:02E3: ; 00:02E3, 0x0002E3
    RTS
STATE_0xB0_SWITCH_C: ; 00:02E4, 0x0002E4
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:0305
    INC OBJ_ANIMATION_DISPLAY[18],X
    LDA OBJ_ANIMATION_DISPLAY[18],X
    CMP #$68
    BCC L_00:0300
    LDY #$00
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$68
    STA OBJ_ANIMATION_DISPLAY[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
L_00:0300: ; 00:0300, 0x000300
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
L_00:0305: ; 00:0305, 0x000305
    JMP OBJECT_X_MOVE?
STATE_0xB0_SWITCH_D: ; 00:0308, 0x000308
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:0305
    LDY BG_UPDATING_INDEX
    DEY
    LDA L_00:031E,Y
    STA OBJ_ENABLED_STATE+MORE?[18],X
    LDA #$0E
    STA OBJ_ANIMATION_DISPLAY[18],X
    JMP INT_OBJECT[X]_DATA_SMOL
L_00:031E: ; 00:031E, 0x00031E
    .db 02
    .db 02
    .db 02
    .db 02
    .db 02
    .db 02
    .db 02
    .db 02
OBJ_STATE_0xB1_HANDLER: ; 00:0326, 0x000326
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(SWITCH_RTN_A)
    HIGH(SWITCH_RTN_A)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
SWITCH_RTN_A: ; 00:0332, 0x000332
    LDA #$28
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA PPU_UPDATE_BUF_INDEX
    CMP #$40
    BCS L_00:03A0
    LDY #$00
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    BNE L_00:036D
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:03A0
    LDA #$BC
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA #$40
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],Y
    LDA #$24
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
L_00:036D: ; 00:036D, 0x00036D
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:03A0
    LDA #$BC
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    CLC
    ADC #$80
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],Y
    LDA #$0A
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LDA #$01
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$35
    JSR SND_BANKED_DISPATCH
L_00:03A0: ; 00:03A0, 0x0003A0
    INC BG_UPDATE_FLAG_UNK
    JMP OBJECT_X_MOVE?
SWITCH_RTN_B: ; 00:03A5, 0x0003A5
    TXA
    PHA
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:03C9
    INC BG_UPDATING_INDEX
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BPL L_00:03C1
    LDA #$00
    STA BG_UPDATE_FLAG_UNK
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:03C1: ; 00:03C1, 0x0003C1
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$10
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
L_00:03C9: ; 00:03C9, 0x0003C9
    JMP OBJECT_X_MOVE?
SWITCH_RTN_C: ; 00:03CC, 0x0003CC
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    BNE L_00:03D9
    DEC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$35
    JSR SND_BANKED_DISPATCH
L_00:03D9: ; 00:03D9, 0x0003D9
    JMP OBJECT_X_MOVE?
OBJ_STATE_0xBC_HANDLER: ; 00:03DC, 0x0003DC
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(SWITCH_RTN_A)
    HIGH(SWITCH_RTN_A)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
SWITCH_RTN_A: ; 00:03E8, 0x0003E8
    LDA #$69
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$20
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:03F5: ; 00:03F5, 0x0003F5
    JMP OBJECT_X_MOVE?
SWITCH_RTN_B: ; 00:03F8, 0x0003F8
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    BEQ L_00:0403
    DEC STATUS_FLAGS_B/OBJ_FOCUS[18],X
    JMP L_00:0408
L_00:0403: ; 00:0403, 0x000403
    LDA #$00
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
L_00:0408: ; 00:0408, 0x000408
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:03F5
    LDA #$08
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    LDA #$D0
    STA 520_OBJ_POS_X_LARGE?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
SWITCH_RTN_C: ; 00:041A, 0x00041A
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    BNE L_00:0449
    LDA #$08
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    CMP #$03
    BCC L_00:0440
    LDA #$06
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$02
    STA OBJ_ENABLED_STATE+MORE?[18],X
    LDA #$06
    STA OBJ_ANIMATION_DISPLAY[18],X
    JMP INT_OBJECT[X]_DATA_SMOL
L_00:0440: ; 00:0440, 0x000440
    LDY 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA L_00:044C,Y
    STA OBJ_ANIMATION_DISPLAY[18],X
L_00:0449: ; 00:0449, 0x000449
    JMP OBJECT_X_MOVE?
L_00:044C: ; 00:044C, 0x00044C
    ADC #$9E
    ???
OBJ_STATE_0xB5_HANDLER: ; 00:044F, 0x00044F
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
    LOW(RTN_C)
    HIGH(RTN_C)
RTN_A: ; 00:045D, 0x00045D
    LDA PPU_UPDATE_BUF_INDEX
    CMP #$20
    BCS L_00:0470
    LDY #$00
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$D0
    STA 4C6_OBJ_UNK[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
L_00:0470: ; 00:0470, 0x000470
    JMP OBJECT_X_MOVE?
RTN_B: ; 00:0473, 0x000473
    LDA #$B5
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$5E
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$3A
    JSR SND_BANKED_DISPATCH
    INC OBJ_TERTIARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
RTN_C: ; 00:048B, 0x00048B
    LDY BG_UPDATING_INDEX
    TXA
    PHA
    LDA LEVEL/SCREEN_ON
    ASL A
    TAX
    LDA OBJ_DATA_A_LOW,X
    STA TMP_00
    LDA OBJ_DATA_A_HIGH,X
    STA TMP_01
    LDA [TMP_00],Y
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:04B2
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
    INC BG_UPDATING_INDEX
L_00:04B2: ; 00:04B2, 0x0004B2
    JMP OBJECT_X_MOVE?
RTN_C: ; 00:04B5, 0x0004B5
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:04EF
    INC OBJ_ANIMATION_DISPLAY[18],X
    LDA OBJ_ANIMATION_DISPLAY[18],X
    CMP #$61
    BCS L_00:04F2
    CMP #$60
    BNE L_00:04EA
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:04F2
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA 4C6_OBJ_UNK[18],X
    STA 4C6_OBJ_UNK[18],Y
    LDA #$B6
    STA OBJ_ENABLED_STATE+MORE?[18],Y
L_00:04EA: ; 00:04EA, 0x0004EA
    LDA #$0A
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
L_00:04EF: ; 00:04EF, 0x0004EF
    JMP OBJECT_X_MOVE?
L_00:04F2: ; 00:04F2, 0x0004F2
    JMP INIT_OBJECT[X]_DATA_FULL
OBJ_STATE_0xB3_HANDLER: ; 00:04F5, 0x0004F5
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(SWITCH_RTN_A)
    HIGH(SWITCH_RTN_A)
    LOW(SWITCH_RTN_B)
    HIGH(SWITCH_RTN_B)
    LOW(SWITCH_RTN_C)
    HIGH(SWITCH_RTN_C)
    LOW(SWITCH_RTN_D)
    HIGH(SWITCH_RTN_D)
SWITCH_RTN_A: ; 00:0503, 0x000503
    LDA PPU_UPDATE_BUF_INDEX
    CMP #$50
    BCS L_00:051E
    LDA BG_UPDATING_INDEX
    SEC
    SBC #$04
    TAY
    LDA L_00:0521,Y
    TAY
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$A0
    STA 4C6_OBJ_UNK[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
L_00:051E: ; 00:051E, 0x00051E
    JMP OBJECT_X_MOVE?
L_00:0521: ; 00:0521, 0x000521
    .db 00
    .db 03
    .db 00
    .db 03
SWITCH_RTN_B: ; 00:0525, 0x000525
    LDA #$B4
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$5A
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$3A
    JSR SND_BANKED_DISPATCH
    INC OBJ_TERTIARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
SWITCH_RTN_C: ; 00:053D, 0x00053D
    LDY BG_UPDATING_INDEX
    TXA
    PHA
    LDA BG_UPDATE_DATA_B,Y
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:0557
    LDA #$05
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
    INC BG_UPDATING_INDEX
L_00:0557: ; 00:0557, 0x000557
    JMP OBJECT_X_MOVE?
SWITCH_RTN_D: ; 00:055A, 0x00055A
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:0594
    INC OBJ_ANIMATION_DISPLAY[18],X
    LDA OBJ_ANIMATION_DISPLAY[18],X
    CMP #$5D
    BCS L_00:0597
    CMP #$5C
    BNE L_00:058F
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:0597
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA 4C6_OBJ_UNK[18],X
    STA 4C6_OBJ_UNK[18],Y
    LDA #$B4
    STA OBJ_ENABLED_STATE+MORE?[18],Y
L_00:058F: ; 00:058F, 0x00058F
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
L_00:0594: ; 00:0594, 0x000594
    JMP OBJECT_X_MOVE?
L_00:0597: ; 00:0597, 0x000597
    JMP INIT_OBJECT[X]_DATA_FULL
OBJ_STATE_0xB6_HANDLER: ; 00:059A, 0x00059A
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:05AF
    LDA #$5D
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$01
    STA 503_OBJ_POS_X_LARGEST?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
L_00:05AF: ; 00:05AF, 0x0005AF
    LDA #$40
    LDY #$00
    JSR ADD_A/Y_TO_DELTA_UNK_C
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    BMI L_00:05C8
    LDA #$02
    STA OBJ_ENABLED_STATE+MORE?[18],X
    LDA #$06
    STA OBJ_ANIMATION_DISPLAY[18],X
    JMP INT_OBJECT[X]_DATA_SMOL
L_00:05C8: ; 00:05C8, 0x0005C8
    JMP OBJECT_X_MOVE?
OBJ_STATE_0xB4_HANDLER: ; 00:05CB, 0x0005CB
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:05E0
    LDA #$59
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$FF
    STA OBJ_POS_X_DELTA?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
L_00:05E0: ; 00:05E0, 0x0005E0
    LDA #$40
    LDY #$00
    JSR ADD_A/Y_TO_DELTA_UNK_C
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    BMI L_00:0600
    LDA BG_UPDATING_INDEX
    SEC
    SBC #$05
    TAY
    LDA L_00:0603,Y
    STA OBJ_ENABLED_STATE+MORE?[18],X
    LDA #$06
    STA OBJ_ANIMATION_DISPLAY[18],X
    JMP INT_OBJECT[X]_DATA_SMOL
L_00:0600: ; 00:0600, 0x000600
    JMP OBJECT_X_MOVE?
L_00:0603: ; 00:0603, 0x000603
    .db 02
    .db 07
    .db 02
    .db 07
OBJ_STATE_0xB8_HANDLER: ; 00:0607, 0x000607
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0xB8_SWITCH_A)
    HIGH(STATE_0xB8_SWITCH_A)
    LOW(STATE_0xB7_SWITCH_C)
    HIGH(STATE_0xB7_SWITCH_C)
    LOW(STATE_0xB7_SWITCH_D)
    HIGH(STATE_0xB7_SWITCH_D)
    LOW(STATE_0xB7_SWITCH_E)
    HIGH(STATE_0xB7_SWITCH_E)
    LOW(STATE_0xB7_SWITCH_F)
    HIGH(STATE_0xB7_SWITCH_F)
STATE_0xB8_SWITCH_A: ; 00:0617, 0x000617
    LDA 70F_UNKNOWN
    BEQ L_00:0624
    LDA #$B0
    STA 4C6_OBJ_UNK[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
L_00:0624: ; 00:0624, 0x000624
    JMP OBJECT_X_MOVE?
OBJ_STATE_0xB7_HANDLER: ; 00:0627, 0x000627
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0xB7_SWITCH_A)
    HIGH(STATE_0xB7_SWITCH_A)
    LOW(STATE_0xB7_SWITCH_B)
    HIGH(STATE_0xB7_SWITCH_B)
    LOW(STATE_0xB7_SWITCH_C)
    HIGH(STATE_0xB7_SWITCH_C)
    LOW(STATE_0xB7_SWITCH_D)
    HIGH(STATE_0xB7_SWITCH_D)
    LOW(STATE_0xB7_SWITCH_E)
    HIGH(STATE_0xB7_SWITCH_E)
    LOW(STATE_0xB7_SWITCH_F)
    HIGH(STATE_0xB7_SWITCH_F)
STATE_0xB7_SWITCH_A: ; 00:0639, 0x000639
    LDA PPU_UPDATE_BUF_INDEX
    CMP #$50
    BCS L_00:0651
    LDY #$03
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$B0
    STA 4C6_OBJ_UNK[18],X
    LDA #$05
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
L_00:064E: ; 00:064E, 0x00064E
    INC OBJ_TERTIARY_SWITCH?[18],X
L_00:0651: ; 00:0651, 0x000651
    JMP OBJECT_X_MOVE?
STATE_0xB7_SWITCH_B: ; 00:0654, 0x000654
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:0651
    BEQ L_00:064E
STATE_0xB7_SWITCH_C: ; 00:065B, 0x00065B
    LDA #$B6
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$B0
    STA OBJECT_DATA_EXTRA_B?[18],X
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$63
    STA OBJ_ANIMATION_DISPLAY[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
    JSR OBJECT_X_MOVE?
STATE_0xB7_SWITCH_D: ; 00:0678, 0x000678
    LDY BG_UPDATING_INDEX
    TXA
    PHA
    LDA BG_UPDATE_DATA_B,Y
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:06C5
    LDY #$0D
    JSR L_1F:1347
    BCS L_00:06B3
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    SEC
    SBC #$01
    STA OBJ_POS_X??[18],Y
    LDA 4C6_OBJ_UNK[18],X
    CLC
    ADC #$10
    STA 4C6_OBJ_UNK[18],Y
    CLC
    ADC OBJ_POS_X??[18],Y
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA #$B9
    STA OBJ_ENABLED_STATE+MORE?[18],Y
L_00:06B3: ; 00:06B3, 0x0006B3
    LDA #$E0
    STA 520_OBJ_POS_X_LARGE?[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
    INC BG_UPDATING_INDEX
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    JMP OBJECT_X_MOVE?
L_00:06C5: ; 00:06C5, 0x0006C5
    JMP OBJECT_X_MOVE?
STATE_0xB7_SWITCH_E: ; 00:06C8, 0x0006C8
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    LDA #$40
    LDY #$00
    JSR ADD_A/Y_TO_DELTA_UNK_C
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    CMP #$F0
    BCS L_00:06E9
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    CMP #$10
    BNE L_00:06FD
    INC OBJ_ANIMATION_DISPLAY[18],X
    JMP OBJECT_X_MOVE?
L_00:06E9: ; 00:06E9, 0x0006E9
    LDA #$31
    JSR SND_BANKED_DISPATCH
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    JSR CLEAR_OBJ_ATTRS_DELTAS?
    STA 4C6_OBJ_UNK[18],X
    STA 4D8_OBJ_UNK[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
L_00:06FD: ; 00:06FD, 0x0006FD
    JMP OBJECT_X_MOVE?
STATE_0xB7_SWITCH_F: ; 00:0700, 0x000700
    LDY BG_UPDATING_INDEX
    TXA
    PHA
    LDA BG_UPDATE_DATA_B,Y
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:0718
    INC BG_UPDATING_INDEX
    INC 70F_UNKNOWN
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:0718: ; 00:0718, 0x000718
    JMP OBJECT_X_MOVE?
OBJ_STATE_0xB9_HANDLER: ; 00:071B, 0x00071B
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:073E
    LDA #$61
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA 70F_UNKNOWN
    CMP #$02
    BCC L_00:073B
    INC OBJ_ANIMATION_DISPLAY[18],X
    LDA #$01
    STA 503_OBJ_POS_X_LARGEST?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$00
    STA FLAG_8A_UNK_ROCKSTEADY?
L_00:073B: ; 00:073B, 0x00073B
    JMP OBJECT_X_MOVE?
L_00:073E: ; 00:073E, 0x00073E
    LDA #$40
    LDY #$00
    JSR ADD_A/Y_TO_DELTA_UNK_C
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    BMI L_00:0763
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    JSR CLEAR_OBJ_ATTRS_DELTAS?
    STA 4C6_OBJ_UNK[18],X
    STA 4D8_OBJ_UNK[18],X
    LDA #$07
    STA OBJ_ENABLED_STATE+MORE?[18],X
    LDA #$06
    STA OBJ_ANIMATION_DISPLAY[18],X
    JMP INT_OBJECT[X]_DATA_SMOL
L_00:0763: ; 00:0763, 0x000763
    JMP OBJECT_X_MOVE?
OBJ_STATE_0xB2_HANDLER: ; 00:0766, 0x000766
    LDY BG_UPDATING_INDEX ; Load index.
    TXA ; Save Xobj.
    PHA
    LDA BG_UPDATE_DATA_B,Y ; Load data.
    JSR BACKGROUND_UPDATING_INTERFACE ; Do update.
    PLA ; Restore Xobj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load flag.
    BNE EXIT_MOVE
    INC BG_UPDATING_INDEX ; Mover index.
    LDA #$0C
    STA OBJ_ENABLED_STATE+MORE?[18],X ; Move to obj.
EXIT_MOVE: ; 00:077D, 0x00077D
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
OBJ_STATE_0x83_HANDLER: ; 00:0780, 0x000780
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x83_SWITCH_A)
    HIGH(STATE_0x83_SWITCH_A)
    LOW(STATE_0x83_SWITCH_B)
    HIGH(STATE_0x83_SWITCH_B)
    LOW(STATE_0x84_SWITCH_C)
    HIGH(STATE_0x84_SWITCH_C)
    LOW(STATE_0x85_SWITCH_D)
    HIGH(STATE_0x85_SWITCH_D)
STATE_0x83_SWITCH_A: ; 00:078E, 0x00078E
    LDA #$A0
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDY #$16
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Palette mod.
    LDA #$43
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$00
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$09
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
EXIT_INC_SECONDARY_MOVE: ; 00:07A6, 0x0007A6
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
EXIT_MOVE: ; 00:07A9, 0x0007A9
    JMP OBJECT_X_MOVE? ; Move.
STATE_0x83_SWITCH_B: ; 00:07AC, 0x0007AC
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load status.
    AND #$03 ; Keep bits.
    BNE EXIT_MOVE ; Any set, just move.
    BEQ EXIT_INC_SECONDARY_MOVE ; Mod secondary otherwise.
STATE_0x84_SWITCH_C: ; 00:07B5, 0x0007B5
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    CMP #$00 ; If _ #$00
    BEQ RET_IS_ZERO ; ==, goto.
    LDY #$04 ; Obj.
LOOP_ALL_OBJS: ; 00:07BE, 0x0007BE
    LDA OBJ_ENABLED_STATE+MORE?[18],Y ; Load.
    BEQ OBJ_FREE_FOUND ; Clear, goto.
    INY ; Next.
    CPY #$07 ; If _ #$07
    BCC LOOP_ALL_OBJS ; <, goto.
    BCS RET_IS_ZERO ; Looped all, goto.
OBJ_FREE_FOUND: ; 00:07CA, 0x0007CA
    LDA OBJ_ENABLED_STATE+MORE?[18],X ; X to Y attrs.
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    STA 556_OBJ_STATUS_FLAGS_A[18],Y
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y
    LDA OBJ_SECONDARY_SWITCH?[18],X
    STA OBJ_SECONDARY_SWITCH?[18],Y
    LDA OBJ_TERTIARY_SWITCH?[18],X
    STA OBJ_TERTIARY_SWITCH?[18],Y
    JSR INIT_OBJECT[X]_DATA_FULL ; Delete X.
    TYA ; Y slot # to X.
    TAX
    LDA #$9F
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set X attr.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move X secondary.
    LDY #$00 ; Load.
    LDA TMP_0C ; Load.
    BNE TMP_SET
    LDY #$02 ; Alt val if set.
TMP_SET: ; 00:080F, 0x00080F
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y ; Load.
    AND #$40 ; Test bit.
    BNE BIT_SET
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    ORA #$04 ; Set.
    STA 556_OBJ_STATUS_FLAGS_A[18],X ; Store back.
    LDA #$03 ; Seed positive.
    BNE VAL_SEEDED ; Always taken.
BIT_SET: ; 00:0822, 0x000822
    LDA #$FC ; Seed negative.
VAL_SEEDED: ; 00:0824, 0x000824
    STA OBJ_POS_X_DELTA?[18],X ; Store to delta.
    LDA #$80
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set subpx.
    LDA #$2C
    JSR SND_BANKED_DISPATCH ; PLay sound.
RET_IS_ZERO: ; 00:0831, 0x000831
    SEC ; Prep sub.
    LDA SCRIPT_VAL_UNK[2] ; Load
    SBC OBJ_POS_X_SUBPIXEL_DELTA? ; Mod delta.
    BCS RTS ; No underflow, leave.
    DEC OBJ_POS_X_CONFIRMED[18],X ; --
    BNE RTS ; Nonzero, leave.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die if zero.
RTS: ; 00:0840, 0x000840
    RTS ; Leave.
STATE_0x85_SWITCH_D: ; 00:0841, 0x000841
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Inc.
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Load
    CMP #$08 ; If _ #$08
    BCS SEED_ALT ; >=, goto.
    LDA #$44
    BNE VAL_SEEDED ; Always taken.
SEED_ALT: ; 00:084F, 0x00084F
    LDA #$45 ; Seed val.
VAL_SEEDED: ; 00:0851, 0x000851
    STA OBJ_ANIMATION_DISPLAY[18],X ; Alt val.
    JSR OBJECT_X_MOVE? ; Move.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$03 ; Test bottom bits.
    BEQ OBJ_CONTINUE
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
OBJ_CONTINUE: ; 00:0861, 0x000861
    RTS ; Leave.
OBJ_STATE_0xBB_HANDLER: ; 00:0862, 0x000862
    LDA #$01
    STA 712_FLAG_PALETTE_UNK ; Set flag.
    LDA #$02
    STA OBJ_ENABLED_STATE+MORE?[18],X ; Move to obj.
    RTS
OBJ_STATE_Ox86_HANDLER: ; 00:086D, 0x00086D
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    AND OBJ_TERTIARY_SWITCH?[18],X ; And with tert.
    BEQ SWITCH_ON_SECONDARY ; == 0, switch.
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    CMP #$02 ; If _ #$02
    BCS SWITCH_ON_SECONDARY ; >=, switch.
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    CMP #$00 ; If _ #$00
    BEQ SWITCH_ON_SECONDARY ; ==, switch.
    CMP #$02 ; If _ #$02
    BEQ SWITCH_ON_SECONDARY ; ==, switch.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set X secondary.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Do.
    LDA #$01
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attrs.
    STA OBJ_TERTIARY_SWITCH?[18],X
    JMP CLEAR_OBJ_ATTRS_DELTAS? ; Clear attrs. Abuse RTS.
SWITCH_ON_SECONDARY: ; 00:089A, 0x00089A
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x86_SWITCH_TERT)
    HIGH(STATE_0x86_SWITCH_TERT)
    LOW(STATE_0x86_SWITCH_B)
    HIGH(STATE_0x86_SWITCH_B)
    LOW(STATE_0x32_SWITCH_F) ; Another state piggyback.
    HIGH(STATE_0x32_SWITCH_F)
STATE_0x86_SWITCH_TERT: ; 00:08A6, 0x0008A6
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Switch on tert.
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x86_TERT_A)
    HIGH(STATE_0x86_TERT_A)
    LOW(STATE_0x86_TERT_B)
    HIGH(STATE_0x86_TERT_B)
    LOW(STATE_0x86_TERT_C)
    HIGH(STATE_0x86_TERT_C)
STATE_0x86_TERT_A: ; 00:08B2, 0x0008B2
    LDA #$B1
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load focus.
    LDA OBJ_POS_X_CONFIRMED[18],Y ; Load
    BMI SEED_POSITIVE ; Negative, goto.
    LDA #$D0 ; Load val.
    BNE VAL_SEEDED
SEED_POSITIVE: ; 00:08C3, 0x0008C3
    LDA #$30
VAL_SEEDED: ; 00:08C5, 0x0008C5
    STA OBJ_POS_X_CONFIRMED[18],X ; Set X pos.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Focus.
    LDA OBJ_POS_X??[18],Y ; Load from focus.
    STA OBJ_POS_X??[18],X ; Set to ourselves.
    LDA #$A8
    STA OBJ_ENABLED_STATE+MORE?+1,X ; Set attr.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Move to pair.
    STA OBJ_POS_X_CONFIRMED+1,X
    LDA OBJ_POS_X??[18],X ; Again.
    STA OBJ_POS_X??+1,X
    LDA #$04
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JSR OBJECT_X_MOVE? ; Move obj.
    LDA #$25
    JMP SND_BANKED_DISPATCH ; Play sound.
STATE_0x86_TERT_B: ; 00:08F2, 0x0008F2
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE TIMER_CONTINUE ; Nonzero, continue.
    JSR HOLD_ANIM_DISP_HELPER ; Do.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
TIMER_CONTINUE: ; 00:08FD, 0x0008FD
    JMP OBJECT_X_MOVE? ; Leave.
STATE_0x86_TERT_C: ; 00:0900, 0x000900
    LDA #$FE
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set delta.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Init tert.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JSR HOLD_ANIM_DISP_HELPER ; Do.
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK ; Do.
    JMP OBJECT_X_MOVE? ; Do. Abuse RTS.
STATE_0x86_SWITCH_B: ; 00:0916, 0x000916
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Load tert.
    BNE EXIT_NOT_THE_OTHER ; If set, just exit.
    LDA 4C6_OBJ_UNK[18],X ; Load
    CMP #$E8 ; If _ #$E8
    BCS EXIT_ATTR_CLEAR ; >=, goto.
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Clear attrs.
    STA 532_OBJ_UNK_POS_DELTA?[18],X
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load.
    AND #$04 ; Keep bit.
    BNE ALT_VAL
    LDA #$FC ; Seed.
    BNE VAL_SEEDED ; Always taken.
ALT_VAL: ; 00:0935, 0x000935
    LDA #$04 ; Load val.
VAL_SEEDED: ; 00:0937, 0x000937
    STA OBJ_POS_X_DELTA?[18],X ; Store delta.
    LDA #$00
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Clear attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_ATTR_CLEAR: ; 00:0942, 0x000942
    JSR HOLD_ANIM_DISP_HELPER ; Do.
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    JMP OBJECT_X_MOVE?
EXIT_NOT_THE_OTHER: ; 00:094B, 0x00094B
    JSR HOLD_ANIM_DISP_HELPER ; Do.
    JSR OBJECT_X_MOVE?
    JMP OBJ_POS_BASED_INIT_CLEAR
HOLD_ANIM_DISP_HELPER: ; 00:0954, 0x000954
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load hold.
    CMP #$08 ; If _ #$08
    BCC VAL_LT_0x8 ; <, goto.
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Clear hold.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Move step.
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    AND #$01 ; Keep bit only.
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Store back.
VAL_LT_0x8: ; 00:096B, 0x00096B
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    CLC ; Prep add.
    ADC #$3C ; Add with.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set to display.
    INC OBJ_ANIM_HOLD_TIMER?[18],X ; Inc hold.
    RTS ; Leave.
OBJ_STATE_0xA8_HANDLER: ; 00:0978, 0x000978
    INC OBJ_ANIM_HOLD_TIMER?[18],X
    LDA OBJ_ANIM_HOLD_TIMER?[18],X
    CMP #$08
    BCC L_00:099A
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    CLC
    ADC #$3E
    CMP #$41
    BCC L_00:0997
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:0997: ; 00:0997, 0x000997
    STA OBJ_ANIMATION_DISPLAY[18],X
L_00:099A: ; 00:099A, 0x00099A
    JSR OBJECT_X_MOVE?
    JMP OBJ_POS_BASED_INIT_CLEAR
OBJ_STATE_0x8E_HANDLER: ; 00:09A0, 0x0009A0
    LDY BG_UPDATING_INDEX ; Load index.
    TXA ; Save Xobj.
    PHA
    LDA BG_UPDATE_DATA_C,Y ; Get update.
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA ; Restore Xobj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load flag.
    BNE RTS ; Set, leave.
    INC BG_UPDATING_INDEX ; Next index.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
RTS: ; 00:09B5, 0x0009B5
    RTS
OBJ_STATE_0x87_HANDLER: ; 00:09B6, 0x0009B6
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Switch on secondary.
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x86_SWITCH_A)
    HIGH(STATE_0x86_SWITCH_A)
    LOW(STATE_0x87_SWITCH_B)
    HIGH(STATE_0x87_SWITCH_B)
    LOW(STATE_0x87_SWITCH_C)
    HIGH(STATE_0x87_SWITCH_C)
STATE_0x86_SWITCH_A: ; 00:09C2, 0x0009C2
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$03 ; Keep bottom bits.
    BNE EXIT_MOVE
    LDA #$A1
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$02
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Add colors.
    LDA #$80
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$02
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$3A
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim disp.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
EXIT_MOVE: ; 00:09E8, 0x0009E8
    JMP OBJECT_X_MOVE? ; Move.
STATE_0x87_SWITCH_B: ; 00:09EB, 0x0009EB
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do RTN.
    CMP #$00 ; If _ #$00
    BEQ EXIT?
    LDA TMP_09 ; Load
    CMP #$04 ; If _ #$04
    BCS EXIT? ; >=, goto.
    LDY #$04 ; Obj.
LOOP_OBJS: ; 00:09FA, 0x0009FA
    LDA OBJ_ENABLED_STATE+MORE?[18],Y ; Load
    BEQ FOUND_FREE_OBJ ; If not used, goto.
    INY ; Next obj.
    CPY #$07 ; End obj.
    BCC LOOP_OBJS ; <, goto.
    BCS EXIT? ; Can't queue, leave.
FOUND_FREE_OBJ: ; 00:0A06, 0x000A06
    LDA OBJ_ENABLED_STATE+MORE?[18],X ; Copy X to Yobj.
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    STA 556_OBJ_STATUS_FLAGS_A[18],Y
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y
    LDA OBJ_SECONDARY_SWITCH?[18],X
    STA OBJ_SECONDARY_SWITCH?[18],Y
    LDA OBJ_TERTIARY_SWITCH?[18],X
    STA OBJ_TERTIARY_SWITCH?[18],Y
    JSR INIT_OBJECT[X]_DATA_FULL ; Kill X.
    TYA ; Yobj to Aobj.
    TAX
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$88
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDY #$00 ; Index.
    LDA TMP_0C ; Load
    BNE SEEDED_P1
    LDY #$02 ; Alt value, P2.
SEEDED_P1: ; 00:0A50, 0x000A50
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y ; Load for player index chosen.
    AND #$40 ; Test bit.
    BNE BIT_SET
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Set attr.
    ORA #$04
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    LDA #$03 ; Seed val positive.
    BNE VAL_SEEDED ; Always taken.
BIT_SET: ; 00:0A63, 0x000A63
    LDA #$FD ; Alt val.
VAL_SEEDED: ; 00:0A65, 0x000A65
    STA OBJ_POS_X_DELTA?[18],X ; Store as delta.
    LDA #$2C
    JSR SND_BANKED_DISPATCH ; Play sound.
EXIT?: ; 00:0A6D, 0x000A6D
    SEC ; Prep sub.
    LDA SCRIPT_VAL_UNK[2] ; Load val.
    SBC OBJ_POS_X_SUBPIXEL_DELTA? ; Sub with.
    BCS RTS ; No underflow, goto.
    DEC OBJ_POS_X_CONFIRMED[18],X ; --
    BNE RTS ; Nonzero, leave.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
RTS: ; 00:0A7C, 0x000A7C
    RTS ; Leave.
STATE_0x87_SWITCH_C: ; 00:0A7D, 0x000A7D
    LDA #$3B
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    JSR OBJECT_X_MOVE? ; Move.
    JSR OBJ_POS_BASED_INIT_CLEAR ; Do.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$03 ; Test bits.
    BEQ RTS ; Not set, goto.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die if any set.
RTS: ; 00:0A92, 0x000A92
    RTS ; Leave.
OBJ_STATE_0x9E_HANDLER: ; 00:0A93, 0x000A93
    LDA #$A3
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDY #$17
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Change color.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
OBJ_STATE_0x88_HANDLER: ; 00:0A9F, 0x000A9F
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load secondary.
    BNE SECONDARY_NONZERO ; Set, goto.
    LDA #$4D
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$A6
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA OBJ_POS_X_DELTA?[18],X ; Load pos.
    BPL POS_POSITIVE ; POsitive, goto.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Set attr.
    ORA #$04
    STA 556_OBJ_STATUS_FLAGS_A[18],X
POS_POSITIVE: ; 00:0AC0, 0x000AC0
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDA #$2C
    JSR SND_BANKED_DISPATCH ; Play sound.
    JSR OBJECT_X_MOVE? ; Move.
    JMP OBJ_POS_BASED_INIT_CLEAR ; Do. Abuse RTS.
SECONDARY_NONZERO: ; 00:0ACE, 0x000ACE
    JSR OBJECT_X_MOVE? ; Move.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load.
    AND #$03 ; Keep bits.
    BEQ EXIT ; None set, exit.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
EXIT: ; 00:0ADB, 0x000ADB
    JMP OBJ_POS_BASED_INIT_CLEAR ; Do. Abuse RTS.
OBJ_STATE_0x89_HANDLER: ; 00:0ADE, 0x000ADE
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Switch on secondary.
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x89_SWITCH_A)
    HIGH(STATE_0x89_SWITCH_A)
    LOW(STATE_0x89_SWITCH_B)
    HIGH(STATE_0x89_SWITCH_B)
    LOW(STATE_0x89_SWITCH_C)
    HIGH(STATE_0x89_SWITCH_C)
    LOW(STATE_0x89_SWITCH_D)
    HIGH(STATE_0x89_SWITCH_D)
    LOW(STATE_0x89_SWITCH_E)
    HIGH(STATE_0x89_SWITCH_E)
STATE_0x89_SWITCH_A: ; 00:0AEE, 0x000AEE
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5 ; Set GFX.
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS ; Get pair.
    BCS EXIT_MOVE
    LDA OBJ_ENABLED_STATE+MORE?[18],X ; Move X to Yobj.
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA 4C6_OBJ_UNK[18],X
    STA 4C6_OBJ_UNK[18],Y
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    STA 556_OBJ_STATUS_FLAGS_A[18],Y
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y
    LDA OBJ_SECONDARY_SWITCH?[18],X
    STA OBJ_SECONDARY_SWITCH?[18],Y
    LDA OBJ_TERTIARY_SWITCH?[18],X
    STA OBJ_TERTIARY_SWITCH?[18],Y
    JSR INIT_OBJECT[X]_DATA_FULL ; Init ourselves.
    TYA ; Yobj to X.
    TAX
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
EXIT_MOVE: ; 00:0B35, 0x000B35
    JSR OBJECT_X_MOVE? ; Move obj.
    JMP TEST_OBJ_UPDATE_FLAG_INIT ; Do. Abuse RTS.
STATE_0x89_SWITCH_B: ; 00:0B3B, 0x000B3B
    LDA #$4B
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$60
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Set hold.
    LDA LEVEL/SCREEN_ON ; Load level.
    CMP #$08 ; If _ #$08
    BEQ LEVEL_EQ_0x8 ; ==, goto.
    LDY SCRIPT_LEVEL_SCREEN[2] ; Load val.
    LDA OBJ_89_DATA_A,Y ; Load from array.
STATUS_SEEDED: ; 00:0B50, 0x000B50
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Store flags from.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JSR OBJECT_X_MOVE? ; Move.
    LDA #$08
    JMP SND_BANKED_DISPATCH ; Play sound, abuse RTS.
LEVEL_EQ_0x8: ; 00:0B5E, 0x000B5E
    LDA SCRIPT_LEVEL_SCREEN[2] ; Load screen.
    CMP #$03 ; If _ #$03
    BCC STATUS_SEED_0x32 ; <, seed.
    CMP #$05 ; If _ #$05
    BCS STATUS_SEED_0x34 ; >=, seed.
    CMP #$03 ; If _ #$03
    BNE SEED_WITH_POS_A ; !=, goto.
    LDA SCRIPT_SCREEN_X_SCROLL[2]
    CMP #$D0
    BCC STATUS_SEED_0x32
    BCS SEED_WITH_POS_B
SEED_WITH_POS_A: ; 00:0B74, 0x000B74
    LDA SCRIPT_SCREEN_X_SCROLL[2] ; Load pos.
    CMP #$20 ; If _ #$20
    BCS STATUS_SEED_0x33 ; >=, seed with.
SEED_WITH_POS_B: ; 00:0B7A, 0x000B7A
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load screen pos.
    BPL STATUS_SEED_0x32 ; Positive, seed val.
STATUS_SEED_0x33: ; 00:0B7F, 0x000B7F
    LDA #$33
    BNE STATUS_SEEDED ; Always taken for all.
STATUS_SEED_0x32: ; 00:0B83, 0x000B83
    LDA #$32
    BNE STATUS_SEEDED
STATUS_SEED_0x34: ; 00:0B87, 0x000B87
    LDA #$34
    BNE STATUS_SEEDED
OBJ_89_DATA_A: ; 00:0B8B, 0x000B8B
    .db 21 ; Status array.
    .db 21
    .db 21
    .db 22
    .db 22
    .db 22
    .db 22
    .db 23
    .db 23
    .db 24
    .db 24
STATE_0x89_SWITCH_C: ; 00:0B96, 0x000B96
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load hold.
    AND #$07 ; Keep bottom bits.
    BNE BITS_SET ; Set, goto.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Next step.
BITS_SET: ; 00:0BA0, 0x000BA0
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load step.
    AND #$01 ; Keep even/odd only.
    CLC
    ADC #$4B ; Add to get anim.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Store animation.
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; Hold--
    BEQ HOLD_EQ_ZERO ; == 0, goto.
    JMP OBJECT_X_MOVE? ; Move.
HOLD_EQ_ZERO: ; 00:0BB3, 0x000BB3
    LDA #$00
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Reset index.
    LDA #$00
    STA OBJ_ANIMATION_DISPLAY[18],X ; No display.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x89_SWITCH_D: ; 00:0BC3, 0x000BC3
    LDA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Load
    BEQ ATTR_EQ_ZERO ; == 0, goto.
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; --
    JSR OBJECT_X_MOVE? ; Move object.
    JMP TEST_OBJ_UPDATE_FLAG_INIT ; Exit.
ATTR_EQ_ZERO: ; 00:0BD1, 0x000BD1
    LDY #$04 ; Obj.
LOOP_ALL_OBJS: ; 00:0BD3, 0x000BD3
    LDA OBJ_ENABLED_STATE+MORE?[18],Y ; Load
    BEQ OBJ_FREE ; Free, goto.
    INY ; Next obj.
    CPY #$07 ; If _ #$07
    BCC LOOP_ALL_OBJS ; <, goto.
    BCS EXIT_MOVE_FLAG ; >=, goto.
OBJ_FREE: ; 00:0BDF, 0x000BDF
    STY TMP_10 ; Obj # to.
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    ASL A ; << 1, *2. Word index.
    TAY
    LDA OBJ_89_DATA_A,Y ; Set attr from.
    STA TMP_00
    LDA OBJ_89_DATA_B,Y
    STA TMP_01
    LDY TMP_10 ; Load obj #
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CLC ; Prep add.
    ADC TMP_00 ; Add with.
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store back.
    BPL VAL_POSITIVE ; Result positive, goto.
    LDA TMP_00 ; Load
    BPL SKIP_STATUS_MOD ; Positive, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$20 ; If _ #$20
    BCS SKIP_STATUS_MOD ; >=, goto.
    LDA #$02 ; Val.
    BNE STATUS_SEEDED ; Use here.
VAL_POSITIVE: ; 00:0C0C, 0x000C0C
    LDA TMP_00 ; Load
    BMI SKIP_STATUS_MOD ; If negative, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$E0 ; If _ #$E0
    BCC SKIP_STATUS_MOD ; <, goto.
    LDA #$01 ; Seed alt.
STATUS_SEEDED: ; 00:0C19, 0x000C19
    STA 556_OBJ_STATUS_FLAGS_A[18],Y ; Seed status.
SKIP_STATUS_MOD: ; 00:0C1C, 0x000C1C
    LDA TMP_01 ; Load
    STA 4C6_OBJ_UNK[18],Y ; Store to OBJ.
    LDA OBJ_POS_X??[18],X ; Load from X.
    STA OBJ_POS_X??[18],Y ; To OBJ.
    LDA #$8A
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Set state.
    LDA #$18
    STA OBJ_ANIM_HOLD_TIMER?[18],Y ; Set hold.
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],Y ; Set health.
    LDA #$08
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Set focus/attr.
    LDA #$30
    JSR SND_BANKED_DISPATCH ; Play sound.
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    CMP #$08 ; If _ #$08
    BCC EXIT_MOVE_FLAG ; <, goto.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
EXIT_MOVE_FLAG: ; 00:0C4D, 0x000C4D
    JSR OBJECT_X_MOVE? ; Move.
    JMP TEST_OBJ_UPDATE_FLAG_INIT ; Goto.
OBJ_89_DATA_A: ; 00:0C53, 0x000C53
    .db F4
OBJ_89_DATA_B: ; 00:0C54, 0x000C54
    .db 00
    .db 0C
    .db E8
    .db 0C
    .db 00
    .db F4
    .db E8
    .db 00
    .db 00
    .db 00
    .db E8
    .db F4
    .db F4
    .db 0C
    .db F4
STATE_0x89_SWITCH_E: ; 00:0C63, 0x000C63
    TXA ; Save Xobj.
    PHA
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load
    JSR BACKGROUND_UPDATING_INTERFACE ; Update interface with val.
    PLA ; Restore Xobj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load
    BNE FLAG_SET ; If set, goto.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
FLAG_SET: ; 00:0C74, 0x000C74
    RTS ; Leave.
OBJ_STATE_0x8A_HANDLER: ; 00:0C75, 0x000C75
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; Hold--
    BMI EXIT_DIE ; If negative, goto.
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load
    LSR A ; >> 4, /16.
    LSR A
    LSR A
    ASL A
    TAY ; To Y index.
    LDA OBJ_DATA_A,Y
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim and extra from data.
    LDA OBJ_DATA_B,Y
    STA OBJECT_DATA_EXTRA_B?[18],X
    JMP OBJECT_X_MOVE? ; Move.
EXIT_DIE: ; 00:0C94, 0x000C94
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
OBJ_DATA_A: ; 00:0C97, 0x000C97
    .db 03
OBJ_DATA_B: ; 00:0C98, 0x000C98
    .db A9
    .db 02
    .db C5
    .db 01
    .db 00
OBJ_STATE_0xBA_HANDLER: ; 00:0C9D, 0x000C9D
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0xBA_SWITCH_A)
    HIGH(STATE_0xBA_SWITCH_A)
    LOW(STATE_0xBA_SWITCH_B)
    HIGH(STATE_0xBA_SWITCH_B)
    LOW(STATE_0xBA_SWITCH_C)
    HIGH(STATE_0xBA_SWITCH_C)
STATE_0xBA_SWITCH_A: ; 00:0CA9, 0x000CA9
    LDA PPU_UPDATE_BUF_INDEX
    CMP #$40
    BCS L_00:0CB7
    LDA #$37
    JSR SND_BANKED_DISPATCH
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0CB7: ; 00:0CB7, 0x000CB7
    LDA #$01
    STA BG_UPDATE_FLAG_UNK
    JMP OBJECT_X_MOVE?
STATE_0xBA_SWITCH_B: ; 00:0CBE, 0x000CBE
    LDY BG_UPDATING_INDEX
    TXA
    PHA
    LDA BG_UPDATE_DATA_D,Y
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:0CD8
    INC BG_UPDATING_INDEX
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
L_00:0CD8: ; 00:0CD8, 0x000CD8
    JMP OBJECT_X_MOVE?
STATE_0xBA_SWITCH_C: ; 00:0CDB, 0x000CDB
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:0CD8
    LDA #$00
    STA BG_UPDATE_FLAG_UNK
    JMP INIT_OBJECT[X]_DATA_FULL
OBJ_STATE_0x8D_HANDLER: ; 00:0CE7, 0x000CE7
    LDA #$01
    STA BG_UPDATE_FLAG_UNK ; Set flag.
    LDY BG_UPDATING_INDEX ; Load index.
    TXA ; Save Xobj to stack.
    PHA
    LDA BG_UPDATE_DATA_D,Y ; Load update to do.
    JSR BACKGROUND_UPDATING_INTERFACE ; Do update.
    PLA
    TAX ; Restore Xobj.
    LDA BG_UPDATING_FLAG_UNK ; Load
    BNE RTS ; Leave.
    INC BG_UPDATING_INDEX ; Next index.
    LDA #$00
    STA BG_UPDATE_FLAG_UNK ; Clear flag.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
RTS: ; 00:0D04, 0x000D04
    .db 60 ; Oops? lol.
OBJ_STATE_0x8F_HANDLER: ; 00:0D05, 0x000D05
    LDY BG_UPDATING_INDEX ; Load index.
    TXA ; Save Xobj to stack.
    PHA
    LDA BG_UPDATE_DATA_D,Y ; Load update.
    JSR BACKGROUND_UPDATING_INTERFACE ; Upload update.
    PLA ; Restore Xobj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load flag.
    BNE RTS ; If set, goto.
    INC BG_UPDATING_INDEX ; Next index.
    LDA #$57
    STA OBJ_ENABLED_STATE+MORE?[18],X ; Set self to obj?
    JSR INT_OBJECT[X]_DATA_SMOL ; Init basics.
    LDA #$60
    JMP SND_BANKED_DISPATCH ; Play sound, abuse RTS.
RTS: ; 00:0D24, 0x000D24
    .db 60 ; Oops, again?
OBJ_STATE_0x90_HANDLER: ; 00:0D25, 0x000D25
    LDA #$01
    STA BG_UPDATE_FLAG_UNK ; Set flag.
    LDY BG_UPDATING_INDEX ; Load index.
    TXA ; Save Xobj to stack.
    PHA
    LDA BG_UPDATE_DATA_E,Y ; Load BG update data.
    JSR BACKGROUND_UPDATING_INTERFACE ; Do update.
    PLA ; Restore XObj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load flag.
    BNE RTS ; Set, goto.
    INC BG_UPDATING_INDEX ; Next index.
    LDA #$00
    STA BG_UPDATE_FLAG_UNK ; Clear flag.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
RTS: ; 00:0D42, 0x000D42
    RTS ; Leave.
OBJ_STATE_0xC0_HANDLER: ; 00:0D43, 0x000D43
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:0D50
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:0D4F
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0D4F: ; 00:0D4F, 0x000D4F
    RTS
L_00:0D50: ; 00:0D50, 0x000D50
    LDA #$01
    STA BG_UPDATE_FLAG_UNK
    LDY BG_UPDATING_INDEX
    TXA
    PHA
    LDA BG_UPDATE_DATA_E,Y
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:0D6E
    INC BG_UPDATING_INDEX
    LDA #$11
    STA OBJ_ENABLED_STATE+MORE?[18],X
    JMP INT_OBJECT[X]_DATA_SMOL
L_00:0D6E: ; 00:0D6E, 0x000D6E
    RTS
OBJ_STATE_0x94_HANDLER: ; 00:0D6F, 0x000D6F
    LDY LEVEL_8_CUTSCENE_IN_PROGRESS_FLAG
    LDA LEVEL/SCREEN_ON
    CMP #$07
    BEQ L_00:0D7D
    LDA L_00:0D8F,Y
    JMP L_00:0D80
L_00:0D7D: ; 00:0D7D, 0x000D7D
    LDA L_00:0D8D,Y
L_00:0D80: ; 00:0D80, 0x000D80
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LDA #$92
    STA OBJ_ENABLED_STATE+MORE?[18],X
    INC LEVEL_8_CUTSCENE_IN_PROGRESS_FLAG
    JMP OBJECT_X_MOVE?
L_00:0D8D: ; 00:0D8D, 0x000D8D
    .db 00
    .db 01
L_00:0D8F: ; 00:0D8F, 0x000D8F
    .db 00
    .db 01
    .db 00
    .db 02
    .db 03
OBJ_STATE_0x93_HANDLER: ; 00:0D94, 0x000D94
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
RTN_A: ; 00:0DA0, 0x000DA0
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    AND #$03
    BNE L_00:0DC1
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA IRQ/SCRIPT_RUN_COUNT?
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    CLC
    ADC #$01
    AND #$03
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    LDA DB_BG_INDEX_UNK
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    INC DB_BG_INDEX_UNK
L_00:0DC1: ; 00:0DC1, 0x000DC1
    JMP OBJECT_X_MOVE?
RTN_B: ; 00:0DC4, 0x000DC4
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X
    LDA L_00:0DDB,Y
    STA TMP_00
    LDA IRQ/SCRIPT_RUN_COUNT?
    CMP TMP_00
    BNE L_00:0DD5
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0DD5: ; 00:0DD5, 0x000DD5
    JSR OBJECT_X_MOVE?
    JMP TEST_OBJ_UPDATE_FLAG_INIT
L_00:0DDB: ; 00:0DDB, 0x000DDB
    .db 00
    .db 40
    .db 80
    .db C0
    .db 00
    .db 40
    .db 80
    .db C0
RTN_C: ; 00:0DE3, 0x000DE3
    TXA
    PHA
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    CLC
    ADC #$37
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE 00:0DF7
    DEC OBJ_SECONDARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
OBJ_STATE_0xA6_HANDLER: ; 00:0DFA, 0x000DFA
    TXA ; Save Xobj.
    PHA
    LDA #$3B ; Load val.
    JSR BACKGROUND_UPDATING_INTERFACE ; Update.
    PLA ; Restore Xobj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load
    BNE RTS ; If set, leave.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
RTS: ; 00:0E0A, 0x000E0A
    RTS ; Leave.
OBJ_STATE_0x99_HANDLER: ; 00:0E0B, 0x000E0B
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x99_SWITCH_A)
    HIGH(STATE_0x99_SWITCH_A)
    LOW(STATE_0x99_SWITCH_B)
    HIGH(STATE_0x99_SWITCH_B)
    LOW(STATE_0x99_SWITCH_C)
    HIGH(STATE_0x99_SWITCH_C)
STATE_0x99_SWITCH_A: ; 00:0E17, 0x000E17
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    AND #$03
    BNE L_00:0E21
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0E21: ; 00:0E21, 0x000E21
    JMP OBJECT_X_MOVE?
STATE_0x99_SWITCH_B: ; 00:0E24, 0x000E24
    LDA OBJ_ANIM_HOLD_TIMER?[18],X
    BNE L_00:0E45
    LDA INF_LOOP_COUNTER
    AND #$40
    BEQ L_00:0E32
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0E32: ; 00:0E32, 0x000E32
    JSR OBJECT_X_MOVE?
    JSR TEST_OBJ_UPDATE_FLAG_INIT
    LDA OBJ_POS_X_CONFIRMED[18],X
    CMP #$20
    BCS L_00:0E44
    INC DB_BG_INDEX_UNK
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:0E44: ; 00:0E44, 0x000E44
    RTS
L_00:0E45: ; 00:0E45, 0x000E45
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    JMP L_00:0E32
STATE_0x99_SWITCH_C: ; 00:0E4B, 0x000E4B
    TXA
    PHA
    LDA DB_BG_INDEX_UNK
    CLC
    ADC #$3D
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:0E63
    LDA #$40
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    DEC OBJ_SECONDARY_SWITCH?[18],X
L_00:0E63: ; 00:0E63, 0x000E63
    JMP OBJECT_X_MOVE?
OBJ_STATE_0x9A_HANDLER: ; 00:0E66, 0x000E66
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x9A_SWITCH_A)
    HIGH(STATE_0x9A_SWITCH_A)
    LOW(STATE_0x9A_SWITCH_B)
    HIGH(STATE_0x9A_SWITCH_B)
    LOW(STATE_0x9A_SWITCH_C)
    HIGH(STATE_0x9A_SWITCH_C)
STATE_0x9A_SWITCH_A: ; 00:0E72, 0x000E72
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    AND #$03
    BNE L_00:0E8F
    JSR SUB_CHECK_OBJS-0x7-0x11_RET_CS_FINISHED
    BCC L_00:0E8F
    LDA OBJ_POS_X_CONFIRMED[18],X
    CMP #$80
    BNE L_00:0E8F
    INC BG_UPDATE_FLAG_UNK
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$35
    JSR SND_BANKED_DISPATCH
L_00:0E8F: ; 00:0E8F, 0x000E8F
    JMP OBJECT_X_MOVE?
STATE_0x9A_SWITCH_B: ; 00:0E92, 0x000E92
    TXA
    PHA
    LDA #$3F
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:0EB1
    TXA
    PHA
    LDA OBJ_POS_X_CONFIRMED[18],X
    JSR L_1F:1680
    PLA
    TAX
    LDA #$80
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0EB1: ; 00:0EB1, 0x000EB1
    JMP OBJECT_X_MOVE?
STATE_0x9A_SWITCH_C: ; 00:0EB4, 0x000EB4
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:0EB1
    LDA #$00
    STA BG_UPDATE_FLAG_UNK
    JMP INIT_OBJECT[X]_DATA_FULL
OBJ_STATE_0x9B_HANDLER: ; 00:0EC0, 0x000EC0
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x9B_SWITCH_A)
    HIGH(STATE_0x9B_SWITCH_A)
    LOW(STATE_0x9B_SWITCH_B)
    HIGH(STATE_0x9B_SWITCH_B)
    LOW(STATE_0x9B_SWITCH_C)
    HIGH(STATE_0x9B_SWITCH_C)
STATE_0x9B_SWITCH_A: ; 00:0ECC, 0x000ECC
    LDA DD_UNK
    BEQ L_00:0ED8
    LDA #$FF
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0ED8: ; 00:0ED8, 0x000ED8
    RTS
STATE_0x9B_SWITCH_B: ; 00:0ED9, 0x000ED9
    LDA OBJ_ANIM_HOLD_TIMER?[18],X
    BNE L_00:0EE1
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:0EE1: ; 00:0EE1, 0x000EE1
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    RTS
STATE_0x9B_SWITCH_C: ; 00:0EE5, 0x000EE5
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:0F39
    STY TMP_00
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    ASL A
    ASL A
    TAY
    LDA L_00:0F3A,Y
    STA TMP_08
    LDA L_00:0F3B,Y
    STA TMP_09
    LDA L_00:0F3C,Y
    STA TMP_0A
    LDA L_00:0F3D,Y
    LDY TMP_00
    STA 556_OBJ_STATUS_FLAGS_A[18],Y
    LDA TMP_0A
    STA 4C6_OBJ_UNK[18],Y
    LDA TMP_08
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA TMP_09
    STA OBJ_POS_X??[18],Y
    CLC
    ADC 4C6_OBJ_UNK[18],Y
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA #$9C
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    CMP #$08
    BCC L_00:0F31
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:0F31: ; 00:0F31, 0x000F31
    LDA #$4D
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    DEC OBJ_SECONDARY_SWITCH?[18],X
L_00:0F39: ; 00:0F39, 0x000F39
    RTS
L_00:0F3A: ; 00:0F3A, 0x000F3A
    .db 00
L_00:0F3B: ; 00:0F3B, 0x000F3B
    .db A0
L_00:0F3C: ; 00:0F3C, 0x000F3C
    .db A0
L_00:0F3D: ; 00:0F3D, 0x000F3D
    .db 00
    .db F0
    .db B0
    .db 90
    .db 02
    .db E0
    .db C0
    .db 80
    .db 02
    .db D0
    .db D0
    .db 70
    .db 02
    .db D0
    .db D0
    .db 70
    .db 02
    .db E0
    .db C0
    .db 80
    .db 02
    .db F0
    .db B0
    .db 90
    .db 02
    .db 00
    .db A0
    .db A0
    .db 00
OBJ_STATE_0x9C_HANDLER: ; 00:0F5A, 0x000F5A
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x9C_SWITCH_A)
    HIGH(STATE_0x9C_SWITCH_A)
    LOW(STATE_0x9C_SWITCH_B)
    HIGH(STATE_0x9C_SWITCH_B)
    LOW(STATE_0x9C_SWITCH_C)
    HIGH(STATE_0x9C_SWITCH_C)
    LOW(STATE_0x9C_SWITCH_D)
    HIGH(STATE_0x9C_SWITCH_D)
STATE_0x9C_SWITCH_A: ; 00:0F6B, 0x000F6B
    LDA #$2B
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$16
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$2D
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$87
    STA OBJECT_DATA_EXTRA_B?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
STATE_0x9C_SWITCH_B: ; 00:0F8D, 0x000F8D
    LDY #$00
    LDA #$20
    JSR ADD_A/Y_TO_DELTA_UNK_C
    LDA 544_OBJ_UNK_POS_DELTA?[18],X
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA 532_OBJ_UNK_POS_DELTA?[18],X
    STA OBJ_POS_X_DELTA?[18],X
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    JSR OBJECT_X_MOVE?
    LDA 4C6_OBJ_UNK[18],X
    BMI L_00:0FBE
    JSR CLEAR_OBJ_ATTRS_DELTAS?
    LDA #$00
    STA 4D8_OBJ_UNK[18],X
    STA 4C6_OBJ_UNK[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$1D
    JSR SND_BANKED_DISPATCH
L_00:0FBE: ; 00:0FBE, 0x000FBE
    RTS
STATE_0x9C_SWITCH_C: ; 00:0FBF, 0x000FBF
    LDA #$FC
    STA 532_OBJ_UNK_POS_DELTA?[18],X
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    LDA #$02
    STA OBJ_POS_X_DELTA?[18],X
    LDA #$80
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA #$30
    STA OBJ_ENABLED_STATE+MORE?+1,X
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED+1,X
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??+1,X
    LDA 4C6_OBJ_UNK[18],X
    STA 4C6_OBJ_UNK+1,X
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED+1,X
    INC OBJ_SECONDARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
STATE_0x9C_SWITCH_D: ; 00:0FF6, 0x000FF6
    LDY #$00
    LDA #$40
    JSR ADD_A/Y_TO_DELTA_UNK_C
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    JSR OBJECT_X_MOVE?
    LDA 4C6_OBJ_UNK[18],X
    BMI L_00:1013
    JSR CLEAR_OBJ_ATTRS_DELTAS?
    DEC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$1C
    JSR SND_BANKED_DISPATCH
L_00:1013: ; 00:1013, 0x001013
    JSR OBJ_POS_BASED_INIT_CLEAR
    LDA OBJ_ENABLED_STATE+MORE?[18],X
    BNE L_00:101F
    INX
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:101F: ; 00:101F, 0x00101F
    RTS
OBJ_STATE_0x9D_HANDLER: ; 00:1020, 0x001020
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:105D
    LDA TWO_PLAYERS_FLAG
    BEQ L_00:1043
    LDA OBJ_ANIMATION_DISPLAY[18]
    BEQ L_00:104C
    LDA OBJ_ANIMATION_DISPLAY+2
    BEQ L_00:1043
    LDA OBJ_POS_X_CONFIRMED[18]
    CMP #$60
    BCC L_00:1058
    LDA OBJ_POS_X_CONFIRMED+2
    CMP #$60
    BCC L_00:1058
    BCS L_00:1053
L_00:1043: ; 00:1043, 0x001043
    LDA OBJ_POS_X_CONFIRMED[18]
    CMP #$60
    BCC L_00:1058
    BCS L_00:1053
L_00:104C: ; 00:104C, 0x00104C
    LDA OBJ_POS_X_CONFIRMED+2
    CMP #$60
    BCC L_00:1058
L_00:1053: ; 00:1053, 0x001053
    INC OBJ_SECONDARY_SWITCH?[18],X
    INC DD_UNK
L_00:1058: ; 00:1058, 0x001058
    LDA #$01
    STA BG_UPDATE_FLAG_UNK
    RTS
L_00:105D: ; 00:105D, 0x00105D
    TXA
    PHA
    LDA #$C8
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:106F
    STA BG_UPDATE_FLAG_UNK
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:106F: ; 00:106F, 0x00106F
    RTS
OBJ_STATE_0xA2_HANDLER: ; 00:1070, 0x001070
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:109A
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    AND #$03
    BNE L_00:1094
    LDA #$DD
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$21
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    JSR FIND_PLAYER_FOCUS_HELPER
    LDA #$04
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:1094: ; 00:1094, 0x001094
    JSR OBJECT_X_MOVE?
    JMP TEST_OBJ_UPDATE_FLAG_INIT
L_00:109A: ; 00:109A, 0x00109A
    LDA OBJ_ANIM_HOLD_TIMER?[18],X
    BEQ L_00:10A5
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    JMP OBJECT_X_MOVE?
L_00:10A5: ; 00:10A5, 0x0010A5
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:1094
    LDA #$A3
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    STY TMP_17
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    BNE L_00:10FB
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X
    LDA IRQ/SCRIPT_RUN_COUNT?
    AND #$1F
    STA TMP_00
    LDA IRQ/SCRIPT_RUN_COUNT?
    LSR A
    LSR A
    LSR A
    LSR A
    AND #$1F
    STA TMP_01
    LDA INF_LOOP_COUNTER
    LSR A
    BCC L_00:10D7
    LDA TMP_00
    EOR #$FF
    CLC
    ADC #$01
    STA TMP_00
L_00:10D7: ; 00:10D7, 0x0010D7
    LDA INF_LOOP_COUNTER
    AND #$10
    BEQ L_00:10E6
    LDA TMP_01
    EOR #$FF
    CLC
    ADC #$01
    STA TMP_01
L_00:10E6: ; 00:10E6, 0x0010E6
    LDA OBJ_POS_X_CONFIRMED[18],Y
    CLC
    ADC TMP_00
    STA TMP_00
    LDA OBJ_POS_X??[18],Y
    CLC
    ADC TMP_01
    STA TMP_01
    LDY TMP_17
    JMP L_00:1111
L_00:10FB: ; 00:10FB, 0x0010FB
    LDA IRQ/SCRIPT_RUN_COUNT?
    CLC
    ADC INF_LOOP_COUNTER
    STA TMP_00
    LDA INF_LOOP_COUNTER
    SEC
    SBC IRQ/SCRIPT_RUN_COUNT?
    CMP #$E8
    BCS L_00:1149
    CMP #$A8
    BCC L_00:1149
    STA TMP_01
L_00:1111: ; 00:1111, 0x001111
    LDA TMP_00
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA TMP_01
    STA OBJ_POS_X??[18],Y
    SEC
    SBC #$30
    STA TMP_01
    LDA #$00
    SEC
    SBC TMP_01
    STA 4C6_OBJ_UNK[18],Y
    LDA IRQ/SCRIPT_RUN_COUNT?
    CLC
    ADC INF_LOOP_COUNTER
    AND #$3F
    CMP #$18
    BCS L_00:1135
    LDA #$18
L_00:1135: ; 00:1135, 0x001135
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    AND #$0F
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    JSR OBJECT_X_MOVE?
    JMP TEST_OBJ_UPDATE_FLAG_INIT
L_00:1149: ; 00:1149, 0x001149
    STY TMP_17
    LDA IRQ/SCRIPT_RUN_COUNT?
    AND #$0F
    TAY
    LDA L_00:115A,Y
    STA TMP_01
    LDY TMP_17
    JMP L_00:1111
L_00:115A: ; 00:115A, 0x00115A
    .db A8
    .db B8
    .db D7
    .db B0
    .db C0
    .db D0
    .db D8
    .db C8
    .db AC
    .db BC
    .db C8
    .db B4
    .db C4
    .db D4
    .db E4
    .db CC
OBJ_STATE_0xA3_HANDLER: ; 00:116A, 0x00116A
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0xA3_SWITCH_A)
    HIGH(STATE_0xA3_SWITCH_A)
    LOW(STATE_0xA4_SWITCH_B)
    HIGH(STATE_0xA4_SWITCH_B)
    LOW(STATE_0xA5_SWITCH_C)
    HIGH(STATE_0xA5_SWITCH_C)
    LOW(STATE_0xA5_SWITCH_D)
    HIGH(STATE_0xA5_SWITCH_D)
STATE_0xA3_SWITCH_A: ; 00:1178, 0x001178
    LDA #$92
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$C0
    STA OBJECT_DATA_EXTRA_B?[18],X
    LDA #$30
    STA OBJ_ENABLED_STATE+MORE?+1,X
    INC OBJ_SECONDARY_SWITCH?[18],X
    JMP OBJECT_X_MOVE?
STATE_0xA4_SWITCH_B: ; 00:1192, 0x001192
    LDA 4C6_OBJ_UNK[18],X
    BPL L_00:119E
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    CMP #$02
    BEQ L_00:11AF
L_00:119E: ; 00:119E, 0x00119E
    LDY #$00
    LDA #$80
    JSR ADD_A/Y_TO_DELTA_UNK_C
    JSR MOVE_OBJ_ATTR_BY_DELTA_UNK
    LDA 4C6_OBJ_UNK[18],X
    CMP #$10
    BCS L_00:11C4
L_00:11AF: ; 00:11AF, 0x0011AF
    LDA #$06
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC OBJ_ANIMATION_DISPLAY[18],X
    LDA #$11
    JSR SND_BANKED_DISPATCH
    INX
    JSR INIT_OBJECT[X]_DATA_FULL
    DEX
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:11C4: ; 00:11C4, 0x0011C4
    JMP OBJECT_X_MOVE?
STATE_0xA5_SWITCH_C: ; 00:11C7, 0x0011C7
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    BNE L_00:11D9
    LDA #$AD
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$05
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:11D9: ; 00:11D9, 0x0011D9
    JMP OBJECT_X_MOVE?
STATE_0xA5_SWITCH_D: ; 00:11DC, 0x0011DC
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    BNE L_00:11D9
    JSR INIT_OBJECT[X]_DATA_FULL
    INX
    JMP INIT_OBJECT[X]_DATA_FULL
OBJ_STATE_0xA4_HANDLER: ; 00:11E8, 0x0011E8
    LDA #$01
    STA BG_UPDATE_FLAG_UNK ; Set flag.
    TXA ; Save Xobj.
    PHA
    LDA #$49 ; Val.
    JSR BACKGROUND_UPDATING_INTERFACE ; Update.
    PLA ; Restore Xobj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load
    BNE MOVE ; If nonzero, do move.
    INC BG_UPDATING_INDEX ; Inc.
    LDA #$00
    STA BG_UPDATE_FLAG_UNK ; Clear flag.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
MOVE: ; 00:1202, 0x001202
    JMP OBJECT_X_MOVE? ; Move.
OBJ_STATE_0xA5_HANDLER: ; 00:1205, 0x001205
    TXA ; Save Xobj.
    PHA
    LDA #$4A ; Val.
    JSR BACKGROUND_UPDATING_INTERFACE ; Update.
    PLA ; Restore Xobj.
    TAX
    LDA BG_UPDATING_FLAG_UNK ; Load
    BNE RTS ; If set, leave.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
RTS: ; 00:1215, 0x001215
    RTS ; Leave.
OBJ_STATE_0x9F_HANDLER: ; 00:1216, 0x001216
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x9F_SWITCH_A)
    HIGH(STATE_0x9F_SWITCH_A)
    LOW(STATE_0x9F_SWITCH_B)
    HIGH(STATE_0x9F_SWITCH_B)
    LOW(STATE_0x9F_SWITCH_C)
    HIGH(STATE_0x9F_SWITCH_C)
STATE_0x9F_SWITCH_A: ; 00:1222, 0x001222
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    AND #$03
    BNE L_00:1248
    LDA #$BB
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$00
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$7B
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$00
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$09
    STA OBJECT_DATA_EXTRA_B?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:1248: ; 00:1248, 0x001248
    JMP OBJECT_X_MOVE?
STATE_0x9F_SWITCH_B: ; 00:124B, 0x00124B
    JSR L_00:130B
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    CMP #$00
    BNE L_00:1258
    JMP L_00:12DB
L_00:1258: ; 00:1258, 0x001258
    LDA TMP_09
    CMP #$04
    BCS L_00:12DB
    LDY #$04
L_00:1260: ; 00:1260, 0x001260
    LDA OBJ_ENABLED_STATE+MORE?[18],Y
    BEQ L_00:126C
    INY
    CPY #$07
    BCC L_00:1260
    BCS L_00:12DB
L_00:126C: ; 00:126C, 0x00126C
    LDA OBJ_ENABLED_STATE+MORE?[18],X
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    STA 556_OBJ_STATUS_FLAGS_A[18],Y
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y
    LDA OBJ_SECONDARY_SWITCH?[18],X
    STA OBJ_SECONDARY_SWITCH?[18],Y
    LDA OBJ_TERTIARY_SWITCH?[18],X
    STA OBJ_TERTIARY_SWITCH?[18],Y
    JSR INIT_OBJECT[X]_DATA_FULL
    TYA
    TAX
    LDA #$9F
    STA OBJECT_DATA_EXTRA_B?[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDY #$00
    LDA TMP_0C
    BNE L_00:12B1
    LDY #$02
L_00:12B1: ; 00:12B1, 0x0012B1
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y
    AND #$40
    BEQ L_00:12CC
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    ORA #$04
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    ORA #$40
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    LDA #$FD
    BNE L_00:12CE
L_00:12CC: ; 00:12CC, 0x0012CC
    LDA #$02
L_00:12CE: ; 00:12CE, 0x0012CE
    STA OBJ_POS_X_DELTA?[18],X
    LDA #$80
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA #$2C
    JSR SND_BANKED_DISPATCH
L_00:12DB: ; 00:12DB, 0x0012DB
    SEC
    LDA SCRIPT_VAL_UNK[2]
    SBC OBJ_POS_X_SUBPIXEL_DELTA?
    BCS L_00:12EA
    DEC OBJ_POS_X_CONFIRMED[18],X
    BNE L_00:12EA
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:12EA: ; 00:12EA, 0x0012EA
    RTS
STATE_0x9F_SWITCH_C: ; 00:12EB, 0x0012EB
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    CMP #$08
    BCS L_00:12FA
    LDA #$01
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
L_00:12FA: ; 00:12FA, 0x0012FA
    JSR L_00:130B
    JSR OBJECT_X_MOVE?
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    AND #$03
    BEQ L_00:130A
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:130A: ; 00:130A, 0x00130A
    RTS
L_00:130B: ; 00:130B, 0x00130B
    INC OBJ_ANIM_HOLD_TIMER?[18],X
    LDA OBJ_ANIM_HOLD_TIMER?[18],X
    CMP #$04
    BCC L_00:131D
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
L_00:131D: ; 00:131D, 0x00131D
    LDY 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LDA L_00:1331,Y
    STA TMP_00
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    AND #$01
    CLC
    ADC TMP_00
    STA OBJ_ANIMATION_DISPLAY[18],X
    RTS
L_00:1331: ; 00:1331, 0x001331
    .db 7B
    .db 7D
OBJ_STATE_0xA0_HANDLER: ; 00:1333, 0x001333
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:135A
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    AND #$03
    BNE L_00:1350
    LDA #$CD
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$18
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$00
    STA R_**:$05FC
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:1350: ; 00:1350, 0x001350
    JSR OBJECT_X_MOVE?
    JMP TEST_OBJ_UPDATE_FLAG_INIT
L_00:1356: ; 00:1356, 0x001356
    LDY #$02
    BNE L_00:1375
L_00:135A: ; 00:135A, 0x00135A
    LDA R_**:$05FC
    BNE L_00:1350
    LDA TWO_PLAYERS_FLAG
    BEQ L_00:1373
    LDA OBJ_ANIMATION_DISPLAY[18]
    BEQ L_00:1356
    LDA OBJ_ANIMATION_DISPLAY+2
    BEQ L_00:1373
    LDA IRQ/SCRIPT_RUN_COUNT?
    AND #$01
    BNE L_00:1356
L_00:1373: ; 00:1373, 0x001373
    LDY #$00
L_00:1375: ; 00:1375, 0x001375
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL
    CMP #$08
    BCS L_00:13EF
    LDA TMP_12
    BEQ L_00:13EF
    LDA OBJ_POS_X??[18],Y
    CMP #$B0
    BCS L_00:1389
    LDA #$B0
L_00:1389: ; 00:1389, 0x001389
    STA TMP_17
    JSR L_00:13F5
    BCS L_00:13EF
    LDA TMP_17
    SEC
    SBC #$10
    STA OBJ_POS_X??[18],Y
    LDA #$A1
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    SEC
    SBC #$10
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA #$01
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],Y
    JSR L_00:13F5
    BCS L_00:13EF
    LDA TMP_17
    STA OBJ_POS_X??[18],Y
    LDA #$A1
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA #$01
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],Y
    JSR L_00:13F5
    BCS L_00:13EF
    LDA TMP_17
    CLC
    ADC #$10
    STA OBJ_POS_X??[18],Y
    LDA #$A1
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    CLC
    ADC #$10
    STA OBJ_POS_X_CONFIRMED[18],Y
    BCC L_00:13E7
    LDA #$01
    STA 556_OBJ_STATUS_FLAGS_A[18],X
L_00:13E7: ; 00:13E7, 0x0013E7
    LDA #$01
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],Y
    INC R_**:$05FC
L_00:13EF: ; 00:13EF, 0x0013EF
    JSR OBJECT_X_MOVE?
    JMP TEST_OBJ_UPDATE_FLAG_INIT
L_00:13F5: ; 00:13F5, 0x0013F5
    LDY #$07
L_00:13F7: ; 00:13F7, 0x0013F7
    LDA OBJ_ENABLED_STATE+MORE?[18],Y
    BEQ L_00:1402
    INY
    CPY #$12
    BCC L_00:13F7
    RTS
L_00:1402: ; 00:1402, 0x001402
    CLC
    RTS
OBJ_STATE_0xA1_HANDLER: ; 00:1404, 0x001404
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:1423
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE L_00:1420
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$00
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LDA #$16
    JSR SND_BANKED_DISPATCH
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:1420: ; 00:1420, 0x001420
    JMP OBJECT_X_MOVE?
L_00:1423: ; 00:1423, 0x001423
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    LDA OBJ_ANIM_HOLD_TIMER?[18],X
    CMP #$04
    BCC L_00:1461
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    CMP #$0A
    BCC L_00:1461
    LDA OBJ_POS_X_CONFIRMED[18],X
    CLC
    ADC #$10
    STA OBJ_POS_X_CONFIRMED[18],X
    BCS L_00:145E
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    CMP #$02
    BCC L_00:147B
    LDA #$00
    STA R_**:$05FC
L_00:145E: ; 00:145E, 0x00145E
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:1461: ; 00:1461, 0x001461
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    ASL A
    TAY
    LDA L_00:1483,Y
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA L_00:1484,Y
    STA OBJECT_DATA_EXTRA_B?[18],X
    INC OBJ_ANIM_HOLD_TIMER?[18],X
L_00:1475: ; 00:1475, 0x001475
    JSR OBJECT_X_MOVE?
    JMP TEST_OBJ_UPDATE_FLAG_INIT
L_00:147B: ; 00:147B, 0x00147B
    LDA #$16
    JSR SND_BANKED_DISPATCH
    JMP L_00:1475
L_00:1483: ; 00:1483, 0x001483
    .db 83
L_00:1484: ; 00:1484, 0x001484
    .db B2
    .db 82
    .db B3
    .db 81
    .db B4
    .db 80
    .db B5
    .db 7F
    .db B6
    .db 80
    .db B5
    .db 81
    .db B4
    .db 82
    .db B3
    .db 83
    .db B2
    .db 00
    .db 00
OBJ_STATE_0xBD_HANDLER: ; 00:1497, 0x001497
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0xBD_SWITCH_A)
    HIGH(STATE_0xBD_SWITCH_A)
    LOW(STATE_0xBD_SWITCH_B)
    HIGH(STATE_0xBD_SWITCH_B)
    LOW(STATE_0xBD_SWITCH_C)
    HIGH(STATE_0xBD_SWITCH_C)
STATE_0xBD_SWITCH_A: ; 00:14A3, 0x0014A3
    LDA #$28
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$29
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$00
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    BNE L_00:14D8
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:1508
    LDA #$BC
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA #$40
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],Y
    LDA #$30
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
L_00:14D8: ; 00:14D8, 0x0014D8
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:1508
    LDA #$BC
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    CLC
    ADC #$40
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],Y
    LDA #$10
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y
    LDA #$01
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    LDA #$38
    JSR SND_BANKED_DISPATCH
    INC OBJ_SECONDARY_SWITCH?[18],X
L_00:1508: ; 00:1508, 0x001508
    JMP OBJECT_X_MOVE?
STATE_0xBD_SWITCH_B: ; 00:150B, 0x00150B
    LDY LEVEL_8_CUTSCENE_IN_PROGRESS_FLAG
    LDA L_00:1534,Y
    TAY
    TXA
    PHA
    TYA
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:1531
    INC BG_UPDATING_INDEX
    INC LEVEL_8_CUTSCENE_IN_PROGRESS_FLAG
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BPL L_00:1529
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:1529: ; 00:1529, 0x001529
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$10
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
L_00:1531: ; 00:1531, 0x001531
    JMP OBJECT_X_MOVE?
L_00:1534: ; 00:1534, 0x001534
    .db 58
    .db 57
    .db 5A
    .db 59
    .db 5C
    .db 5B
STATE_0xBD_SWITCH_C: ; 00:153A, 0x00153A
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    BNE L_00:1547
    DEC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$38
    JSR SND_BANKED_DISPATCH
L_00:1547: ; 00:1547, 0x001547
    JMP OBJECT_X_MOVE?
OBJ_STATE_0xBE_HANDLER: ; 00:154A, 0x00154A
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:157F
    JSR RTN_GET_OBJ_PAIR_IN_Y_RET_CC_SUCCESS
    BCS L_00:157C
    LDA #$02
    STA OBJ_ENABLED_STATE+MORE?[18],Y
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],Y
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED[18],Y
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],Y
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$34
    LDY OBJ_ENABLED_STATE+MORE?[18],X
    CPY #$BE
    BEQ L_00:1579
    LDA #$36
L_00:1579: ; 00:1579, 0x001579
    JSR SND_BANKED_DISPATCH
L_00:157C: ; 00:157C, 0x00157C
    JMP OBJECT_X_MOVE?
L_00:157F: ; 00:157F, 0x00157F
    LDY DB_BG_INDEX_UNK
    LDA L_00:1599,Y
    TAY
    TXA
    PHA
    TYA
    JSR BACKGROUND_UPDATING_INTERFACE
    PLA
    TAX
    LDA BG_UPDATING_FLAG_UNK
    BNE L_00:1596
    INC DB_BG_INDEX_UNK
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:1596: ; 00:1596, 0x001596
    JMP OBJECT_X_MOVE?
L_00:1599: ; 00:1599, 0x001599
    .db 53
    .db 54
    .db 55
    .db 56
    .db 51
    .db 52
OBJ_STATE_0x8C_HANDLER: ; 00:159F, 0x00159F
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE SECONDARY_NONZERO ; Nonzero, goto.
    LDA #$57
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDY #$0D
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Palette.
    LDA #$00
    STA 4C6_OBJ_UNK[18],X ; Clear attrs.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    JSR MOVE_Y_FINALIZE ; Do.
    LDA ROM_VAL_A
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set delta with ROM vals.
    LDA ROM_VAL_B
    STA OBJ_POS_X_DELTA?[18],X
    LDA #$48
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim disp.
    LDA #$0A
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set extra.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary 2x.
    INC OBJ_SECONDARY_SWITCH?[18],X
    RTS ; Leave.
ROM_VAL_A: ; 00:15D5, 0x0015D5
    .db 80
ROM_VAL_B: ; 00:15D6, 0x0015D6
    .db FE
SECONDARY_NONZERO: ; 00:15D7, 0x0015D7
    JSR X_MOVE_RET_CS_UNDERFLOW_CC_OKAY ; Do.
    BCC RET_OKAY ; Okay, goto.
    DEC 556_OBJ_STATUS_FLAGS_A[18],X ; --
    BMI EXIT_DIE ; If negative, die.
RET_OKAY: ; 00:15E1, 0x0015E1
    JSR XPOS_MOD_DELTA_RET_CS_WRAPAROUND ; Do.
    BCC NO_WRAP ; Okay, goto.
    DEC 556_OBJ_STATUS_FLAGS_A[18],X ; --
    BMI EXIT_DIE ; Negative, die.
NO_WRAP: ; 00:15EB, 0x0015EB
    LDA OBJECT_DATA_EXTRA_B?[18],X ; Load.
    BEQ RTS ; == 0, goto.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    BNE RTS ; Set, goto.
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    LSR A ; >> 1, /2.
    BCS RET_ODD ; CS, goto.
RTS: ; 00:15FB, 0x0015FB
    RTS ; Leave.
RET_ODD: ; 00:15FC, 0x0015FC
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$49
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$7D
    JSR SND_BANKED_DISPATCH ; Play sound.
    RTS ; Leave.
EXIT_DIE: ; 00:160C, 0x00160C
    JMP INIT_OBJECT[X]_DATA_FULL ; Exit with init. The usual.
OBJ_STATE_0x96_HANDLER: ; 00:160F, 0x00160F
    LDA OBJ_SECONDARY_SWITCH?[18],X
    BNE L_00:1617
    JMP L_00:164A
L_00:1617: ; 00:1617, 0x001617
    JSR X_MOVE_RET_CS_UNDERFLOW_CC_OKAY
    BCC L_00:1624
    DEC 556_OBJ_STATUS_FLAGS_A[18],X
    BPL L_00:1624
    JMP L_00:16A5
L_00:1624: ; 00:1624, 0x001624
    LDA OBJ_SECONDARY_SWITCH?[18],X
    CMP #$01
    BEQ L_00:166A
    CMP #$04
    BNE L_00:1630
    RTS
L_00:1630: ; 00:1630, 0x001630
    LDA OBJ_TERTIARY_SWITCH?[18],X
    ASL A
    TAY
    LDA L_00:1642,Y
    STA TMP_00
    LDA L_00:1643,Y
    STA TMP_01
    JMP [TMP_00]
L_00:1642: ; 00:1642, 0x001642
    .db CE
L_00:1643: ; 00:1643, 0x001643
    .db 96
    .db 5C
    .db 97
    .db 6F
    .db 97
    .db 8C
    .db 97
L_00:164A: ; 00:164A, 0x00164A
    LDY #$08
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$97
    STA OBJ_ENABLED_STATE+MORE?+1,X
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?+1,X
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?+1,X
    LDA #$56
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$2D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    RTS
L_00:166A: ; 00:166A, 0x00166A
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    BNE 00:169C
    LDA OBJ_POS_X_CONFIRMED[18],X
    CMP #$40
    BCC L_00:16A5
    LDY #$00
    SEC
    LDA OBJ_POS_X_CONFIRMED[18],X
    SBC OBJ_POS_X_CONFIRMED[18],Y
    CMP #$10
    BCC 00:1687
    CMP #$30
    BCC 00:16AE
    LDA TWO_PLAYERS_FLAG
    BEQ 00:169C
    LDY #$02
    SEC
    LDA OBJ_POS_X_CONFIRMED[18],X
    SBC OBJ_POS_X_CONFIRMED[18],Y
    CMP #$10
    BCC 00:169C
    CMP #$40
    BCC 00:16AE
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X
    STA OBJ_ANIMATION_DISPLAY[18],X
    RTS
L_00:16A5: ; 00:16A5, 0x0016A5
    JSR INIT_OBJECT[X]_DATA_FULL
    INX
    JSR INIT_OBJECT[X]_DATA_FULL
    DEX
    RTS
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    STA 4C6_OBJ_UNK[18],X
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    LDA #$05
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    LDA OBJ_POS_X??[18],Y
    STA OBJ_POS_X??[18],X
    STA OBJ_POS_Y_CONFIRMED[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    RTS
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    BNE 00:1711
    LDA #$05
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    CMP #$05
    BNE 00:1711
    LDA #$1F
    JSR SND_BANKED_DISPATCH
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X
    STA OBJ_TERTIARY_SWITCH?+1,X
    LDA #$28
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    STA 59E_OBJ_UNK/EXTRA_TIMER+1,X
    LDA #$00
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?+1,X
    LDA OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_CONFIRMED+1,X
    LDA OBJ_POS_X??[18],X
    STA OBJ_POS_X??+1,X
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED+1,X
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    ASL A
    TAY
    LDA 00:1750,Y
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA 00:1751,Y
    STA OBJECT_DATA_EXTRA_B?[18],X
    BEQ 00:172A
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    LSR A
    BCS 00:172B
    RTS
    LDA #$04
    STA OBJ_SECONDARY_SWITCH?[18],X
    LDA #$39
    STA OBJ_ANIMATION_DISPLAY[18],X
    INX
    LDA #$98
    JSR 1F:169F
    LDA OBJ_POS_Y_CONFIRMED+17,X
    STA OBJ_POS_X_CONFIRMED[18],X
    SEC
    LDA OBJ_POS_X_SUBPIXEL?+17,X
    SBC #$10
    STA OBJ_POS_Y_CONFIRMED[18],X
    DEX
    LDA #$21
    JMP SND_BANKED_DISPATCH
    .db 33
    .db 00
    .db 34
    .db 00
    .db 35
    .db 00
    .db 36
    .db 0B
    .db 37
    .db 0B
    .db 37
    .db 0B
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BNE 00:1711
    INC OBJ_TERTIARY_SWITCH?[18],X
    LDA #$05
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA #$04
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    RTS
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    BNE 00:1711
    LDA #$04
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    DEC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    BPL 00:1711
    LDA #$00
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$23
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
    RTS
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    BNE 00:179B
    LDA #$01
    STA OBJ_SECONDARY_SWITCH?[18],X
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
    RTS
OBJ_STATE_0x97_HANDLER: ; 00:179C, 0x00179C
    LDA OBJ_TERTIARY_SWITCH?[18],X
    BEQ L_00:17CE
    JSR X_MOVE_RET_CS_UNDERFLOW_CC_OKAY
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X
    BEQ L_00:17C3
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    LSR A
    LDA #$00
    BCS L_00:17B3
    LDA #$38
L_00:17B3: ; 00:17B3, 0x0017B3
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$A3
    STA OBJECT_DATA_EXTRA_B?[18],X
    JMP OBJ_RTN_UNK_RET_VAL_UNK
L_00:17C3: ; 00:17C3, 0x0017C3
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
    STA OBJECT_DATA_EXTRA_B?[18],X
    STA OBJ_ANIMATION_DISPLAY[18],X
L_00:17CE: ; 00:17CE, 0x0017CE
    RTS
OBJ_STATE_0x8B_HANDLER: ; 00:17CF, 0x0017CF
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    BNE SECONDARY_NONZERO ; Nonzero, goto.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary 2x.
    INC OBJ_SECONDARY_SWITCH?[18],X
    LDA #$00 ; Seed val.
    LDY LEVEL/SCREEN_ON ; Load level.
    CPY #$02 ; If _ #$02, goto.
    BNE LEVEL_NOT_STREETS ; !=, goto, streets check.
    LDA #$A0 ; Alt val.
LEVEL_NOT_STREETS: ; 00:17E4, 0x0017E4
    STA 4C6_OBJ_UNK[18],X ; Store val.
    JSR MOVE_Y_FINALIZE ; Move.
    LDA #$46
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    RTS ; Leave.
SECONDARY_NONZERO: ; 00:17F0, 0x0017F0
    JSR X_MOVE_RET_CS_UNDERFLOW_CC_OKAY ; Move.
    BCC MOVED_OKAY ; Ret CC, goto.
    DEC 556_OBJ_STATUS_FLAGS_A[18],X ; --
    BMI EXIT_DIE ; If negativ, die.
MOVED_OKAY: ; 00:17FA, 0x0017FA
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    BNE RTS ; If set, leave.
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$A1
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set extra.
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    LSR A ; >> 1
    BCS EXIT_DIE ; CS, die.
RTS: ; 00:180F, 0x00180F
    RTS ; Leave.
EXIT_DIE: ; 00:1810, 0x001810
    JMP INIT_OBJECT[X]_DATA_FULL
OBJ_STATE_0x92_HANDLER: ; 00:1813, 0x001813
    STX OBJ_HANDLER_FOCUS_SCRATCHPAD
    LDA #$08
    STA OBJECT_DATA_EXTRA_B?[18],X
    JSR MULTISWITCH_RTN
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    BNE L_00:1834
    LDA OBJECT_DATA_EXTRA_B?[18],X
    BEQ L_00:1834
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LSR A
    BCS L_00:1834
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    LSR A
    BCS L_00:1837
L_00:1834: ; 00:1834, 0x001834
    JMP L_00:1A8C
L_00:1837: ; 00:1837, 0x001837
    JMP L_00:1A68
MULTISWITCH_RTN: ; 00:183A, 0x00183A
    LDA OBJ_SECONDARY_SWITCH?[18],X
    ASL A
    TAY
    LDA TABLE_DATA_L,Y
    STA TMP_00
    LDA TABLE_DATA_H,Y
    STA TMP_01
    LDA OBJ_TERTIARY_SWITCH?[18],X
    ASL A
    TAY
    LDA [TMP_00],Y
    STA TMP_02
    INY
    LDA [TMP_00],Y
    STA TMP_03
    JMP [TMP_02]
TABLE_DATA_L: ; 00:185A, 0x00185A
    LOW(TABLE_A)
TABLE_DATA_H: ; 00:185B, 0x00185B
    HIGH(TABLE_A)
    LOW(TABLE_B)
    HIGH(TABLE_B)
    LOW(TABLE_C)
    HIGH(TABLE_C)
TABLE_A: ; 00:1860, 0x001860
    LOW(RTN_A)
    HIGH(RTN_A)
TABLE_B: ; 00:1862, 0x001862
    LOW(RTN_A)
    HIGH(RTN_A)
TABLE_C: ; 00:1864, 0x001864
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
RTN_A: ; 00:1868, 0x001868
    LDY #$08
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ
    LDA #$00
    STA 4C6_OBJ_UNK[18],X
    JSR MOVE_Y_FINALIZE
    LDA #$0A
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LSR A
    LDA #$00
    BCC 00:1889
    ORA #$40
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    LDA #$00
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    LDA #$FF
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    AND #$02
    LSR A
    TAY
    LDA 00:18D6,Y
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    AND #$02
    ASL A
    TAY
    LDA 00:18D8,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA 00:18D9,Y
    STA OBJ_POS_X_DELTA?[18],X
    LDA 00:18DA,Y
    STA 520_OBJ_POS_X_LARGE?[18],X
    LDA 00:18DB,Y
    STA 503_OBJ_POS_X_LARGEST?[18],X
    LDA #$55
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$2D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$2E
    STA OBJ_ANIMATION_DISPLAY[18],X
    INC OBJ_SECONDARY_SWITCH?[18],X
    RTS
    .db 00
    .db 08
    .db 00
    .db FF
    .db 45
    .db FE
    .db 80
    .db FE
    .db 66
    .db FD
RTN_A: ; 00:18E0, 0x0018E0
    INC OBJ_SECONDARY_SWITCH?[18],X
    RTS
RTN_A: ; 00:18E4, 0x0018E4
    JSR X_MOVE_RET_CS_UNDERFLOW_CC_OKAY
    BCC 00:18EE
    DEC 556_OBJ_STATUS_FLAGS_A[18],X
    BMI 00:1937
    JSR XPOS_MOD_DELTA_RET_CS_WRAPAROUND
    BCC 00:1905
    LDA #$01
    LDY OBJ_POS_X_DELTA?[18],X
    BPL 00:18FC
    LDA #$FF
    CLC
    ADC 556_OBJ_STATUS_FLAGS_A[18],X
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    BMI 00:1937
    JSR MOVE_UNK_RET_??
    LDA OBJ_POS_X??[18],X
    LDY 503_OBJ_POS_X_LARGEST?[18],X
    BPL 00:191D
    CMP #$9C
    BCS 00:1927
    JSR 00:1950
    JSR 00:1962
    JMP 00:1927
    CMP #$E8
    BCC 00:1927
    JSR 00:1950
    JSR 00:1962
    JSR MOVE_Y_FINALIZE
    LDA RANDOM_VALS?[2]
    AND #$0F
    CMP STATUS_FLAGS_B/OBJ_FOCUS[18],X
    BNE 00:1936
    JSR 00:197B
    RTS
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:193A: ; 00:193A, 0x00193A
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X
    RTS
RTN_B: ; 00:1940, 0x001940
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X
    JSR X_MOVE_RET_CS_UNDERFLOW_CC_OKAY
    BCC 00:194F
    DEC 556_OBJ_STATUS_FLAGS_A[18],X
    BMI 00:1937
    RTS
    SEC
    LDA #$00
    SBC OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA #$00
    SBC OBJ_POS_X_DELTA?[18],X
    STA OBJ_POS_X_DELTA?[18],X
    RTS
    SEC
    LDA #$00
    SBC 520_OBJ_POS_X_LARGE?[18],X
    STA 520_OBJ_POS_X_LARGE?[18],X
    LDA #$00
    SBC 503_OBJ_POS_X_LARGEST?[18],X
    STA 503_OBJ_POS_X_LARGEST?[18],X
    RTS
    JSR INIT_OBJECT[X]_DATA_FULL
    LDX OBJ_HANDLER_FOCUS_SCRATCHPAD
    RTS
    JSR 00:1A18
    CMP #$04
    BCS 00:1977
    JSR 00:1ABF
    BCC 00:1977
    LDY OBJ_HANDLER_FOCUS_SCRATCHPAD
    LDA 556_OBJ_STATUS_FLAGS_A[18],Y
    CMP #$02
    BEQ 00:1977
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y
    AND #$40
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],Y
    LSR A
    BCS 00:19B4
    LDA #$F0
    CLC
    ADC OBJ_POS_X_CONFIRMED[18],Y
    STA OBJ_POS_X_CONFIRMED[18],X
    BCS 00:19C4
    DEC 556_OBJ_STATUS_FLAGS_A[18],X
    BMI 00:1974
    BPL 00:19C4
    LDA #$10
    CLC
    ADC OBJ_POS_X_CONFIRMED[18],Y
    STA OBJ_POS_X_CONFIRMED[18],X
    BCC 00:19C4
    DEC 556_OBJ_STATUS_FLAGS_A[18],X
    BMI 00:1974
    LDA OBJ_POS_X??[18],Y
    STA OBJ_POS_X??[18],X
    LDA #$E8
    STA 4C6_OBJ_UNK[18],X
    JSR MOVE_Y_FINALIZE
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],Y
    AND #$01
    ASL A
    TAY
    LDA 00:1A14,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA 00:1A15,Y
    STA OBJ_POS_X_DELTA?[18],X
    BMI 00:19EC
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    BNE 00:1974
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X
    LDA #$A0
    STA OBJECT_DATA_EXTRA_B?[18],X
    LDA #$95
    STA OBJ_ENABLED_STATE+MORE?[18],X
    LDA #$32
    STA OBJ_ANIMATION_DISPLAY[18],X
    INC 706_UNK
    LDA 706_UNK
    AND #$03
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    LDA #$14
    JSR SND_BANKED_DISPATCH
    LDX OBJ_HANDLER_FOCUS_SCRATCHPAD
    RTS
    .db 00
    .db FB
    .db 00
    .db 05
    .db A9
    .db 00
    STA TMP_00
    LDY #$07
    LDA OBJ_ENABLED_STATE+MORE?[18],Y
    CMP #$95
    BNE 00:1A27
    INC TMP_00
    INY
    CPY #$12
    BCC 00:1A1E
    LDA TMP_00
    RTS
OBJ_STATE_0x95_HANDLER: ; 00:1A2F, 0x001A2F
    JSR X_MOVE_RET_CS_UNDERFLOW_CC_OKAY
    BCC L_00:1A39
    DEC 556_OBJ_STATUS_FLAGS_A[18],X
    BMI L_00:1A65
L_00:1A39: ; 00:1A39, 0x001A39
    JSR XPOS_MOD_DELTA_RET_CS_WRAPAROUND
    BCC L_00:1A43
    DEC 556_OBJ_STATUS_FLAGS_A[18],X
    BMI L_00:1A65
L_00:1A43: ; 00:1A43, 0x001A43
    LDA 556_OBJ_STATUS_FLAGS_A[18],X
    BNE L_00:1A64
    LDA OBJECT_DATA_EXTRA_B?[18],X
    BEQ L_00:1A64
    LDA RANDOM_VALS?[2]
    AND #$0F
    BEQ L_00:1A64
    CMP #$08
    BEQ L_00:1A64
    AND #$03
    CMP 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    BNE L_00:1A64
    JSR OBJ_RTN_UNK_RET_VAL_UNK
    LSR A
    BCS L_00:1A65
L_00:1A64: ; 00:1A64, 0x001A64
    RTS
L_00:1A65: ; 00:1A65, 0x001A65
    JMP INIT_OBJECT[X]_DATA_FULL
L_00:1A68: ; 00:1A68, 0x001A68
    LDA OBJECT_DATA_HEALTH?[18],X
    BNE L_00:1A7A
    LDA #$91
    STA OBJ_ANIMATION_DISPLAY[18],X
    JSR L_00:193A
    LDA #$4B
    JMP SND_BANKED_DISPATCH
L_00:1A7A: ; 00:1A7A, 0x001A7A
    JSR L_00:1A82
    LDA #$2C
    JMP SND_BANKED_DISPATCH
L_00:1A82: ; 00:1A82, 0x001A82
    LDA #$01
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA #$1C
    STA OBJ_ANIM_HOLD_TIMER?[18],X
L_00:1A8C: ; 00:1A8C, 0x001A8C
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    BEQ L_00:1AAC
    DEC OBJ_ANIM_HOLD_TIMER?[18],X
    BEQ L_00:1AAD
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    AND #$FC
    STA TMP_00
    LDA RANDOM_VALS?[2]
    LSR A
    LSR A
    AND #$03
    TAY
    LDA L_00:1ABB,Y
    ORA TMP_00
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
L_00:1AAC: ; 00:1AAC, 0x001AAC
    RTS
L_00:1AAD: ; 00:1AAD, 0x001AAD
    LDA #$00
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    AND #$FC
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    RTS
L_00:1ABB: ; 00:1ABB, 0x001ABB
    ???
    ORA [TMP_03,X]
    ???
    LDX #$07
L_00:1AC1: ; 00:1AC1, 0x001AC1
    LDA OBJ_ENABLED_STATE+MORE?[18],X
    BEQ L_00:1ACD
    INX
    CPX #$12
    BCC L_00:1AC1
    CLC
    RTS
L_00:1ACD: ; 00:1ACD, 0x001ACD
    SEC
    RTS
SPRITE_BANK_0_DATA_PTRS_A1_L: ; 00:1ACF, 0x001ACF
    LOW(00:1F90)
SPRITE_BANK_0_DATA_PTRS_A1_H: ; 00:1AD0, 0x001AD0
    HIGH(00:1F90)
    LOW(00:1FAD)
    HIGH(00:1FAD)
    LOW(00:1FC6)
    HIGH(00:1FC6)
    LOW(00:1FE3)
    HIGH(00:1FE3)
    LOW(01:0000)
    HIGH(01:0000)
    LOW(01:0015)
    HIGH(01:0015)
    LOW(01:002A)
    HIGH(01:002A)
    LOW(01:003F)
    HIGH(01:003F)
    LOW(01:0054)
    HIGH(01:0054)
    LOW(01:0075)
    HIGH(01:0075)
    LOW(01:009E)
    HIGH(01:009E)
    LOW(01:00AB)
    HIGH(01:00AB)
    LOW(01:00B8)
    HIGH(01:00B8)
    LOW(01:00D9)
    HIGH(01:00D9)
    LOW(01:00F6)
    HIGH(01:00F6)
    LOW(01:011F)
    HIGH(01:011F)
    LOW(01:0140)
    HIGH(01:0140)
    LOW(01:0165)
    HIGH(01:0165)
    LOW(01:018A)
    HIGH(01:018A)
    LOW(01:01AF)
    HIGH(01:01AF)
    LOW(01:01CC)
    HIGH(01:01CC)
    LOW(01:01D5)
    HIGH(01:01D5)
    LOW(01:01FE)
    HIGH(01:01FE)
    LOW(01:0227)
    HIGH(01:0227)
    LOW(01:024C)
    HIGH(01:024C)
    LOW(01:026D)
    HIGH(01:026D)
    LOW(01:0296)
    HIGH(01:0296)
    LOW(01:02BF)
    HIGH(01:02BF)
    LOW(01:02C8)
    HIGH(01:02C8)
    LOW(01:02E5)
    HIGH(01:02E5)
    LOW(01:030A)
    HIGH(01:030A)
    LOW(01:032B)
    HIGH(01:032B)
    LOW(01:034C)
    HIGH(01:034C)
    LOW(01:036D)
    HIGH(01:036D)
    LOW(01:038E)
    HIGH(01:038E)
    LOW(01:03AB)
    HIGH(01:03AB)
    LOW(01:03B4)
    HIGH(01:03B4)
    LOW(01:03DD)
    HIGH(01:03DD)
    LOW(01:0402)
    HIGH(01:0402)
    LOW(01:0427)
    HIGH(01:0427)
    LOW(01:044C)
    HIGH(01:044C)
    LOW(01:0475)
    HIGH(01:0475)
    LOW(01:049E)
    HIGH(01:049E)
    LOW(01:04C7)
    HIGH(01:04C7)
    LOW(01:04E8)
    HIGH(01:04E8)
    LOW(01:050D)
    HIGH(01:050D)
    LOW(01:0532)
    HIGH(01:0532)
    LOW(01:0557)
    HIGH(01:0557)
    LOW(01:0574)
    HIGH(01:0574)
    LOW(01:057D)
    HIGH(01:057D)
    LOW(01:05A6)
    HIGH(01:05A6)
    LOW(01:05CF)
    HIGH(01:05CF)
    LOW(01:05F8)
    HIGH(01:05F8)
    LOW(01:0621)
    HIGH(01:0621)
    LOW(01:064A)
    HIGH(01:064A)
    LOW(01:066F)
    HIGH(01:066F)
    LOW(01:0698)
    HIGH(01:0698)
    LOW(01:06B9)
    HIGH(01:06B9)
    LOW(01:06DE)
    HIGH(01:06DE)
    LOW(01:0703)
    HIGH(01:0703)
    LOW(01:0728)
    HIGH(01:0728)
    LOW(01:0745)
    HIGH(01:0745)
    LOW(01:074E)
    HIGH(01:074E)
    LOW(01:0777)
    HIGH(01:0777)
    LOW(01:0798)
    HIGH(01:0798)
    LOW(01:07BD)
    HIGH(01:07BD)
    LOW(01:07E6)
    HIGH(01:07E6)
    LOW(01:080F)
    HIGH(01:080F)
    LOW(01:0838)
    HIGH(01:0838)
    LOW(01:085D)
    HIGH(01:085D)
    LOW(01:0882)
    HIGH(01:0882)
    LOW(01:08AB)
    HIGH(01:08AB)
    LOW(01:08D4)
    HIGH(01:08D4)
    LOW(01:08FD)
    HIGH(01:08FD)
    LOW(01:0926)
    HIGH(01:0926)
    LOW(01:0937)
    HIGH(01:0937)
    LOW(01:0948)
    HIGH(01:0948)
    LOW(01:0969)
    HIGH(01:0969)
    LOW(01:098A)
    HIGH(01:098A)
    LOW(01:09AB)
    HIGH(01:09AB)
    LOW(01:09CC)
    HIGH(01:09CC)
    LOW(01:09D5)
    HIGH(01:09D5)
    LOW(01:09DE)
    HIGH(01:09DE)
    LOW(01:09FF)
    HIGH(01:09FF)
    LOW(01:0A1C)
    HIGH(01:0A1C)
    LOW(01:0A21)
    HIGH(01:0A21)
    LOW(01:0A52)
    HIGH(01:0A52)
    LOW(01:0A5F)
    HIGH(01:0A5F)
    LOW(01:0A78)
    HIGH(01:0A78)
    LOW(01:0A81)
    HIGH(01:0A81)
    LOW(01:0AAA)
    HIGH(01:0AAA)
    LOW(01:0AD3)
    HIGH(01:0AD3)
    LOW(01:0AFC)
    HIGH(01:0AFC)
    LOW(01:0B21)
    HIGH(01:0B21)
    LOW(01:0B4A)
    HIGH(01:0B4A)
    LOW(01:0B73)
    HIGH(01:0B73)
    LOW(01:0B84)
    HIGH(01:0B84)
    LOW(01:0B99)
    HIGH(01:0B99)
    LOW(01:0BBE)
    HIGH(01:0BBE)
    LOW(01:0BE3)
    HIGH(01:0BE3)
    LOW(01:0C08)
    HIGH(01:0C08)
    LOW(01:0C31)
    HIGH(01:0C31)
    LOW(01:0C5A)
    HIGH(01:0C5A)
    LOW(01:0C7B)
    HIGH(01:0C7B)
    LOW(01:0CA0)
    HIGH(01:0CA0)
    LOW(00:1CDC)
    HIGH(00:1CDC)
    LOW(00:1CF5)
    HIGH(00:1CF5)
    LOW(00:1D0E)
    HIGH(00:1D0E)
    LOW(00:1D2F)
    HIGH(00:1D2F)
    LOW(00:1D4C)
    HIGH(00:1D4C)
    LOW(00:1D7D)
    HIGH(00:1D7D)
    LOW(00:1D9E)
    HIGH(00:1D9E)
    LOW(00:1DBF)
    HIGH(00:1DBF)
    LOW(00:1E08)
    HIGH(00:1E08)
    LOW(00:1E69)
    HIGH(00:1E69)
    LOW(01:0CC9)
    HIGH(01:0CC9)
    LOW(01:0CD2)
    HIGH(01:0CD2)
    LOW(01:0CDB)
    HIGH(01:0CDB)
    LOW(01:0D04)
    HIGH(01:0D04)
    LOW(01:0D25)
    HIGH(01:0D25)
    LOW(01:0D4A)
    HIGH(01:0D4A)
    LOW(01:0D6F)
    HIGH(01:0D6F)
    LOW(01:0D94)
    HIGH(01:0D94)
    LOW(01:0DB5)
    HIGH(01:0DB5)
    LOW(01:0DD6)
    HIGH(01:0DD6)
    LOW(01:0DF7)
    HIGH(01:0DF7)
    LOW(01:0E20)
    HIGH(01:0E20)
SPRITE_BANK_0_DATA_PTRS_A2_L: ; 00:1BCD, 0x001BCD
    LOW(01:0E41)
SPRITE_BANK_0_DATA_PTRS_A2_H: ; 00:1BCE, 0x001BCE
    HIGH(01:0E41)
    LOW(01:0E66)
    HIGH(01:0E66)
    LOW(01:0E8B)
    HIGH(01:0E8B)
    LOW(01:0EB4)
    HIGH(01:0EB4)
    LOW(01:0ED5)
    HIGH(01:0ED5)
    LOW(01:0EFA)
    HIGH(01:0EFA)
    LOW(01:0F1F)
    HIGH(01:0F1F)
    LOW(00:1E8A)
    HIGH(00:1E8A)
    LOW(00:1EAB)
    HIGH(00:1EAB)
    LOW(00:1ECC)
    HIGH(00:1ECC)
    LOW(01:0F3C)
    HIGH(01:0F3C)
    LOW(01:0F59)
    HIGH(01:0F59)
    LOW(01:0F76)
    HIGH(01:0F76)
    LOW(01:0F8F)
    HIGH(01:0F8F)
    LOW(01:0FAC)
    HIGH(01:0FAC)
    LOW(01:0FC9)
    HIGH(01:0FC9)
    LOW(01:0FE6)
    HIGH(01:0FE6)
    LOW(01:1007)
    HIGH(01:1007)
    LOW(01:1028)
    HIGH(01:1028)
    LOW(00:1EED)
    HIGH(00:1EED)
    LOW(00:1F0A)
    HIGH(00:1F0A)
    LOW(00:1F27)
    HIGH(00:1F27)
    LOW(00:1F44)
    HIGH(00:1F44)
    LOW(00:1F61)
    HIGH(00:1F61)
    LOW(00:1F7E)
    HIGH(00:1F7E)
    LOW(00:1F8B)
    HIGH(00:1F8B)
    LOW(01:1035)
    HIGH(01:1035)
    LOW(01:105E)
    HIGH(01:105E)
    LOW(01:1087)
    HIGH(01:1087)
    LOW(01:10B0)
    HIGH(01:10B0)
    LOW(01:10D5)
    HIGH(01:10D5)
    LOW(01:10FA)
    HIGH(01:10FA)
    LOW(01:111F)
    HIGH(01:111F)
    LOW(01:1140)
    HIGH(01:1140)
    LOW(01:1161)
    HIGH(01:1161)
    LOW(01:118A)
    HIGH(01:118A)
    LOW(01:11AF)
    HIGH(01:11AF)
    LOW(01:11D4)
    HIGH(01:11D4)
    LOW(01:11FD)
    HIGH(01:11FD)
    LOW(01:1222)
    HIGH(01:1222)
    LOW(01:1247)
    HIGH(01:1247)
    LOW(01:125C)
    HIGH(01:125C)
    LOW(01:1265)
    HIGH(01:1265)
    LOW(01:127A)
    HIGH(01:127A)
    LOW(01:1293)
    HIGH(01:1293)
    LOW(01:12AC)
    HIGH(01:12AC)
    LOW(01:12C9)
    HIGH(01:12C9)
    LOW(01:12E6)
    HIGH(01:12E6)
    LOW(01:1307)
    HIGH(01:1307)
    LOW(01:1320)
    HIGH(01:1320)
    LOW(01:1339)
    HIGH(01:1339)
    LOW(01:1356)
    HIGH(01:1356)
    LOW(01:1373)
    HIGH(01:1373)
    LOW(01:1390)
    HIGH(01:1390)
    LOW(01:13AD)
    HIGH(01:13AD)
    LOW(01:13C2)
    HIGH(01:13C2)
    LOW(01:13DF)
    HIGH(01:13DF)
    LOW(00:1C70)
    HIGH(00:1C70)
    LOW(00:1C79)
    HIGH(00:1C79)
    LOW(00:1C86)
    HIGH(00:1C86)
    LOW(00:1C93)
    HIGH(00:1C93)
    LOW(00:1CA0)
    HIGH(00:1CA0)
    LOW(00:1CB9)
    HIGH(00:1CB9)
    LOW(01:13FC)
    HIGH(01:13FC)
    LOW(00:1CC6)
    HIGH(00:1CC6)
    LOW(00:1CD3)
    HIGH(00:1CD3)
    LOW(01:1411)
    HIGH(01:1411)
    LOW(01:142E)
    HIGH(01:142E)
    LOW(01:144B)
    HIGH(01:144B)
    LOW(01:1464)
    HIGH(01:1464)
    LOW(01:147D)
    HIGH(01:147D)
    LOW(01:149A)
    HIGH(01:149A)
    LOW(01:14B7)
    HIGH(01:14B7)
    LOW(01:14D4)
    HIGH(01:14D4)
    LOW(00:1C63)
    HIGH(00:1C63)
    .db 03
    .db F0
    .db 31
    .db 00
    .db F4
    .db F0
    .db 33
    .db 00
    .db FC
    .db F0
    .db 35
    .db 00
    .db 04
    .db 02
    .db 10
    .db 1B
    .db 00
    .db 11
    .db 10
    .db 1D
    .db 00
    .db 19
    .db 03
    .db 10
    .db 1F
    .db 00
    .db 08
    .db 10
    .db 21
    .db 00
    .db 10
    .db 10
    .db 23
    .db 00
    .db 18
    .db 03
    .db 10
    .db 25
    .db 00
    .db 18
    .db 10
    .db 27
    .db 00
    .db 20
    .db 10
    .db 29
    .db 00
    .db 28
    .db 03
    .db 10
    .db 2B
    .db 00
    .db 0E
    .db 10
    .db 2D
    .db 00
    .db 16
    .db 10
    .db 2F
    .db 00
    .db 1E
    .db 06
    .db 00
    .db 35
    .db 00
    .db 08
    .db 10
    .db 31
    .db 00
    .db 00
    .db 10
    .db 33
    .db 00
    .db 08
    .db 08
    .db 37
    .db 00
    .db 10
    .db 08
    .db 39
    .db 00
    .db 18
    .db 08
    .db 3B
    .db 00
    .db 20
    .db 03
    .db 00
    .db CD
    .db 01
    .db F0
    .db 00
    .db CF
    .db 01
    .db F8
    .db 00
    .db DD
    .db 01
    .db 00
    .db 03
    .db 00
    .db DF
    .db 02
    .db F0
    .db 00
    .db ED
    .db 02
    .db F8
    .db 00
    .db EF
    .db 02
    .db 00
    .db 02
    .db 00
    .db 4F
    .db 03
    .db 00
    .db 10
    .db 4F
    .db 03
    .db 00
    .db 06
    .db F0
    .db 01
    .db 00
    .db F4
    .db F0
    .db 03
    .db 00
    .db FC
    .db F0
    .db 05
    .db 00
    .db 04
    .db 00
    .db 07
    .db 00
    .db F4
    .db 00
    .db 09
    .db 00
    .db FC
    .db 00
    .db 0B
    .db 00
    .db 04
    .db 06
    .db F0
    .db 0D
    .db 01
    .db F4
    .db F0
    .db 0F
    .db 01
    .db FC
    .db F0
    .db 05
    .db 01
    .db 04
    .db 00
    .db 07
    .db 01
    .db F4
    .db 00
    .db 09
    .db 01
    .db FC
    .db 00
    .db 0B
    .db 01
    .db 04
    .db 08
    .db D0
    .db 0F
    .db 00
    .db F4
    .db D0
    .db 11
    .db 00
    .db FC
    .db D0
    .db 13
    .db 00
    .db 04
    .db E0
    .db 15
    .db 00
    .db F0
    .db E0
    .db 17
    .db 00
    .db F8
    .db E0
    .db 19
    .db 00
    .db 00
    .db E0
    .db 1B
    .db 00
    .db 08
    .db F0
    .db 1D
    .db 00
    .db FB
    .db 07
    .db E8
    .db 01
    .db 00
    .db FE
    .db E0
    .db 1F
    .db 01
    .db F4
    .db E0
    .db 21
    .db 01
    .db FC
    .db E0
    .db 23
    .db 01
    .db 04
    .db F0
    .db 25
    .db 01
    .db F3
    .db F0
    .db 27
    .db 01
    .db FB
    .db F0
    .db 29
    .db 01
    .db 03
    .db 0C
    .db D0
    .db 07
    .db 00
    .db 08
    .db D8
    .db 09
    .db 00
    .db 00
    .db E0
    .db 0B
    .db 00
    .db F8
    .db E8
    .db 0D
    .db 00
    .db F0
    .db D0
    .db 2B
    .db 02
    .db F8
    .db D0
    .db 2D
    .db 02
    .db 00
    .db D0
    .db 2F
    .db 02
    .db 08
    .db E0
    .db 31
    .db 02
    .db F8
    .db E0
    .db 33
    .db 02
    .db 00
    .db E0
    .db 35
    .db 02
    .db 08
    .db F0
    .db 37
    .db 02
    .db 00
    .db F0
    .db 39
    .db 02
    .db 08
    .db 08
    .db F0
    .db 03
    .db 00
    .db F8
    .db F0
    .db 05
    .db 00
    .db 00
    .db E0
    .db 3B
    .db 03
    .db F4
    .db E0
    .db 3D
    .db 03
    .db FC
    .db E0
    .db 3F
    .db 03
    .db 04
    .db F0
    .db 41
    .db 03
    .db F4
    .db F0
    .db 43
    .db 03
    .db FC
    .db F0
    .db 45
    .db 03
    .db 04
    .db 08
    .db C0
    .db 47
    .db 40
    .db 14
    .db D8
    .db 47
    .db 00
    .db 00
    .db E0
    .db 47
    .db 00
    .db E0
    .db E0
    .db 49
    .db 00
    .db F0
    .db E0
    .db 47
    .db 00
    .db 18
    .db F0
    .db 49
    .db 80
    .db D0
    .db F0
    .db 49
    .db 00
    .db E8
    .db F0
    .db 47
    .db C0
    .db F8
    .db 12
    .db C0
    .db 0B
    .db 03
    .db E0
    .db C0
    .db 0D
    .db 03
    .db E8
    .db C0
    .db 0F
    .db 01
    .db F0
    .db C0
    .db 11
    .db 01
    .db F8
    .db D0
    .db 13
    .db 03
    .db E0
    .db D0
    .db 15
    .db 01
    .db E8
    .db D0
    .db 17
    .db 01
    .db F0
    .db D0
    .db 19
    .db 01
    .db F8
    .db D0
    .db 1B
    .db 00
    .db 00
    .db E0
    .db 1D
    .db 00
    .db F0
    .db E0
    .db 1F
    .db 00
    .db F8
    .db E0
    .db 21
    .db 00
    .db 00
    .db E0
    .db 23
    .db 00
    .db 08
    .db F0
    .db 25
    .db 00
    .db F4
    .db F0
    .db 27
    .db 00
    .db FC
    .db F0
    .db 29
    .db 02
    .db 04
    .db F0
    .db 2B
    .db 02
    .db 0C
    .db F0
    .db 2D
    .db 02
    .db 14
    .db 18
    .db B8
    .db 2F
    .db 00
    .db 00
    .db B8
    .db 31
    .db 00
    .db 08
    .db B8
    .db 33
    .db 00
    .db 10
    .db C0
    .db 35
    .db 03
    .db E0
    .db C0
    .db 37
    .db 03
    .db E8
    .db C0
    .db 39
    .db 03
    .db F0
    .db C8
    .db 3B
    .db 01
    .db F8
    .db C8
    .db 3D
    .db 00
    .db 00
    .db C8
    .db 3F
    .db 00
    .db 08
    .db C8
    .db 41
    .db 00
    .db 10
    .db D0
    .db 43
    .db 03
    .db E0
    .db D0
    .db 45
    .db 03
    .db E8
    .db D0
    .db 47
    .db 01
    .db F0
    .db D8
    .db 49
    .db 01
    .db F8
    .db D8
    .db 4B
    .db 00
    .db 00
    .db D8
    .db 4D
    .db 02
    .db 08
    .db D8
    .db 4F
    .db 02
    .db 10
    .db E0
    .db 51
    .db 02
    .db F0
    .db E8
    .db 53
    .db 02
    .db 00
    .db E8
    .db 55
    .db 02
    .db 08
    .db E8
    .db 57
    .db 02
    .db 10
    .db F8
    .db 59
    .db 02
    .db 00
    .db F8
    .db 5B
    .db 02
    .db 08
    .db F8
    .db 5D
    .db 02
    .db 10
    .db 08
    .db D0
    .db 15
    .db 00
    .db F8
    .db D0
    .db 17
    .db 00
    .db 00
    .db D0
    .db 19
    .db 00
    .db 08
    .db E0
    .db 1B
    .db 00
    .db F8
    .db E0
    .db 1D
    .db 00
    .db 00
    .db E0
    .db 1F
    .db 00
    .db 08
    .db F0
    .db 21
    .db 00
    .db 08
    .db F0
    .db 23
    .db 00
    .db 10
    .db 08
    .db D0
    .db 55
    .db 00
    .db F8
    .db D0
    .db 57
    .db 00
    .db 00
    .db D0
    .db 59
    .db 00
    .db 08
    .db E0
    .db 5B
    .db 00
    .db F8
    .db E0
    .db 5D
    .db 00
    .db 00
    .db E0
    .db 5F
    .db 00
    .db 08
    .db F0
    .db 61
    .db 00
    .db 08
    .db F0
    .db 63
    .db 00
    .db 10
    .db 08
    .db D0
    .db 95
    .db 00
    .db F8
    .db D0
    .db 97
    .db 00
    .db 00
    .db D0
    .db 99
    .db 00
    .db 08
    .db E0
    .db 9B
    .db 00
    .db F8
    .db E0
    .db 9D
    .db 00
    .db 00
    .db E0
    .db 9F
    .db 00
    .db 08
    .db F0
    .db A1
    .db 00
    .db 08
    .db F0
    .db A3
    .db 00
    .db 10
    .db 08
    .db D0
    .db D5
    .db 00
    .db F8
    .db D0
    .db D7
    .db 00
    .db 00
    .db D0
    .db D9
    .db 00
    .db 08
    .db E0
    .db DB
    .db 00
    .db F8
    .db E0
    .db DD
    .db 00
    .db 00
    .db E0
    .db DF
    .db 00
    .db 08
    .db F0
    .db E1
    .db 00
    .db 08
    .db F0
    .db E3
    .db 00
    .db 10
    .db 07
    .db D7
    .db 25
    .db 02
    .db 04
    .db D0
    .db 19
    .db 00
    .db F9
    .db D0
    .db 1B
    .db 00
    .db 01
    .db E0
    .db 1D
    .db 00
    .db F8
    .db E0
    .db 1F
    .db 00
    .db 00
    .db F0
    .db 21
    .db 00
    .db F7
    .db F0
    .db 23
    .db 00
    .db FF
    .db 07
    .db D0
    .db 59
    .db 00
    .db F9
    .db D0
    .db 5B
    .db 00
    .db 01
    .db E0
    .db 5D
    .db 00
    .db F8
    .db E0
    .db 67
    .db 00
    .db 00
    .db E0
    .db 69
    .db 00
    .db 08
    .db F0
    .db 61
    .db 00
    .db F7
    .db F0
    .db 63
    .db 00
    .db FF
    .db 07
    .db E7
    .db AF
    .db 02
    .db 07
    .db D0
    .db 99
    .db 00
    .db F9
    .db D0
    .db 9B
    .db 00
    .db 01
    .db E0
    .db AB
    .db 00
    .db F8
    .db E0
    .db AD
    .db 00
    .db 00
    .db F0
    .db A1
    .db 00
    .db F7
    .db F0
    .db A3
    .db 00
    .db FF
    .db 07
    .db D8
    .db F1
    .db 02
    .db 05
    .db D0
    .db D9
    .db 00
    .db F9
    .db D0
    .db DB
    .db 00
    .db 01
    .db E0
    .db DD
    .db 00
    .db F8
    .db E0
    .db DF
    .db 00
    .db 00
    .db F0
    .db E1
    .db 00
    .db F7
    .db F0
    .db E3
    .db 00
    .db FF
    .db 07
    .db CF
    .db 6B
    .db 00
    .db FA
    .db E0
    .db 71
    .db 00
    .db F4
    .db E0
    .db 73
    .db 00
    .db FC
    .db E0
    .db 75
    .db 00
    .db 04
    .db F0
    .db 77
    .db 00
    .db F4
    .db F0
    .db 79
    .db 00
    .db FC
    .db F0
    .db 7B
    .db 00
    .db 04
    .db 03
    .db F0
    .db 71
    .db 00
    .db F4
    .db F0
    .db 73
    .db 00
    .db FC
    .db F0
    .db 75
    .db 00
    .db 04
    .db 01
    .db F0
    .db 6D
    .db 00
    .db FC
    .db 07
    .db D0
    .db 01
    .db 00
    .db F0
    .db D0
    .db 03
    .db 00
    .db F8
    .db E0
    .db 05
    .db 00
    .db F0
    .db E0
    .db 07
    .db 00
    .db F8
    .db E0
    .db 09
    .db 00
    .db 00
    .db F0
    .db 0B
    .db 00
    .db F8
    .db F0
    .db 0D
    .db 00
    .db 00
    .db 06
    .db D0
    .db 2F
    .db 00
    .db F8
    .db D0
    .db 31
    .db 00
    .db 00
    .db E0
    .db 33
    .db 00
    .db F5
    .db E0
    .db 35
    .db 00
    .db FD
    .db F0
    .db 37
    .db 00
    .db F7
    .db F0
    .db 39
    .db 00
    .db FF
    .db 07
    .db D0
    .db 19
    .db 02
    .db F3
    .db D0
    .db 19
    .db 42
    .db FB
    .db E0
    .db 0F
    .db 00
    .db F0
    .db E0
    .db 11
    .db 00
    .db F8
    .db F0
    .db 13
    .db 00
    .db F0
    .db F0
    .db 15
    .db 00
    .db F8
    .db F0
    .db 17
    .db 00
    .db 00
    .db 07
    .db D0
    .db 1B
    .db 02
    .db F3
    .db D0
    .db 1D
    .db 02
    .db FB
    .db E0
    .db 0F
    .db 00
    .db F0
    .db E0
    .db 11
    .db 00
    .db F8
    .db F0
    .db 13
    .db 00
    .db F0
    .db F0
    .db 15
    .db 00
    .db F8
    .db F0
    .db 17
    .db 00
    .db 00
