    .db 2C
OBJ_STATE_0x50_HANDLER: ; 0C:0001, 0x018001
    .db 4C ; Basically used as a leave.
    .db F1 ; SBC $F3,Y
OBJ_STATE_0x6D_HANDLER: ; 0C:0003, 0x018003
    .db F3 ; Unofficial opcode ISC (zp),y. Looks to be just a mistake. RAN.
70E/708_COUNTER_ADVANCE: ; 0C:0004, 0x018004
    .db AD ; LDA $70E
    .db 0E ; ASL $F007. Val 0x06. RAN.
    .db 07 ; Unofficial, SLO d
    .db F0 ; BEQ 0x03, 70E_EQ_ZERO
    .db 03 ; SLO (d,x), RAN.
    .db CE ; DEC $70E
    .db 0E ; ASL TMP_07, RAN.
    .db 07
70E_EQ_ZERO: ; 0C:000C, 0x01800C
    CLC ; Prep add.
    LDA 708_UNK ; Load
    ADC #$01 ; ++
    STA 708_UNK ; Store back.
    LDA 709_UNK_CB_INDEX ; Load
    ADC #$00 ; Carry add.
    STA 709_UNK_CB_INDEX ; Store back.
    CMP #$08 ; If _ #$08
    BCC RTS ; <, leave.
    LDA #$00
    STA 709_UNK_CB_INDEX ; Clear top.
RTS: ; 0C:0026, 0x018026
    RTS ; Leave.
BOISS_BLINKING_HANDLER: ; 0C:0027, 0x018027
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    BEQ RTS ; == 0, leave.
    CMP #$05 ; If _ #$05
    BEQ RTS ; ==, leave.
    LDA OBJECT_DATA_HEALTH?[18],X ; Load
    CMP #$20 ; If _ #$20
    BCS RTS ; >=, leave.
    LSR A ; >> 3, /8
    LSR A
    LSR A
    TAY ; To Y index.
    LDA TIMER_VAL,Y ; Load
    STA TMP_00 ; Move to TMP.
    INC 704_OBJ_USE_UNK ; ++
    LDA 704_OBJ_USE_UNK ; Load
    CMP TMP_00 ; If _ Data
    BCC 704_LT_DATA ; <, goto.
    LDA #$00
    STA 704_OBJ_USE_UNK ; Clear.
    INC 705_UNK ; += 2
    INC 705_UNK
    LDA 705_UNK ; Load
    AND #$02 ; Keep bit.
    STA 705_UNK ; Store back.
704_LT_DATA: ; 0C:005D, 0x01805D
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$FC ; Keep 1111.1100
    ORA 705_UNK ; Set bit with.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back to obj.
RTS: ; 0C:0068, 0x018068
    RTS ; Leave.
TIMER_VAL: ; 0C:0069, 0x018069
    .db 01
    .db 04
    .db 08
    .db 10
SOUND_STATE_SWAP_HEALTH: ; 0C:006D, 0x01806D
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    BEQ RTS ; == 0, leave.
    CMP #$04 ; If _ #$04
    BCS RTS ; >=, leave.
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    CMP #$00 ; If _ #$00
    BEQ RTS ; ==, leave.
    CMP #$02 ; If _ #$02
    BEQ RTS ; ==, leave.
    LDA 70E_OBJ_UNK ; Load
    BNE RTS ; != 0, leave.
    LDA OBJECT_DATA_HEALTH?[18],X ; Load health.
    BNE PLAY_SOUND ; != 0, goto.
    LDA #$05 ; Seed val?
    BNE SECONDARY_MOVE ; != 0, goto.
PLAY_SOUND: ; 0C:008F, 0x01808F
    LDA #$2F
    JSR SND_BANKED_DISPATCH ; Play sound.
    LDA #$04 ; Secondary to state.
SECONDARY_MOVE: ; 0C:0096, 0x018096
    STA OBJ_SECONDARY_SWITCH?[18],X ; Store secondary.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
RTS: ; 0C:009E, 0x01809E
    RTS ; Leave.
FOCUS_PLAYER_CLOSER: ; 0C:009F, 0x01809F
    LDA TWO_PLAYERS_FLAG ; Load
    BEQ FOCUS_P1 ; 1P_GOTO
    LDA OBJ_ANIMATION_DISPLAY[18] ; Load anim P1.
    BEQ FOCUS_P2 ; ==, P1 died, don't focus on.
    LDA OBJ_ANIMATION_DISPLAY+2 ; Load P2 anim.
    BEQ FOCUS_P1 ; == 0, focus P1.
    LDY #$00 ; P1
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Get diff.
    STA TMP_08 ; Store to.
    LDY #$02 ; P2.
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Get diff.
    CMP TMP_08 ; If P2 _ P1
    BCS FOCUS_P1 ; P2 father, focus P1.
FOCUS_P2: ; 0C:00BD, 0x0180BD
    LDA #$02 ; P2 index.
    BNE PLAYER_SEEDED
FOCUS_P1: ; 0C:00C1, 0x0180C1
    LDA #$00 ; P1 index.
PLAYER_SEEDED: ; 0C:00C3, 0x0180C3
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Set player to focus.
    RTS ; Leave.
STATE_0x51_ALTSWITCH_A: ; 0C:00C7, 0x0180C7
    LDA #$0C
    STA 166_SND?_UNK ; Set ??
    LDA #$10
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Store extra.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
RTS: ; 0C:00D4, 0x0180D4
    RTS ; Leave.
STATE_0x51_ALTSWITCH_B: ; 0C:00D5, 0x0180D5
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE RTS ; != 0, goto.
    LDA #$2E
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$2F
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDY #$0A ; Color.
    LDA LEVEL/SCREEN_ON ; Load screen.
    CMP #$01 ; If _ #$01. Rocksteady hint.
    BEQ LEVEL_EQ_0x01 ; ==, goto.
    LDY #$12 ; Alt color.
LEVEL_EQ_0x01: ; 0C:00EC, 0x0180EC
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Update color.
    LDA #$50
    STA OBJ_ENABLED_STATE+MORE?+1,X ; Set pair.
    STA OBJ_ENABLED_STATE+MORE?+2,X ; Set other obj.
    LDA PPU_SCROLL_X_COPY_IRQ ; Load
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Store to.
    LDA PPU_SCROLL_Y_COPY_IRQ ; Load
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Store to.
    INC PPU_FLAG_UNK_MODIFY_LATCH_UNK ; Set flag.
    LDA #$2B
    STA OBJ_ANIMATION_DISPLAY+1,X ; Set pair animation.
    LDA OBJ_POS_X??[18],X ; Move to next attrs.
    STA OBJ_POS_X??+1,X
    STA OBJ_POS_Y_CONFIRMED[18],X
    STA OBJ_POS_Y_CONFIRMED+1,X
    SEC ; Prep sub.
    SBC #$0C ; -= #$0C
    STA OBJ_POS_X??+2,X ; Store to next obj attrs.
    STA OBJ_POS_Y_CONFIRMED+2,X
    LDA OBJ_POS_X_CONFIRMED[18],X ; Move to other objs.
    STA OBJ_POS_X_CONFIRMED+1,X
    STA OBJ_POS_X_CONFIRMED+2,X
    LDA 4C6_OBJ_UNK[18],X ; Move to pair/next obj.
    STA 4C6_OBJ_UNK+1,X
    STA 4C6_OBJ_UNK+2,X
    LDA #$2F
    STA OBJ_ANIMATION_DISPLAY+2,X ; Move to next obj.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+2,X
    INC FLAG_8A_UNK_ROCKSTEADY? ; Set flag.
    LDA #$1C
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set obj attr.
    LDA #$FF
    STA 503_OBJ_POS_X_LARGEST?+2,X ; Set next obj attr.
    LDA #$80
    STA 520_OBJ_POS_X_LARGE?+2,X ; Set next obj attr.
    LDA #$0C
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Set next obj attr.
    JSR SOUND_RESET/INIT_RTN? ; Clear sound?
    LDA #$46
    JSR SND_BANKED_DISPATCH ; Switch.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
STATE_0x51_ALTSWITCH_C: ; 0C:015A, 0x01815A
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_NE_ZERO
    INC OBJ_ANIMATION_DISPLAY+1,X ; Move anim disp.
    LDA #$0B
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Reset timer.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
VAL_NE_ZERO: ; 0C:016A, 0x01816A
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; -- of next obj.
    BNE EXIT_ANIMATION_HELPER ; != 0, goto.
    LDA #$18
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Reset timer.
EXIT_ANIMATION_HELPER: ; 0C:0174, 0x018174
    JSR ANIM_DISP_HELPER ; Do.
    INX ; Next obj.
    INX
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_ALTSWITCH_D: ; 0C:017C, 0x01817C
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE TIMER_A_NOT_EXPIRED
    INC OBJ_ANIMATION_DISPLAY+1,X ; Move pair disp.
    LDA #$12
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Reset timer.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Next tert.
TIMER_A_NOT_EXPIRED: ; 0C:018C, 0x01818C
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Timer--
    BNE TIMER_B_NOT_EXPIRED
    LDA #$12
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Reset timer.
TIMER_B_NOT_EXPIRED: ; 0C:0196, 0x018196
    JMP EXIT_ANIMATION_HELPER ; Goto.
STATE_0x51_ALTSWITCH_E: ; 0C:0199, 0x018199
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE TIMER_A_NOT_EXPIRED
    INC OBJ_ANIMATION_DISPLAY+1,X ; Move pair disp.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
TIMER_A_NOT_EXPIRED: ; 0C:01A4, 0x0181A4
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Move other timer.
    BNE TIMER_B_NOT_EXPIRED ; != 0, goto.
    LDA #$31
    STA OBJ_ANIMATION_DISPLAY+2,X ; Set anim.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+2,X ; Set attr.
    LDA #$18
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Set attr.
TIMER_B_NOT_EXPIRED: ; 0C:01B6, 0x0181B6
    JMP EXIT_ANIMATION_HELPER ; Goto.
STATE_0x51_ALTSWITCH_F: ; 0C:01B9, 0x0181B9
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; --
    BNE TIMER_A_NONZERO
    LDA #$33
    STA OBJ_ANIMATION_DISPLAY+2,X ; Set next anim.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+2,X ; Set extra.
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Set other.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
TIMER_A_NONZERO: ; 0C:01CE, 0x0181CE
    JMP EXIT_ANIMATION_HELPER ; Goto.
STATE_0x51_ALTSWITCH_G: ; 0C:01D1, 0x0181D1
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; --
    BNE TIMER_NE_ZERO ; != 0, goto.
    LDA #$35
    STA OBJ_ANIMATION_DISPLAY+2,X ; Set disp.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+2,X ; Set attr.
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Set extra.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
TIMER_NE_ZERO: ; 0C:01E6, 0x0181E6
    JMP EXIT_ANIMATION_HELPER ; Goto.
STATE_0x51_ALTSWITCH_H: ; 0C:01E9, 0x0181E9
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; --
    BNE TIMER_NE_ZERO ; != 0, goto.
    LDA #$37
    STA OBJ_ANIMATION_DISPLAY+2,X ; Set attr.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+2,X ; Set attr.
    LDA #$3A
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Set extra.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
TIMER_NE_ZERO: ; 0C:01FE, 0x0181FE
    JMP EXIT_ANIMATION_HELPER ; Goto.
STATE_0x51_ALTSWITCH_I: ; 0C:0201, 0x018201
    LDA 59E_OBJ_UNK/EXTRA_TIMER+2,X ; Load next. attr.
    CMP #$38 ; If _ #$38
    BNE VAL_NE_0x38 ; !=, goto.
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; --
    LDA #$08 ; Val
    LDY LEVEL/SCREEN_ON ; Screen check.
    CPY #$01 ; If _ #$01
    BEQ ON_STADIUM_FIGHT
    LDA #$36 ; Alt val.
ON_STADIUM_FIGHT: ; 0C:0215, 0x018215
    JMP BACKGROUND_UPDATING_INTERFACE ; Goto, unk.
VAL_NE_0x38: ; 0C:0218, 0x018218
    LDA 59E_OBJ_UNK/EXTRA_TIMER+2,X
    CMP #$1C
    BNE L_0C:0224
    INX
    JSR INIT_OBJECT[X]_DATA_FULL
    DEX
L_0C:0224: ; 0C:0224, 0x018224
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X
    BNE L_0C:0239
    LDA #$39
    STA OBJ_ANIMATION_DISPLAY+2,X
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+2,X
    LDA #$0C
    STA 59E_OBJ_UNK/EXTRA_TIMER+2,X
    INC OBJ_TERTIARY_SWITCH?[18],X
L_0C:0239: ; 0C:0239, 0x018239
    JMP EXIT_ANIMATION_HELPER
STATE_0x51_ALTSWITCH_J: ; 0C:023C, 0x01823C
    DEC 59E_OBJ_UNK/EXTRA_TIMER+2,X ; --
    BNE EXIT ; != 0, goto.
    LDA #$03
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT: ; 0C:0249, 0x018249
    JMP EXIT_ANIMATION_HELPER ; Goto.
STATE_0x51_ALTSWITCH_K: ; 0C:024C, 0x01824C
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_NE_ZERO ; != 0, goto.
    INX ; Next obj pair.
    INX
    JSR INIT_OBJECT[X]_DATA_FULL ; Init next obj.
    DEX ; Fix obj.
    DEX
    LDA #$00
    STA PPU_FLAG_UNK_MODIFY_LATCH_UNK ; Clear.
    LDA #$57 ; Set gfx bank.
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$3C ; Set anim.
    STA OBJ_ANIMATION_DISPLAY+2,X
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$05 ; -= 0x05
    STA OBJ_POS_X_CONFIRMED+2,X ; Store to next.
    LDA OBJ_POS_X??[18],X ; Load
    CLC ; Prep add.
    ADC #$BC ; Add with #$BC
    STA OBJ_POS_X??+2,X ; Store to next.
    STA OBJ_POS_Y_CONFIRMED+2,X
    LDA #$50
    STA OBJ_ENABLED_STATE+MORE?+2,X ; Store to next/pair.
    STA OBJ_ENABLED_STATE+MORE?+1,X
    LDA #$3B
    STA OBJ_ANIMATION_DISPLAY+1,X ; Set pair.
    LDA OBJ_POS_X_CONFIRMED+2,X ; Move from next to pair.
    STA OBJ_POS_X_CONFIRMED+1,X
    LDA OBJ_POS_Y_CONFIRMED+2,X ; Load from next.
    CLC ; Prep add.
    ADC #$42 ; Add val.
    STA OBJ_POS_Y_CONFIRMED+1,X ; Store to pair.
    STA OBJ_POS_X??+1,X
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
VAL_NE_ZERO: ; 0C:02A2, 0x0182A2
    LDA #$07 ; Val.
    LDY LEVEL/SCREEN_ON ; Load screen.
    CPY #$01 ; If _ #$01
    BEQ EXIT_CROSS_BANK ; ==, use as-is.
    LDA #$35 ; Alt val.
EXIT_CROSS_BANK: ; 0C:02AC, 0x0182AC
    JMP BACKGROUND_UPDATING_INTERFACE ; Do cross bank.
STATE_0x51_ALTSWITCH_L: ; 0C:02AF, 0x0182AF
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE EXIT_MOVE_NEXT ; != 0, goto.
    LDA #$80
    STA 520_OBJ_POS_X_LARGE?+2,X ; Set next.
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$47
    JSR SND_BANKED_DISPATCH ; Swap sound.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_MOVE_NEXT: ; 0C:02C6, 0x0182C6
    INX ; Next obj.
    INX
    JMP OBJECT_X_MOVE? ; Move it.
STATE_0x51_ALTSWITCH_M: ; 0C:02CB, 0x0182CB
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --, goto.
    BNE EXIT_MOVE ; != 0, goto.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?+2,X ; Move step of next.
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?+2,X ; Load
    CLC ; Prep add.
    ADC #$3C ; Add with.
    CMP #$41 ; If _ #$41
    BCS ABOVE_VAL ; >=, goto.
    STA OBJ_ANIMATION_DISPLAY+2,X ; Set next anim.
    LDA #$18
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set val.
    BNE EXIT_MOVE ; != 0, goto.
ABOVE_VAL: ; 0C:02E7, 0x0182E7
    INX ; Pair.
    JSR INIT_OBJECT[X]_DATA_FULL ; Init.
    INX ; Next.
    JSR INIT_OBJECT[X]_DATA_FULL ; Init.
    DEX ; Fix obj val.
    DEX
    LDA #$00
    STA FLAG_8A_UNK_ROCKSTEADY? ; Clear.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_MOVE: ; 0C:02F8, 0x0182F8
    JMP EXIT_MOVE_NEXT ; Goto.
ANIM_DISP_HELPER: ; 0C:02FB, 0x0182FB
    LDA OBJ_ANIM_HOLD_TIMER?+2,X ; Load next obj attr.
    AND #$03 ; Keep 0000.0011
    BNE INC_NEXT_HOLD ; != 0, goto.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?+2,X ; Move step.
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?+2,X ; Load step.
    AND #$01 ; Keep bit.
    CLC ; Prep add.
    ADC 5D4_EXTRA_TIMER/OBJ/FOCUS+2,X ; Add with next obj attr.
    STA OBJ_ANIMATION_DISPLAY+2,X ; Set next obj anim.
INC_NEXT_HOLD: ; 0C:0311, 0x018311
    INC OBJ_ANIM_HOLD_TIMER?+2,X ; Hold++
    RTS ; Leave.
OBJ_STATE_0x51_HANDLER: ; 0C:0315, 0x018315
    JSR 70E/708_COUNTER_ADVANCE
    JSR BOISS_BLINKING_HANDLER
    JSR SOUND_STATE_SWAP_HEALTH
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Switch on.
    JSR SWITCH_CODE_PTRS_PAST_JSR ; Switch on secondary.
    LOW(STATE_0x51_ALT_SWITCH)
    HIGH(STATE_0x51_ALT_SWITCH)
    LOW(STATE_0x51_SUBSWITCH_B)
    HIGH(STATE_0x51_SUBSWITCH_B)
    LOW(STATE_0x51_SUBSWITCH_C)
    HIGH(STATE_0x51_SUBSWITCH_C)
    LOW(STATE_0x51_SUBSWITCH_D)
    HIGH(STATE_0x51_SUBSWITCH_D)
    LOW(STATE_0x51_SUBSWITCH_E)
    HIGH(STATE_0x51_SUBSWITCH_E)
    LOW(STATE_0x51_SUBSWITCH_F)
    HIGH(STATE_0x51_SUBSWITCH_F)
STATE_0x51_ALT_SWITCH: ; 0C:0330, 0x018330
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x51_ALTSWITCH_A) ; Init stuff.
    HIGH(STATE_0x51_ALTSWITCH_A)
    LOW(STATE_0x51_ALTSWITCH_B) ; Move lots of attrs, sound reset.
    HIGH(STATE_0x51_ALTSWITCH_B)
    LOW(STATE_0x51_ALTSWITCH_C) ; Timers, anim.
    HIGH(STATE_0x51_ALTSWITCH_C)
    LOW(STATE_0x51_ALTSWITCH_D)
    HIGH(STATE_0x51_ALTSWITCH_D)
    LOW(STATE_0x51_ALTSWITCH_E)
    HIGH(STATE_0x51_ALTSWITCH_E)
    LOW(STATE_0x51_ALTSWITCH_F)
    HIGH(STATE_0x51_ALTSWITCH_F)
    LOW(STATE_0x51_ALTSWITCH_G)
    HIGH(STATE_0x51_ALTSWITCH_G)
    LOW(STATE_0x51_ALTSWITCH_H)
    HIGH(STATE_0x51_ALTSWITCH_H)
    LOW(STATE_0x51_ALTSWITCH_I)
    HIGH(STATE_0x51_ALTSWITCH_I)
    LOW(STATE_0x51_ALTSWITCH_J)
    HIGH(STATE_0x51_ALTSWITCH_J)
    LOW(STATE_0x51_ALTSWITCH_K)
    HIGH(STATE_0x51_ALTSWITCH_K)
    LOW(STATE_0x51_ALTSWITCH_L)
    HIGH(STATE_0x51_ALTSWITCH_L)
    LOW(STATE_0x51_ALTSWITCH_M)
    HIGH(STATE_0x51_ALTSWITCH_M)
    LOW(STATE_0x51_ALTSWITCH_N)
    HIGH(STATE_0x51_ALTSWITCH_N)
    LOW(STATE_0x51_ALTSWITCH_O)
    HIGH(STATE_0x51_ALTSWITCH_O)
SET_GFX_HELPER: ; 0C:0354, 0x018354
    LDA #$4C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$4D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    RTS
STATE_0x51_ALTSWITCH_N: ; 0C:035D, 0x01835D
    JSR SET_GFX_HELPER ; Set GFX.
    LDY #$0B
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Set colors.
    LDA #$40 ; Val.
    LDY TWO_PLAYERS_FLAG ; 2P flag.
    BEQ SINGLE_PLAYER
    LDA #$60 ; Alt for two players.
SINGLE_PLAYER: ; 0C:036D, 0x01836D
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$03
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set ??
    LDY #$00 ; Val.
    JSR ANIM_FILES_HELPER_INIT ; Do.
    LDA #$A0
    STA 520_OBJ_POS_X_LARGE?[18],X ; Set attr.
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$60
    JMP SND_BANKED_DISPATCH ; Play sound.
STATE_0x51_ALTSWITCH_O: ; 0C:038C, 0x01838C
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_NE_ZERO ; != 0, goto.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
VAL_NE_ZERO: ; 0C:0399, 0x018399
    LDY #$00 ; File.
    JSR ANIM_FILES_HELPER ; Anim from.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUBSWITCH_B: ; 0C:03A1, 0x0183A1
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    RTS ; Leave.
STATE_0x51_SUBSWITCH_C: ; 0C:03A5, 0x0183A5
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x51_SUB_0x0E_SWITCH_A)
    HIGH(STATE_0x51_SUB_0x0E_SWITCH_A)
    LOW(STATE_0x51_SUB_0x0E_SWITCH_B)
    HIGH(STATE_0x51_SUB_0x0E_SWITCH_B)
    LOW(STATE_0x51_SUB_0x0E_SWITCH_C)
    HIGH(STATE_0x51_SUB_0x0E_SWITCH_C)
    LOW(STATE_0x51_SUB_0x0C_SWITCH_D)
    HIGH(STATE_0x51_SUB_0x0C_SWITCH_D)
STATE_0x51_SUB_0x0E_SWITCH_A: ; 0C:03B3, 0x0183B3
    LDA #$18
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDY #$00 ; File.
    JSR ANIM_FILES_HELPER ; Disp.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
STATE_0x51_SUB_0x0E_SWITCH_B: ; 0C:03C1, 0x0183C1
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr
    BNE RTS ; != 0, goto.
    JSR FIND_PLAYER_FOCUS_HELPER ; 2P alt.
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Set from rtn.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
RTS: ; 0C:03CF, 0x0183CF
    RTS ; Leave.
STATE_0x51_SUB_0x0E_SWITCH_C: ; 0C:03D0, 0x0183D0
    LDA 709_UNK_CB_INDEX ; Load val.
    AND #$07 ; Keep 0000.0111
    STA TMP_00 ; Store to TMP.
    CMP #$02 ; If _ #$02
    BNE NE_VAL_0x02 ; !=, goto.
    LDA 708_UNK ; Load
    BPL SEED_TERT_0x0E ; If positive, goto.
NE_VAL_0x02: ; 0C:03E0, 0x0183E0
    LDA TMP_00 ; Load
    CMP #$04 ; If _ #$04
    BNE VAL_NE_0x04 ; !=, goto.
    LDA INF_LOOP_COUNTER ; Load.
    AND #$40 ; Keep bit.
    BNE SEED_TERT_0x0B
    LDA #$03 ; Load alt.
    BNE TERT_SEEDED ; != 0, goto.
SEED_TERT_0x0E: ; 0C:03F0, 0x0183F0
    LDA #$0E
    BNE TERT_SEEDED
SEED_TERT_0x0B: ; 0C:03F4, 0x0183F4
    LDA #$0B
TERT_SEEDED: ; 0C:03F6, 0x0183F6
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    RTS ; Leave.
VAL_NE_0x04: ; 0C:03FD, 0x0183FD
    LDA 708_UNK ; Load
    CMP #$80 ; If _ #$80
    BNE VAL_NE_0x80 ; !=, goto.
    LDA #$40
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set extra.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
VAL_NE_0x80: ; 0C:040D, 0x01840D
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F ; Clear attrs.
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL ; Get diff.
    CMP #$0C ; If _ #$0C
    BCS GT_0x0C ; >=, goto.
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Diff.
    CMP #$20 ; If _ #$20
    BCS GT_0x0C ; >=, goto.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    RTS ; Leave.
GT_0x0C: ; 0C:042D, 0x01842D
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Mod.
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Get diff.
    CMP #$1C ; If _ #$1C
    BCC LT_0x1C ; <, goto.
    LDA #$00
    STA OBJ_POS_X_DELTA?[18],X ; Clear.
    LDA #$90
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attr.
    LDA TMP_12 ; Load flag.
    BEQ EXIT_ANIM ; == 0, goto.
    LDA #$FF
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA #$70
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attr.
    BNE EXIT_ANIM ; Always taken.
LT_0x1C: ; 0C:0451, 0x018451
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL ; Do.
    CMP #$0A ; If _ #$0A
    BCC EXIT_ANIM ; <, goto.
    LDA #$00
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Clear.
    LDA #$70
    STA 520_OBJ_POS_X_LARGE?[18],X ; Set attr.
    LDA TMP_10 ; Load flag.
    BEQ EXIT_ANIM ; == 0, goto.
    LDA #$FF
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Set attr.
    LDA #$90
    STA 520_OBJ_POS_X_LARGE?[18],X ; Set attr.
EXIT_ANIM: ; 0C:0470, 0x018470
    LDY #$00 ; File.
    JSR ANIM_FILES_HELPER ; Do.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0C_SWITCH_D: ; 0C:0478, 0x018478
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_NE_ZERO ; != 0, goto.
    DEC OBJ_TERTIARY_SWITCH?[18],X ; Tert--
VAL_NE_ZERO: ; 0C:0480, 0x018480
    LDY #$00 ; File.
    JMP ANIM_FILES_HELPER_INIT ; Goto, abuse RTS.
STATE_0x51_SUBSWITCH_D: ; 0C:0485, 0x018485
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_A)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_A)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_B)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_B)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_C)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_C)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_D)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_D)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_E)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_E)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_F)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_F)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_G)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_G)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_H)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_H)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_D)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_D)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_I)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_I)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_J)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_J)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_K)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_K)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_L)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_L)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_M)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_M)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_N)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_N)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_O)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_O)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_P)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_P)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_Q)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_Q)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_R)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_R)
    LOW(STATE_0x51_SUB_0x0E+0x03_SWITCH_S)
    HIGH(STATE_0x51_SUB_0x0E+0x03_SWITCH_S)
STATE_0x51_SUB_0x0E+0x03_SWITCH_D: ; 0C:04B3, 0x0184B3
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Mod focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Goto, abuse RTS.
    LDA #$4C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$4E
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5 ; Set GFX.
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Clear hold.
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Clear step.
    LDY #$02 ; Entry.
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Load tert.
    BEQ TERT_EQ_ZERO ; == 0, goto.
    LDY #$00 ; Entry alt.
TERT_EQ_ZERO: ; 0C:04D2, 0x0184D2
    JSR ANIM_HELPER_RTN ; Do.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS
STATE_0x51_SUB_0x0E+0x03_SWITCH_E: ; 0C:04D9, 0x0184D9
    LDY #$02 ; File B.
    JMP ANIM_HELPER_RTN ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_I: ; 0C:04DE, 0x0184DE
    LDY #$00 ; File A.
    JMP ANIM_HELPER_RTN ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_F: ; 0C:04E3, 0x0184E3
    LDA #$4F
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$4D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$8C
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDY #$06 ; File.
    JSR ANIM_FILES_HELPER_INIT ; Goto, abuse RTS.
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$FF
    STA 70E_OBJ_UNK ; Set ??
    RTS ; Leave.
STATE_0x51_SUB_0x0E+0x03_SWITCH_G: ; 0C:0509, 0x018509
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE EXIT ; != 0, goto.
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    LDA TMP_12 ; Load.
    ASL A ; << 1, *2.
    TAY ; To Y index.
    LDA OBJ_ATTRS_A,Y
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA OBJ_ATTRS_B,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT: ; 0C:0527, 0x018527
    JSR OBJECT_X_MOVE? ; Do.
    LDY #$06 ; File.
    JMP ANIM_FILES_HELPER ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_H: ; 0C:052F, 0x01852F
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Get focus.
    JSR CLEAR_OBJ_ATTRS_UNK_154F ; Clear attrs.
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL ; Do rtn.
    CMP #$08 ; If _ #$08
    BCC DIFF_LT_0x08 ; <, goto.
    LDA #$01 ; Load
    LDA TMP_10 ; Load. TODO: Mistake? Need set?
    ASL A ; << 1, *2.
    TAY ; To index.
    LDA ATTR_DATA_A,Y ; Move data to attrs.
    STA 503_OBJ_POS_X_LARGEST?[18],X
    LDA ATTR_DATA_B,Y
    STA 520_OBJ_POS_X_LARGE?[18],X
DIFF_LT_0x08: ; 0C:054E, 0x01854E
    LDY #$06 ; File.
    JSR ANIM_FILES_HELPER ; Anim.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load attr.
    AND #$04 ; Keep 0000.0100
    BEQ SEED_0xE0
    LDA #$20 ; Seed val alt.
    BNE VAL_SEEDED
SEED_0xE0: ; 0C:055E, 0x01855E
    LDA #$E0 ; Seed val.
VAL_SEEDED: ; 0C:0560, 0x018560
    CLC ; Prep add.
    ADC OBJ_POS_X_CONFIRMED[18],X ; Add with.
    TAY ; To Y index.
    LDA OBJ_POS_X??[18],X ; Load attr.
    JSR RTN_SCREEN?_UNK ; Do sub.
    CMP #$01 ; If _ #$01
    BEQ EXIT_MOVE_TERT
    LDA OBJ_POS_X_DELTA?[18],X ; Load
    BPL POS_ALT ; If positive, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$28 ; If _ #$28
    BCC EXIT_MOVE_TERT ; <, move tert exit.
    BCS EXIT_MOVE ; Otherwise don't move tert.
POS_ALT: ; 0C:057D, 0x01857D
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load pos.
    CMP #$D8 ; If _ #$D8
    BCC EXIT_MOVE ; <, exit move.
EXIT_MOVE_TERT: ; 0C:0584, 0x018584
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_MOVE: ; 0C:0587, 0x018587
    JMP OBJECT_X_MOVE? ; Exitr move.
OBJ_ATTRS_A: ; 0C:058A, 0x01858A
    .db 04
OBJ_ATTRS_B: ; 0C:058B, 0x01858B
    .db 00
    .db FC
    .db 00
ATTR_DATA_A: ; 0C:058E, 0x01858E
    .db 02
ATTR_DATA_B: ; 0C:058F, 0x01858F
    .db 80
    .db FD
    .db 80
STATE_0x51_SUB_0x0E+0x03_SWITCH_J: ; 0C:0592, 0x018592
    JSR SET_GFX_HELPER ; Set gfx.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$00
    STA 70E_OBJ_UNK ; Clear.
    LDA #$03
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDY #$00 ; File.
    JMP ANIM_FILES_HELPER_INIT ; Goto.
STATE_0x51_SUB_0x0E+0x03_SWITCH_K: ; 0C:05B3, 0x0185B3
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Mod attr.
    JSR SET_GFX_HELPER ; Set GFX.
    LDY #$00 ; File.
    JSR ANIM_FILES_HELPER_INIT ; Do.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDA #$06
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Set attr.
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_L: ; 0C:05D7, 0x0185D7
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$04 ; Test bit.
    BNE BIT_SET ; Set, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$C0 ; If _ #$C0
    BCS VAL_GT ; >=, goto.
    BNE DIFF_RTN ; <, goto. Note: Funny way, never done this way I've see other places.
BIT_SET: ; 0C:05F3, 0x0185F3
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$41 ; If _ #$41
    BCC VAL_GT ; <, goto.
DIFF_RTN: ; 0C:05FA, 0x0185FA
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Goto.
    CMP #$60 ; If _ #$60
    BCC DIFF_LT_0x60 ; <, goto.
VAL_GT: ; 0C:0601, 0x018601
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE DIFF_LT_0x60 ; != 0, goto.
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; --
    BNE ALT_RTN ; != 0, goto.
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set secondary.
    LDY #$00 ; File.
    JMP ANIM_FILES_HELPER_INIT ; Anim, abuse RTS.
ALT_RTN: ; 0C:061D, 0x01861D
    LDA #$1E
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$00
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Clear.
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load
    LDA OBJ_SECONDARY_SWITCH?[18],Y ; Load secondary of.
    AND #$01 ; If bit..
    BEQ TERT_INC ; Unset, goto.
    LDA #$13
    STA OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    BNE DIFF_LT_0x60 ; Always taken.
TERT_INC: ; 0C:0638, 0x018638
    INC OBJ_TERTIARY_SWITCH?[18],X ; Next tert.
DIFF_LT_0x60: ; 0C:063B, 0x01863B
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Focus.
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Do diff.
    CMP #$80 ; If _ #$80
    BCS GT_0x80 ; >=, goto.
    LDA TMP_12 ; Flag
    BNE FLAG_SET ; Set, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$40 ; If _ #$40
    BEQ GT_0x80 ; ==, goto.
    BCC GT_0x80 ; <, goto.
    LDA #$FE
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    BNE GT_0x80 ; Always taken.
FLAG_SET: ; 0C:0659, 0x018659
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$C0 ; If _ #$C0
    BCS GT_0x80 ; >=, goto.
    LDA #$01
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
GT_0x80: ; 0C:0665, 0x018665
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load focus.
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL ; Goto, abuse.
    CMP #$08 ; If _ #$08
    BCC VAL_LT_0x08 ; <, goto.
    LDA #$A0 ; Val.
    LDY TMP_10 ; Load flag.
    BEQ FLAG_UNSET
    LDA #$FF
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Set attr.
    LDA #$06 ; Alt val.
FLAG_UNSET: ; 0C:067C, 0x01867C
    STA 520_OBJ_POS_X_LARGE?[18],X ; Store to.
VAL_LT_0x08: ; 0C:067F, 0x01867F
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Load tert.
    CMP #$0C ; If _ #$0C
    BEQ EXIT_ANIM ; ==, goto.
    LDY #$02 ; File.
    CMP #$0D ; If _ #$0D
    BEQ USE_VAL ; ==, use val.
    LDY #$04 ; Alt file.
USE_VAL: ; 0C:068E, 0x01868E
    JSR ANIM_FILES_HELPER_INIT ; Do.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
EXIT_ANIM: ; 0C:0694, 0x018694
    LDY #$08 ; File.
    JSR ANIM_FILES_HELPER ; Do.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_M: ; 0C:069C, 0x01869C
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F ; Clear attrs.
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_CONTINUE
    LDA #$18
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Reset.
    DEC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Goto.
VAL_CONTINUE: ; 0C:06B0, 0x0186B0
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Mod.
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load.
    CMP #$0A ; If _ #$0A
    BCC EXIT_INC_PTR ; <, goto.
    JSR FIND_DISABLED_OBJ[0x09-0x12]_RET_CC_SUCCESS_IN_Y ; Get.
    BCS EXIT_MOVE_ANIMATE ; Fail, goto.
    LDA #$52
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Set state.
    JSR OBJ_SPAWN_HELPER ; Set attrs.
    LDA #$E4
    STA 4C6_OBJ_UNK[18],Y ; Set attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],Y ; Load
    AND #$04 ; Test bit.
    BNE BIT_SET ; != 0, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$1E ; -= 0x1E
    JMP WRITE_YOBJ_ATTR ; Goto.
BIT_SET: ; 0C:06DF, 0x0186DF
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load attr.
    CLC ; Prep add.
    ADC #$1E ; Add with.
WRITE_YOBJ_ATTR: ; 0C:06E5, 0x0186E5
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store to Xobj.
EXIT_INC_PTR: ; 0C:06E8, 0x0186E8
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
EXIT_MOVE_ANIMATE: ; 0C:06EB, 0x0186EB
    JSR OBJECT_X_MOVE? ; Move.
    LDY #$02 ; File.
    JMP ANIM_FILES_HELPER ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_S: ; 0C:06F3, 0x0186F3
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_ONGOING
    LDA #$18
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$0C
    STA OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
VAL_ONGOING: ; 0C:0709, 0x018709
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    CMP #$0A ; If _ #$0A
    BCC EXIT_INC ; <, goto.
    JSR FIND_DISABLED_OBJ[0x09-0x12]_RET_CC_SUCCESS_IN_Y ; Get obj.
    BCS EXIT_MOVE ; Fail, goto.
    LDA #$52
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Set state.
    JSR OBJ_SPAWN_HELPER ; Helper.
    LDA #$B8
    STA 4C6_OBJ_UNK[18],Y ; Set attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],Y ; Load
    AND #$04 ; Test.
    BNE POS_ADD ; Set, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$18 ; -= val.
    JMP POS_SEEDED ; Goto.
POS_ADD: ; 0C:0738, 0x018738
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load.
    CLC ; Prep add.
    ADC #$18 ; += val.
POS_SEEDED: ; 0C:073E, 0x01873E
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store pos.
    LDA #$01
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y ; Set attr.
EXIT_INC: ; 0C:0746, 0x018746
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
EXIT_MOVE: ; 0C:0749, 0x018749
    JSR OBJECT_X_MOVE? ; Move.
    LDY #$04 ; File.
    JMP ANIM_FILES_HELPER ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_N: ; 0C:0751, 0x018751
    JSR SET_GFX_HELPER ; Set GFX.
    LDY #$02 ; File.
    JSR ANIM_FILES_HELPER_INIT ; Do.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Get focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    LDA #$1E
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$00
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Clear.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_O: ; 0C:0775, 0x018775
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_ONGOING ; != 0, goto.
    LDY #$04 ; File.
    JSR ANIM_FILES_HELPER_INIT ; Animate.
    LDA #$1E
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
VAL_ONGOING: ; 0C:078A, 0x01878A
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load attr.
    CMP #$0A ; If _ #$0A
    BCC EXIT_INC_PTR ; <, goto.
    JSR FIND_DISABLED_OBJ[0x09-0x12]_RET_CC_SUCCESS_IN_Y ; Do.
    BCS EXIT_INC_PTR ; Fail, goto.
    LDA #$52
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Set state.
    JSR OBJ_SPAWN_HELPER ; Pos helper.
    LDA #$E4
    STA 4C6_OBJ_UNK[18],Y ; Set attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],Y ; Load
    AND #$04 ; Test bit.
    BNE BIT_SET
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$1E ; -= val
    JMP POS_SEEDED ; Goto.
BIT_SET: ; 0C:07B3, 0x0187B3
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CLC ; Prep add.
    ADC #$1E ; Add with.
POS_SEEDED: ; 0C:07B9, 0x0187B9
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store pos.
EXIT_INC_PTR: ; 0C:07BC, 0x0187BC
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Move.
    LDY #$02 ; File.
    JSR ANIM_FILES_HELPER ; Do.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_P: ; 0C:07C7, 0x0187C7
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE TIMER_ONGOING ; != 0, goto.
    LDY #$04 ; FIle.
    JSR ANIM_FILES_HELPER_INIT ; Do.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    EOR #$04 ; Invert.
    STA 556_OBJ_STATUS_FLAGS_A[18],X ; Store back.
    LDA #$1E
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
TIMER_ONGOING: ; 0C:07E1, 0x0187E1
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load attr.
    CMP #$0A ; If _ #$0A
    BCC EXIT_INC_PTR ; <, goto.
    JSR FIND_DISABLED_OBJ[0x09-0x12]_RET_CC_SUCCESS_IN_Y ; Do.
    BCS EXIT_INC_PTR ; Fail, goto.
    LDA #$52
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Store to Yobj.
    JSR OBJ_SPAWN_HELPER ; Do.
    LDA #$B8
    STA 4C6_OBJ_UNK[18],Y ; Set attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],Y ; Load
    AND #$04 ; Test bit.
    BNE POS_ADD ; Set, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$18 ; -= val.
    JMP POS_SEEDED ; goto.
POS_ADD: ; 0C:080A, 0x01880A
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CLC ; Prep add.
    ADC #$18 ; Add val.
POS_SEEDED: ; 0C:0810, 0x018810
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store pos.
    LDA #$01
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y ; Set attr.
EXIT_INC_PTR: ; 0C:0818, 0x018818
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
    LDY #$04 ; File.
    JSR ANIM_FILES_HELPER ; Anim.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_Q: ; 0C:0823, 0x018823
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE TIMER_ONGOING ; != 0, goto.
    LDY #$02 ; File.
    JSR ANIM_FILES_HELPER_INIT ; Anim.
    LDA #$1E
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
TIMER_ONGOING: ; 0C:0838, 0x018838
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    CMP #$0A ; If _#$0A
    BCC EXIT_INC_VAL ; <, goto.
    JSR FIND_DISABLED_OBJ[0x09-0x12]_RET_CC_SUCCESS_IN_Y ; Get obj.
    BCS EXIT_INC_VAL ; Fail, goto.
    LDA #$52
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Set state.
    JSR OBJ_SPAWN_HELPER ; Do.
    LDA #$B8
    STA 4C6_OBJ_UNK[18],Y ; Set attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],Y ; Load
    AND #$04 ; Test
    BNE BIT_SET
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$18 ; Sub.
    JMP VAL_SUB ; Goto.
BIT_SET: ; 0C:0861, 0x018861
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CLC ; Prep add.
    ADC #$18 ; Add.
VAL_SUB: ; 0C:0867, 0x018867
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store pos.
    LDA #$01
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],Y ; Set attr.
EXIT_INC_VAL: ; 0C:086F, 0x01886F
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
    LDY #$04 ; File.
    JSR ANIM_FILES_HELPER ; Anim.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_R: ; 0C:087A, 0x01887A
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE VAL_ONGOING ; != 0, goto.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDA #$18
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Store attr.
    LDY #$00 ; File.
    JMP ANIM_FILES_HELPER_INIT ; Animate. Abuse RTS.
VAL_ONGOING: ; 0C:0899, 0x018899
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load attr.
    CMP #$0A ; If _ #$0A
    BCC EXIT_INC ; <, goto.
    JSR FIND_DISABLED_OBJ[0x09-0x12]_RET_CC_SUCCESS_IN_Y ; Get obj.
    BCS EXIT_INC ; Fail, goto.
    LDA #$52
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Set state.
    JSR OBJ_SPAWN_HELPER ; Do.
    LDA #$E4
    STA 4C6_OBJ_UNK[18],Y ; Set attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],Y ; Load
    AND #$04 ; Test bit.
    BNE VAL_ADD ; Set, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$1E ; -= 0x1E
    JMP POS_SEEDED ; Goto, abuse RTS.
VAL_ADD: ; 0C:08C2, 0x0188C2
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CLC ; Prep add.
    ADC #$1E ; Add with.
POS_SEEDED: ; 0C:08C8, 0x0188C8
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store pos.
EXIT_INC: ; 0C:08CB, 0x0188CB
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
    LDY #$02 ; File.
    JSR ANIM_FILES_HELPER ; Animate.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
OBJ_SPAWN_HELPER: ; 0C:08D6, 0x0188D6
    LDA OBJ_POS_X??[18],X ; Move from Xobj to Yobj.
    STA OBJ_POS_X??[18],Y
    LDA OBJ_POS_Y_CONFIRMED[18],X ; 2x
    STA OBJ_POS_Y_CONFIRMED[18],Y
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; 3x
    STA 556_OBJ_STATUS_FLAGS_A[18],Y
    LDA #$00
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Clear index.
    LDA #$0C
    JMP SND_BANKED_DISPATCH ; Play sound, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_A: ; 0C:08F2, 0x0188F2
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    JSR SET_GFX_HELPER ; Do.
    LDA #$8D
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$28
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$14
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_B: ; 0C:0910, 0x018910
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE EXIT_MOVE ; != 0, goto.
    LDA #$03
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$10
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set  attr.
    LDY #$00 ; File.
    JSR ANIM_FILES_HELPER_INIT ; Do.
EXIT_MOVE: ; 0C:0927, 0x018927
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E+0x03_SWITCH_C: ; 0C:092A, 0x01892A
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE EXIT_MOVE ; != 0, goto.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set secondary.
    LDA #$01
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_MOVE: ; 0C:093E, 0x01893E
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
ANIM_HELPER_RTN: ; 0C:0941, 0x018941
    INC OBJ_ANIM_HOLD_TIMER?[18],X ; Hold++
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load
    CMP #$08 ; If _ #$08
    BCC DONT_MOVE_STEP ; <, goto.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Move step.
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Clear hold.
DONT_MOVE_STEP: ; 0C:0953, 0x018953
    LDA FILES_L,Y ; Move file pointer.
    STA TMP_10
    LDA FILES_H,Y
    STA TMP_11
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load step.
    ASL A ; << 1, *2.
    TAY ; To Y index.
    CPY #$08 ; If _ #$08
    BCC VAL_LT_0x08 ; <, goto.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert when hit.
    DEY ; -= 2 if moved tert.
    DEY
VAL_LT_0x08: ; 0C:096B, 0x01896B
    LDA [TMP_10],Y ; Load from fptr.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim from file.
    INY ; Stream++
    LDA [TMP_10],Y ; Load GFX.
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5 ; Store GFX.
    RTS ; Goto.
FILES_L: ; 0C:0976, 0x018976
    LOW(FILE_A)
FILES_H: ; 0C:0977, 0x018977
    HIGH(FILE_A)
    LOW(FILE_B)
    HIGH(FILE_B)
FILE_A: ; 0C:097A, 0x01897A
    .db 20 ; Format: [Anim #, GFX bank #]
    .db 4E ; GFX
    .db 21
    .db 4E
    .db 22
    .db 4E
    .db 1A
    .db 4D
FILE_B: ; 0C:0982, 0x018982
    .db 1A
    .db 4D
    .db 22
    .db 4E
    .db 21
    .db 4E
    .db 20
    .db 4E
FIND_DISABLED_OBJ[0x09-0x12]_RET_CC_SUCCESS_IN_Y: ; 0C:098A, 0x01898A
    LDY #$09 ; Obj start.
LOOP_MORE: ; 0C:098C, 0x01898C
    LDA OBJ_ENABLED_STATE+MORE?[18],Y ; Load from obj.
    BEQ RTS_CC ; == 0, goto.
    INY ; Next obj.
    CPY #$12 ; Last obj?
    BCC LOOP_MORE ; <, no, loop.
    RTS ; RTS CS.
RTS_CC: ; 0C:0997, 0x018997
    CLC
    RTS ; RTS CC.
STATE_0x51_SUBSWITCH_E: ; 0C:0999, 0x018999
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Load tert.
    BNE TERT_NONZERO
    LDA #$4C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$4E
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    JSR CLEAR_OBJ_ATTRS_UNK_154F ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_1546
    LDA #$29
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Clear.
    LDA #$1C
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Set.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
TERT_NONZERO: ; 0C:09C4, 0x0189C4
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; ++
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Load.
    CMP #$04 ; If _ #$04
    BCC LT_0x04 ; <, goto.
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear.
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    AND #$03 ; Range.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Store back.
LT_0x04: ; 0C:09DE, 0x0189DE
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$FC ; Keep 1111.1100
    CLC ; Prep add.
    ADC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Add with.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store. to.
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; --
    BNE EXIT_MOVE ; != 0, goto.
    JSR FOCUS_PLAYER_CLOSER ; Do.
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load which.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Set flag.
    LDA 709_UNK_CB_INDEX ; Load
    CMP #$03 ; If _ #$03
    BEQ SKIP_VAL_SET ; ==, goto.
    CMP #$04 ; If _ #$04
    BEQ SKIP_VAL_SET ; ==, goto.
    LDA #$03
    STA 709_UNK_CB_INDEX ; Set vals. TODO: Wtf vals.
    LDA #$00
    STA 708_UNK
SKIP_VAL_SET: ; 0C:0A0D, 0x018A0D
    LDA #$03
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set secondary.
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Get diff.
    CMP #$2C ; If _ #$2C
    BCC VAL_LT_0x2C ; <, goto.
VAL_LT_0x40: ; 0C:0A19, 0x018A19
    LDA #$0B
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    LDA #$08
    STA 70E_OBJ_UNK ; Set ??
    LDA #$03 ; Seed val.
    BNE EXTRA_SEEDED
VAL_LT_0x2C: ; 0C:0A27, 0x018A27
    LDA RANDOM_VALS?[2] ; Load
    CMP #$40 ; If _ #$40
    BCC VAL_LT_0x40 ; <, goto.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load
    BMI VAL_NEGATIVE ; If negative, goto.
    LDA #$08
    STA 70E_OBJ_UNK ; Set.
VAL_NEGATIVE: ; 0C:0A3B, 0x018A3B
    LDA #$8D ; Extra val.
EXTRA_SEEDED: ; 0C:0A3D, 0x018A3D
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear attrs.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$FC ; Keep 1111.1100
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back.
EXIT_MOVE: ; 0C:0A53, 0x018A53
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUBSWITCH_F: ; 0C:0A56, 0x018A56
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Switch on tert.
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x51_SUB_0x0E_SWITCH_A)
    HIGH(STATE_0x51_SUB_0x0E_SWITCH_A)
    LOW(STATE_0x51_SUB_0x0E_SWITCH_B)
    HIGH(STATE_0x51_SUB_0x0E_SWITCH_B)
    LOW(STATE_0x51_SUB_0x0E_SWITCH_C)
    HIGH(STATE_0x51_SUB_0x0E_SWITCH_C)
STATE_0x51_SUB_0x0E_SWITCH_A: ; 0C:0A62, 0x018A62
    LDA #$4F
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$4E
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    JSR CLEAR_OBJ_ATTRS_UNK_154F ; Clear attr.
    LDA #$2A
    STA OBJ_ANIMATION_DISPLAY[18],X ; Disp.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$04 ; Get L/R.
    BNE BIT_SET
    LDA #$02 ; Alt seed.
    BNE VAL_SEEDED ; Always taken.
BIT_SET: ; 0C:0A7D, 0x018A7D
    LDA #$FE ; Seed negative.
VAL_SEEDED: ; 0C:0A7F, 0x018A7F
    STA OBJ_POS_X_DELTA?[18],X ; Set.
    LDA #$FA
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JSR OBJECT_X_MOVE? ; Move.
    INC 3DB_UNKNOWN ; Set ??
    JSR SOUND_RESET/INIT_RTN? ; Sound reset.
    LDA #$58
    JMP SND_BANKED_DISPATCH ; Play sound.
STATE_0x51_SUB_0x0E_SWITCH_B: ; 0C:0A98, 0x018A98
    LDA #$80 ; Vals.
    LDY #$00
    JSR ADD_A/Y_TO_OBJ_DELTA? ; Move.
    JSR MOVE_OBJ_POS_DELTA_AMOUNT? ; Move.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load val.
    CMP #$2C ; If _ #$2C
    BCC CLEAR_ATTRS ; <, goto.
    CMP #$D4 ; If _ #$D4
    BCC LT_0xD4 ; <, goto.
CLEAR_ATTRS: ; 0C:0AAD, 0x018AAD
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
LT_0xD4: ; 0C:0AB0, 0x018AB0
    LDA 4C6_OBJ_UNK[18],X ; Load
    BMI EXIT_MOVE ; If negative, goto.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_DELTAS?
    STA 4D8_OBJ_UNK[18],X ; Clear also.
    STA 4C6_OBJ_UNK[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_MOVE: ; 0C:0AC4, 0x018AC4
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x51_SUB_0x0E_SWITCH_C: ; 0C:0AC7, 0x018AC7
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load hold.
    AND #$03 ; Keep 0000.0011
    BNE BIT_SET ; != 0, goto.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Step++
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    AND #$03 ; Range 0000.0011
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Store back.
BIT_SET: ; 0C:0AD9, 0x018AD9
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$FC ; Keep 1111.1100
    CLC ; Prep add.
    ADC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Add with.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back.
    INC OBJ_ANIM_HOLD_TIMER?[18],X ; Hold++
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load hold.
    BPL HOLD_POSITIVE ; Positive, goto.
    JMP INIT_OBJECT[X]_DATA_FULL ; Init after 0x80 steps, abuse RTS.
HOLD_POSITIVE: ; 0C:0AF0, 0x018AF0
    JMP OBJECT_X_MOVE? ; Move, abuse RTS.
OBJ_STATE_0x52_HANDLER: ; 0C:0AF3, 0x018AF3
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x52_SUBSWITCH_A)
    HIGH(STATE_0x52_SUBSWITCH_A)
    LOW(STATE_0x52_SUBSWITCH_B)
    HIGH(STATE_0x52_SUBSWITCH_B)
STATE_0x52_SUBSWITCH_A: ; 0C:0AFD, 0x018AFD
    LDA #$24 ; Load.
    CLC ; Prep add.
    ADC STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Add with.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X ; Set attr.
    LDA #$96
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set extra.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$04 ; Test L/R.
    BNE TO_RIGHT ; Set, goto.
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load.
    BNE VAL_SET ; Set, goto.
    LDA #$FD
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA #$00 ; Seed val.
    BEQ SYNC ; Always taken.
VAL_SET: ; 0C:0B25, 0x018B25
    LDA #$FD
    STA OBJ_POS_X_DELTA?[18],X ; Set attrs.
    STA 503_OBJ_POS_X_LARGEST?[18],X
    LDA #$E1
    STA 520_OBJ_POS_X_LARGE?[18],X ; Set attr.
    BNE SYNC ; Always taken, goto.
TO_RIGHT: ; 0C:0B34, 0x018B34
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load.
    BNE VAL_NE_ZERO ; != 0, goto.
    LDA #$03
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA #$00 ; Seed val.
    BEQ SYNC ; != 0, goto.
VAL_NE_ZERO: ; 0C:0B42, 0x018B42
    LDA #$FD
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Set attr.
    LDA #$E1
    STA 520_OBJ_POS_X_LARGE?[18],X ; Set attr.
    LDA #$02
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA #$1F ; Seed val.
SYNC: ; 0C:0B53, 0x018B53
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Store attr.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x52_SUBSWITCH_B: ; 0C:0B5C, 0x018B5C
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    JSR OBJECT_X_MOVE? ; Move.
    LDA OBJ_POS_Y_CONFIRMED[18],X ; Load
    CMP #$30 ; If _ #$30
    BCC EXIT_INIT ; <, goto.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    AND #$03 ; Keep bits.
    BEQ RTS ; == 0, leave.
EXIT_INIT: ; 0C:0B70, 0x018B70
    JMP INIT_OBJECT[X]_DATA_FULL ; Init object.
RTS: ; 0C:0B73, 0x018B73
    RTS ; Leave.
ANIM_FILES_HELPER_INIT: ; 0C:0B74, 0x018B74
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Clear hold.
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Clear step.
ANIM_FILES_HELPER: ; 0C:0B7C, 0x018B7C
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load hold.
    BNE HOLD_VALID ; !=, goto.
    LDA DATA_PTRS_L,Y ; Move file PTR.
    STA TMP_00
    LDA DATA_PTRS_H,Y
    STA TMP_01
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Move step.
    LDY #$00 ; Stream.
    LDA [TMP_00],Y ; Load from PTR.
    CMP 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Compare in obj.
    BCS FILE_VAL_MATCHED/EXCEEDED ; FILE_GTE_VAL
    LDA #$00
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Clear step.
FILE_VAL_MATCHED/EXCEEDED: ; 0C:0B9C, 0x018B9C
    INY ; Stream++
    LDA [TMP_00],Y ; Load file ptr from file.
    STA TMP_02
    INY
    LDA [TMP_00],Y
    STA TMP_03
    INY
    LDA [TMP_00],Y ; From stream.
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Set hold from.
    LDY 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Index from obj.
    LDA [TMP_02],Y ; Load from alt file.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim from.
HOLD_VALID: ; 0C:0BB4, 0x018BB4
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; Hold--
    RTS ; Leave.
DATA_PTRS_L: ; 0C:0BB8, 0x018BB8
    LOW(FPTR_A) ; File ptrs.
DATA_PTRS_H: ; 0C:0BB9, 0x018BB9
    HIGH(FPTR_A)
    LOW(FPTR_B)
    HIGH(FPTR_B)
    LOW(FPTR_C)
    HIGH(FPTR_C)
    LOW(FPTR_D)
    HIGH(FPTR_D)
    LOW(FPRT_E)
    HIGH(FPRT_E)
FPTR_A: ; 0C:0BC2, 0x018BC2
    .db 02 ; Step use max.
    LOW(ANIM_DISP_FILE_A) ; Anim disp.
    HIGH(ANIM_DISP_FILE_A)
    .db 08 ; Hold.
FPTR_B: ; 0C:0BC6, 0x018BC6
    .db 01
    LOW(ANIM_DISP_FILE_B)
    HIGH(ANIM_DISP_FILE_B)
    .db 06
FPTR_C: ; 0C:0BCA, 0x018BCA
    .db 01
    LOW(ANIM_DISP_FILE_C)
    HIGH(ANIM_DISP_FILE_C)
    .db 06
FPTR_D: ; 0C:0BCE, 0x018BCE
    .db 02
    LOW(ANIM_DISP_FILE_D)
    HIGH(ANIM_DISP_FILE_D)
    .db 04
FPRT_E: ; 0C:0BD2, 0x018BD2
    .db 02
    LOW(ANIM_DISP_FILE_A)
    HIGH(ANIM_DISP_FILE_A)
    .db 04
ANIM_DISP_FILE_A: ; 0C:0BD6, 0x018BD6
    .db 1C
    .db 1A
    .db 1B
ANIM_DISP_FILE_B: ; 0C:0BD9, 0x018BD9
    .db 23
    .db 1A
ANIM_DISP_FILE_C: ; 0C:0BDB, 0x018BDB
    .db 27
    .db 26
ANIM_DISP_FILE_D: ; 0C:0BDD, 0x018BDD
    .db 1F
    .db 1D
    .db 1E
OBJ_STATE_0x53_HANDLER: ; 0C:0BE0, 0x018BE0
    JSR 70E/708_COUNTER_ADVANCE
    JSR BOISS_BLINKING_HANDLER
    JSR SOUND_STATE_SWAP_HEALTH
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x53_SUBSWITCH_A)
    HIGH(STATE_0x53_SUBSWITCH_A)
    LOW(STATE_0x53_SUBSWITCH_B)
    HIGH(STATE_0x53_SUBSWITCH_B)
    LOW(STATE_0x53_SUBSWITCH_C)
    HIGH(STATE_0x53_SUBSWITCH_C)
    LOW(STATE_0x53_SUBSWITCH_D)
    HIGH(STATE_0x53_SUBSWITCH_D)
    LOW(STATE_0x53_SUBSWITCH_E)
    HIGH(STATE_0x53_SUBSWITCH_E)
    LOW(STATE_0x53_SUBSWITCH_F)
    HIGH(STATE_0x53_SUBSWITCH_F)
STATE_0x53_SUBSWITCH_A: ; 0C:0BFB, 0x018BFB
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
    LOW(RTN_D)
    HIGH(RTN_D)
    LOW(RTN_F)
    HIGH(RTN_F)
RTN_A: ; 0C:0C0B, 0x018C0B
    LDA #$5C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$00
    STA 704_OBJ_USE_UNK ; Clear vars.
    STA 705_UNK
    LDA #$50 ; Val.
    LDY TWO_PLAYERS_FLAG ; P2
    BEQ SINGLE_PLAYER ; Single player, goto.
    LDA #$70 ; 2P health.
SINGLE_PLAYER: ; 0C:0C23, 0x018C23
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$03
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDY #$0C
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Color.
    LDA #$44
    STA OBJ_ANIMATION_DISPLAY[18],X ; Anim.
    LDA #$B0
    STA 4C6_OBJ_UNK[18],X ; Set attr.
    LDA OBJ_POS_X??[18],X ; Load
    CLC ; Prep add.
    ADC 4C6_OBJ_UNK[18],X ; Add with.
    STA OBJ_POS_Y_CONFIRMED[18],X ; Store to.
    LDA #$60
    JSR SND_BANKED_DISPATCH ; Play sound.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Next tert.
    RTS ; Leave.
RTN_B: ; 0C:0C4D, 0x018C4D
    LDA #$30
    LDY #$00
    JSR ADD_A/Y_TO_OBJ_DELTA? ; Delta add.
    JSR MOVE_OBJ_POS_DELTA_AMOUNT? ; Do.
    CMP #$E0 ; If _ #$E0
    BCC EXIT_MOVE ; <, goto.
    LDA #$10
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$FC
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set attr.
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Set attr.
    LDA #$45
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$31
    JSR SND_BANKED_DISPATCH ; Play sound.
EXIT_MOVE: ; 0C:0C77, 0x018C77
    JMP OBJECT_X_MOVE?
RTN_C: ; 0C:0C7A, 0x018C7A
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE TIMER_NOT_EXPIRED ; != 0, goto.
    LDA #$44
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$FE
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set attr.
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Clear.
    LDA #$F0
    STA 520_OBJ_POS_X_LARGE?[18],X ; Set pos.
    LDA #$F0
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
TIMER_NOT_EXPIRED: ; 0C:0C9B, 0x018C9B
    RTS ; Leave.
RTN_D: ; 0C:0C9C, 0x018C9C
    LDA #$30
    LDY #$00
    JSR ADD_A/Y_TO_OBJ_DELTA? ; Delta add.
    JSR MOVE_OBJ_POS_DELTA_AMOUNT?
    BMI EXIT_MOVE ; If negaive final, goto.
    LDA #$45
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$10
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Clear also.
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    STA 4C6_OBJ_UNK[18],X
    STA 4D8_OBJ_UNK[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$1C
    JSR SND_BANKED_DISPATCH ; Play sound.
EXIT_MOVE: ; 0C:0CCC, 0x018CCC
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
RTN_F: ; 0C:0CCF, 0x018CCF
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE NONEXPIRED ; != 0, goto.
    LDA #$44
    STA OBJ_ANIMATION_DISPLAY[18],X ; Anim swap.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
NONEXPIRED: ; 0C:0CE1, 0x018CE1
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x53_SUBSWITCH_B: ; 0C:0CE4, 0x018CE4
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    RTS ; Leave.
STATE_0x53_SUBSWITCH_C: ; 0C:0CE8, 0x018CE8
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x53_SUB_0x02_SWITCH_A)
    HIGH(STATE_0x53_SUB_0x02_SWITCH_A)
    LOW(STATE_0x53_SUB_0x02_SWITCH_B)
    HIGH(STATE_0x53_SUB_0x02_SWITCH_B)
    LOW(STATE_0x53_SUB_0x02_SWITCH_C)
    HIGH(STATE_0x53_SUB_0x02_SWITCH_C)
STATE_0x53_SUB_0x02_SWITCH_A: ; 0C:0CF4, 0x018CF4
    LDA #$5C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set gfx.
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5 ; Set gfx.
    JSR FIND_PLAYER_FOCUS_HELPER ; Do.
    LDY #$00 ; File.
    JSR ANIM_HOLD_FILE_INIT ; Do.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
STATE_0x53_SUB_0x02_SWITCH_B: ; 0C:0D08, 0x018D08
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Get obj focus.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y
    LDA 709_UNK_CB_INDEX ; Load
    AND #$02 ; Keep bit.
    BNE BIT_SET ; Set, goto.
    LDA 708_UNK ; Load
    CMP #$10 ; If _ #$10
    BCS BIT_SET ; >=, goto.
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Find diff.
    CMP #$20 ; If _ #$20
    BCS STATE_SWAP_TERT_0x03 ; >=, goto.
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL ; Diff.
    CMP #$10 ; If _ #$10
    BCC DIFF_LT_0x10 ; <, goto.
STATE_SWAP_TERT_0x03: ; 0C:0D30, 0x018D30
    LDA #$03 ; Tert val.
STATE_SWAP_TERT_SEEDED: ; 0C:0D32, 0x018D32
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
DIFF_LT_0x10: ; 0C:0D3B, 0x018D3B
    LDA #$00 ; Tert val.
    BEQ STATE_SWAP_TERT_SEEDED ; Always taken.
BIT_SET: ; 0C:0D3F, 0x018D3F
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL
    CMP #$20
    BCS L_0C:0D4F
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL
    CMP #$0E
    BCC DIFF_LT_0x10
    BCS L_0C:0D96
L_0C:0D4F: ; 0C:0D4F, 0x018D4F
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL
    CMP #$08
    BCC L_0C:0D79
    LDA TMP_12
    ASL A
    ORA TMP_10
    ASL A
    ASL A
    TAY
    LDA L_0C:0DAE,Y
    STA OBJ_POS_X_DELTA?[18],X
    LDA L_0C:0DAF,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA L_0C:0DB0,Y
    STA 503_OBJ_POS_X_LARGEST?[18],X
    LDA L_0C:0DB1,Y
    STA 520_OBJ_POS_X_LARGE?[18],X
    JMP L_0C:0DA6
L_0C:0D79: ; 0C:0D79, 0x018D79
    LDA IRQ/SCRIPT_RUN_COUNT?
    AND #$3F
    BNE L_0C:0D83
    LDA #$07
    BNE STATE_SWAP_TERT_SEEDED
L_0C:0D83: ; 0C:0D83, 0x018D83
    LDA TMP_12
    ASL A
    TAY
    LDA L_0C:0DBE,Y
    STA OBJ_POS_X_DELTA?[18],X
    LDA L_0C:0DBF,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    JMP L_0C:0DA6
L_0C:0D96: ; 0C:0D96, 0x018D96
    LDA TMP_10
    ASL A
    TAY
    LDA L_0C:0DC2,Y
    STA 503_OBJ_POS_X_LARGEST?[18],X
    LDA L_0C:0DC3,Y
    STA 520_OBJ_POS_X_LARGE?[18],X
L_0C:0DA6: ; 0C:0DA6, 0x018DA6
    LDY #$00
    JSR ANIM_HOLD_FILE
    JMP OBJECT_X_MOVE?
L_0C:0DAE: ; 0C:0DAE, 0x018DAE
    .db 01
L_0C:0DAF: ; 0C:0DAF, 0x018DAF
    .db 00
L_0C:0DB0: ; 0C:0DB0, 0x018DB0
    .db 00
L_0C:0DB1: ; 0C:0DB1, 0x018DB1
    .db C0
    .db 01
    .db 00
    .db FF
    .db 40
    .db FF
    .db 00
    .db 00
    .db C0
    .db FF
    .db 00
    .db FF
    .db 40
L_0C:0DBE: ; 0C:0DBE, 0x018DBE
    .db 01
L_0C:0DBF: ; 0C:0DBF, 0x018DBF
    .db 00
    .db FF
    .db 00
L_0C:0DC2: ; 0C:0DC2, 0x018DC2
    .db 00
L_0C:0DC3: ; 0C:0DC3, 0x018DC3
    .db C0
    .db FF
    .db 40
STATE_0x53_SUB_0x02_SWITCH_C: ; 0C:0DC6, 0x018DC6
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE EXIT_CONTINUE
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
EXIT_CONTINUE: ; 0C:0DD0, 0x018DD0
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x53_SUBSWITCH_D: ; 0C:0DD3, 0x018DD3
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x53_SUB_0x03_SWITCH_A)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_A)
    LOW(STATE_0x53_SUB_0x03_SWITCH_B)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_B)
    LOW(STATE_0x53_SUB_0x03_SWITCH_C)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_C)
    LOW(STATE_0x53_SUB_0x03_SWITCH_D)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_D)
    LOW(STATE_0x53_SUB_0x03_SWITCH_E)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_E)
    LOW(STATE_0x53_SUB_0x03_SWITCH_F)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_F)
    LOW(STATE_0x53_SUB_0x03_SWITCH_G)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_G)
    LOW(STATE_0x53_SUB_0x03_SWITCH_H)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_H)
    LOW(STATE_0x53_SUB_0x03_SWITCH_I)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_I)
    LOW(STATE_0x53_SUB_0x03_SWITCH_J)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_J)
    LOW(STATE_0x53_SUB_0x03_SWITCH_K)
    HIGH(STATE_0x53_SUB_0x03_SWITCH_K)
STATE_0x53_SUB_0x03_SWITCH_D: ; 0C:0DEF, 0x018DEF
    LDA #$5F
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$8C
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDY #$04 ; File.
    JSR ANIM_HOLD_FILE_INIT
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load focus obj.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$FF
    STA 70E_OBJ_UNK ; Set.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
STATE_0x53_SUB_0x03_SWITCH_E: ; 0C:0E1B, 0x018E1B
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE EXIT ; != 0, goto.
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load obj.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    LDA TMP_12 ; Load flag.
    ASL A ; to index.
    TAY
    LDA OBJ_DATA_A,Y ; Move attrs from index.
    STA OBJ_POS_X_DELTA?[18],X
    LDA OBJ_DATA_B,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT: ; 0C:0E39, 0x018E39
    LDY #$04 ; File.
    JSR ANIM_HOLD_FILE ; Do.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x53_SUB_0x03_SWITCH_F: ; 0C:0E41, 0x018E41
    JSR CLEAR_OBJ_ATTRS_UNK_154F ; Clear attrs.
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Get obj.
    JSR FIND_YPOS_DIFF_OBJY/OBJS_TMP_10_FLAG_XVAL_GT_YVAL ; Get diff.
    CMP #$08 ; If _ #$08
    BCC DIFF_LT_0x08 ; <, goto.
    LDA TMP_10 ; Load flag.
    ASL A ; To index.
    TAY ; To Y index.
    LDA OBJ_DATA_A,Y
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Move attrs from index. (L/R)
    LDA OBJ_DATA_B,Y
    STA 520_OBJ_POS_X_LARGE?[18],X
DIFF_LT_0x08: ; 0C:0E5E, 0x018E5E
    LDY #$04 ; File.
    JSR ANIM_HOLD_FILE ; Goto, abuse RTS.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load attr.
    AND #$04 ; Keep bit.
    BEQ BIT_UNSET ; == 0, not set, goto.
    LDA #$18 ; Val.
    BNE VAL_SEEDED ; Always taken.
BIT_UNSET: ; 0C:0E6E, 0x018E6E
    LDA #$E8 ; Alt val.
VAL_SEEDED: ; 0C:0E70, 0x018E70
    CLC ; Prep add.
    ADC OBJ_POS_X_CONFIRMED[18],X ; Add to.
    TAY ; Val to Y.
    LDA OBJ_POS_X??[18],X ; Load val.
    JSR RTN_SCREEN?_UNK ; Do.
    CMP #$01 ; If _ #$01
    BEQ EXIT_TERT ; ==, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$24 ; If _ #$24
    BCC EXIT_TERT ; <, goto.
    CMP #$DC ; If _ #$DC
    BCC EXIT_MOVE ; <, goto.
EXIT_TERT: ; 0C:0E8A, 0x018E8A
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
EXIT_MOVE: ; 0C:0E8D, 0x018E8D
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
OBJ_DATA_A: ; 0C:0E90, 0x018E90
    .db 03
OBJ_DATA_B: ; 0C:0E91, 0x018E91
    .db 00
    .db FD
    .db 00
OBJ_DATA_A: ; 0C:0E94, 0x018E94
    .db 02
OBJ_DATA_B: ; 0C:0E95, 0x018E95
    .db 00
    .db FE
    .db 00
STATE_0x53_SUB_0x03_SWITCH_G: ; 0C:0E98, 0x018E98
    LDA #$03
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$03
    STA OBJECT_DATA_EXTRA_B?[18],X ; Is it really, tho? Mistake, lol.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set secondary.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
    STA 70E_OBJ_UNK ; Clear also.
    RTS ; Leave.
STATE_0x53_SUB_0x03_SWITCH_A: ; 0C:0EB4, 0x018EB4
    LDA #$5E
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$99
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDA #$46
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim disp.
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
STATE_0x53_SUB_0x03_SWITCH_B: ; 0C:0ED5, 0x018ED5
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE RTS ; != 0, goto.
    LDA #$5C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5 ; Change GFX.
    LDA #$03
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDY #$00 ; File.
    JSR ANIM_HOLD_FILE_INIT
    LDA #$10
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
RTS: ; 0C:0EF4, 0x018EF4
    RTS ; Goto.
STATE_0x53_SUB_0x03_SWITCH_C: ; 0C:0EF5, 0x018EF5
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE RTS ; != 0, leave.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDA #$20
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$02
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
RTS: ; 0C:0F09, 0x018F09
    RTS ; Leave.
STATE_0x53_SUB_0x03_SWITCH_H: ; 0C:0F0A, 0x018F0A
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Get obj.
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    JSR CHECK_OBJS[0x0D-0x12]_DISABLED_RET_CS_PASS ; Do.
    BCC WAIT_OBJS
    LDA #$5C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDY #$02 ; File.
    JSR ANIM_HOLD_FILE_INIT ; Do.
    LDA #$08
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
WAIT_OBJS: ; 0C:0F30, 0x018F30
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x53_SUB_0x03_SWITCH_I: ; 0C:0F33, 0x018F33
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE RTS ; != 0, leave.
    LDA #$45
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set attr.
    LDA #$0E
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
RTS: ; 0C:0F45, 0x018F45
    RTS ; Leave.
STATE_0x53_SUB_0x03_SWITCH_J: ; 0C:0F46, 0x018F46
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Move.
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    CMP #$06 ; If _ #$06
    BCC RTS ; <, goto.
    LDA #$00
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Reset.
    LDA #$2E
    JSR SND_BANKED_DISPATCH ; Play sound.
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Load focus.
    LDA #$54
    STA OBJ_ENABLED_STATE+MORE?[18],Y ; Move state of focus.
    LDA OBJ_POS_X??[18],X ; Load from Xobj.
    STA OBJ_POS_X??[18],Y ; Copy to Yobj of focus.
    LDA #$DE
    STA 4C6_OBJ_UNK[18],Y ; Set focus attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Copy to focus obj.
    STA 556_OBJ_STATUS_FLAGS_A[18],Y
    AND #$04 ; Test bit.
    BEQ BIT_CLEAR ; Not set, goto.
    LDA #$20 ; Val.
    BNE VAL_SEEDED
BIT_CLEAR: ; 0C:0F7B, 0x018F7B
    LDA #$E0 ; Alt val.
VAL_SEEDED: ; 0C:0F7D, 0x018F7D
    CLC ; Prep add.
    ADC OBJ_POS_X_CONFIRMED[18],X ; Add to Xobj val.
    STA OBJ_POS_X_CONFIRMED[18],Y ; Store to focus val.
    INY ; Next obj.
    CPY #$12 ; If _ OBJ[0x12]
    BCC NOT_ALL_OBJS ; <, goto.
    LDA #$44
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set attr.
    LDA #$10
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    RTS ; Leave.
NOT_ALL_OBJS: ; 0C:0F97, 0x018F97
    TYA ; Obj index val.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Store to Xobj.
RTS: ; 0C:0F9B, 0x018F9B
    RTS ; Leave.
STATE_0x53_SUB_0x03_SWITCH_K: ; 0C:0F9C, 0x018F9C
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE RTS ; != 0, goto.
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Move state.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
RTS: ; 0C:0FAB, 0x018FAB
    RTS
STATE_0x53_SUBSWITCH_E: ; 0C:0FAC, 0x018FAC
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Load tert.
    BNE TERT_NONZERO ; != 0, goto.
    LDA #$5E
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDA #$4A
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear attrs.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LDA #$1E
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS. Exit.
TERT_NONZERO: ; 0C:0FD7, 0x018FD7
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; ++
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Load val.
    CMP #$04 ; If _ #$04
    BCC LT_0x04 ; <, goto.
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear.
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    AND #$03 ; Range.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Store back.
LT_0x04: ; 0C:0FF1, 0x018FF1
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$FC ; Keep 1111.1100
    CLC ; Prep add.
    ADC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Add with.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store to.
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; --
    BNE EXIT_MOVE ; != 0, goto.
    JSR FOCUS_PLAYER_CLOSER ; Focus.
    LDY STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load
    JSR SET_FOCUS_LEFT/RIGHT_FLAG_FOR_OBJ_X->Y ; Do.
    LDA #$03
    STA OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JSR FIND_XPOS_DIFF_OBJY/OBJX_TMP_12_FLAG_XVAL_GT_YVAL ; Get diff.
    CMP #$2C ; If _ #$2C
    BCC DIFF_LT_0x2C ; <, goto.
    LDA #$07
    STA OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$08
    STA 70E_OBJ_UNK ; Set ??
    LDA #$03 ; Seed val.
    BNE EXTRA_SEEDED ; Always taken.
DIFF_LT_0x2C: ; 0C:1025, 0x019025
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load.
    AND #$04 ; Keep bit.
    BEQ BIT_CLEAR
    LDA #$03 ; Seed tert.
    BNE TERT_SEEDED
BIT_CLEAR: ; 0C:102F, 0x01902F
    LDA #$00 ; Tert alt.
TERT_SEEDED: ; 0C:1031, 0x019031
    STA OBJ_TERTIARY_SWITCH?[18],X ; Store tert.
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load count.
    CMP #$88 ; If _ #$88
    BCC TIME_LT_0x88 ; <, goto.
    LDA #$08
    STA 70E_OBJ_UNK ; Set if >= 0x88.
TIME_LT_0x88: ; 0C:103F, 0x01903F
    LDA #$99 ; Seed extra.
EXTRA_SEEDED: ; 0C:1041, 0x019041
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear attrs.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$FC ; Keep 1111.1100
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back.
EXIT_MOVE: ; 0C:1057, 0x019057
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x53_SUBSWITCH_F: ; 0C:105A, 0x01905A
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x53_SUB_0x0E_SWITCH_A)
    HIGH(STATE_0x53_SUB_0x0E_SWITCH_A)
    LOW(STATE_0x53_SUB_0x0E_SWITCH_B)
    HIGH(STATE_0x53_SUB_0x0E_SWITCH_B)
    LOW(STATE_0x53_SUB_0x0E_SWITCH_C)
    HIGH(STATE_0x53_SUB_0x0E_SWITCH_C)
STATE_0x53_SUB_0x0E_SWITCH_A: ; 0C:1066, 0x019066
    LDA #$5E
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$5D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    LDA #$4B
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$FC ; Keep 1111.1100
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load status.
    AND #$04 ; Keep bit.
    BNE BIT_SET ; != 0, set, goto.
    LDA #$02 ; Val.
    BNE VAL_SEEDED ; Always taken.
BIT_SET: ; 0C:108C, 0x01908C
    LDA #$FE ; Alt val.
VAL_SEEDED: ; 0C:108E, 0x01908E
    STA OBJ_POS_X_DELTA?[18],X ; Store attr.
    LDA #$FA
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set attr.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    INC 3DB_UNKNOWN ; ++ ??
    JSR SOUND_RESET/INIT_RTN? ; Reset.
    LDA #$58
    JSR SND_BANKED_DISPATCH ; Play sound.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x53_SUB_0x0E_SWITCH_B: ; 0C:10A7, 0x0190A7
    LDA #$80 ; Mod vals.
    LDY #$00
    JSR ADD_A/Y_TO_OBJ_DELTA? ; Mod.
    JSR MOVE_OBJ_POS_DELTA_AMOUNT? ; Do.
    LDA 4C6_OBJ_UNK[18],X ; Load
    BMI VAL_NEGATIVE ; If negative, goto.
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
    JSR CLEAR_OBJ_ATTRS_UNK_154F
    JSR CLEAR_OBJ_ATTRS_DELTAS?
    STA 4D8_OBJ_UNK[18],X ; These too.
    STA 4C6_OBJ_UNK[18],X
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
VAL_NEGATIVE: ; 0C:10CB, 0x0190CB
    LDA OBJ_POS_X_DELTA?[18],X ; Load
    BPL VAL_POSITIVE ; If positive, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$31 ; If _ #$31
    BCS EXIT_MOVE ; >=, goto.
    BCC EXIT_ATTR_CLEAR ; <, goto.
VAL_POSITIVE: ; 0C:10D9, 0x0190D9
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$D0 ; If _ #$D0
    BCC EXIT_MOVE ; <, goto.
EXIT_ATTR_CLEAR: ; 0C:10E0, 0x0190E0
    JSR CLEAR_OBJ_ATTRS_UNK_1546 ; Clear attrs.
EXIT_MOVE: ; 0C:10E3, 0x0190E3
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x53_SUB_0x0E_SWITCH_C: ; 0C:10E6, 0x0190E6
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load.
    AND #$03 ; Keep bits.
    BNE BITS_SET ; If set, goto.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Move on clear. Every 4 times, does.
BITS_SET: ; 0C:10F0, 0x0190F0
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    AND #$01 ; Keep bit.
    TAY ; To Y index.
    LDA OBJ_ANIM_DATA,Y
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set attr.
    INC OBJ_ANIM_HOLD_TIMER?[18],X ; Set hold.
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load val.
    BPL EXIT_MOVE ; If positive, exit.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
EXIT_MOVE: ; 0C:1107, 0x019107
    JMP OBJECT_X_MOVE? ; Move, abuse RTS.
OBJ_ANIM_DATA: ; 0C:110A, 0x01910A
    .db 4B
    .db 00
ANIM_HOLD_FILE_INIT: ; 0C:110C, 0x01910C
    LDA #$00
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Init to clear.
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
ANIM_HOLD_FILE: ; 0C:1114, 0x019114
    LDA OBJ_ANIM_HOLD_TIMER?[18],X ; Load from obj.
    BNE VAL_NONZERO ; != 0, leave.
    LDA FPTR_L,Y ; Move ptr.
    STA TMP_00
    LDA FPTR_H,Y
    STA TMP_01
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Next step.
    LDY #$00 ; Stream.
    LDA [TMP_00],Y ; Load from file.
    CMP 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; If _ attr.
    BCS USE_STEP_ASIS ; >= goto.
    LDA #$00
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Clear step.
USE_STEP_ASIS: ; 0C:1134, 0x019134
    INY ; Stream++
    LDA [TMP_00],Y ; Move ptr from stream.
    STA TMP_02
    INY
    LDA [TMP_00],Y
    STA TMP_03
    INY
    LDA [TMP_00],Y ; Move hold from file.
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    LDY 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Step from obj.
    LDA [TMP_02],Y ; Load from Anim subptr.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set.
VAL_NONZERO: ; 0C:114C, 0x01914C
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; --
    RTS ; Leave.
FPTR_L: ; 0C:1150, 0x019150
    LOW(FILE_A)
FPTR_H: ; 0C:1151, 0x019151
    HIGH(FILE_A)
    LOW(FILE_B)
    HIGH(FILE_B)
    LOW(FILE_C)
    HIGH(FILE_C)
FILE_A: ; 0C:1156, 0x019156
    .db 02 ; FMT: Step, Anim Dptr, Anim hold.
    LOW(ANIMS_A)
    HIGH(ANIMS_A)
    .db 08
FILE_B: ; 0C:115A, 0x01915A
    .db 01
    LOW(ANIMS_B)
    HIGH(ANIMS_B)
    .db 06
FILE_C: ; 0C:115E, 0x01915E
    .db 02
    LOW(ANIMS_C)
    HIGH(ANIMS_C)
    .db 04
ANIMS_A: ; 0C:1162, 0x019162
    .db 43
    .db 41
    .db 42
ANIMS_B: ; 0C:1165, 0x019165
    .db 45
    .db 44
ANIMS_C: ; 0C:1167, 0x019167
    .db 49
    .db 47
    .db 48
CHECK_OBJS[0x0D-0x12]_DISABLED_RET_CS_PASS: ; 0C:116A, 0x01916A
    LDY #$0D ; Obj start.
LOOP: ; 0C:116C, 0x01916C
    LDA OBJ_ENABLED_STATE+MORE?[18],Y ; Load enable.
    BNE RTS_CC ; != 0, 
    INY ; Next obj.
    CPY #$12 ; If _ Obj[#]
    BCC LOOP ; <, loop all.
    RTS ; Rts CS. All disabled.
RTS_CC: ; 0C:1177, 0x019177
    CLC
    RTS ; Rts CC.
OBJ_STATE_0x54_HANDLER: ; 0C:1179, 0x019179
    LDA OBJ_SECONDARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x54_SWITCH_A)
    HIGH(STATE_0x54_SWITCH_A)
    LOW(STATE_0x54_SWITCH_B)
    HIGH(STATE_0x54_SWITCH_B)
STATE_0x54_SWITCH_A: ; 0C:1183, 0x019183
    LDA #$4C
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X ; Set attr.
    LDA #$96
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load Xobj.
    AND #$04 ; Test bit.
    BNE BIT_SET ; != 0, set, goto.
    LDA #$FD ; Val.
    BNE VAL_SEEDED ; Always taken.
BIT_SET: ; 0C:119D, 0x01919D
    LDA #$02 ; Load val.
VAL_SEEDED: ; 0C:119F, 0x01919F
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA #$80
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attr.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    JMP OBJECT_X_MOVE? ; Goto, abuse RTS.
STATE_0x54_SWITCH_B: ; 0C:11AD, 0x0191AD
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; ++
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Load
    CMP #$08 ; If _ #$08
    BCC LT_0x08 ; <, goto.
    INC STATUS_FLAGS_B/OBJ_FOCUS[18],X ; ++
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load from Xobj.
    CMP #$05 ; If _ #$05
    BCC VAL_LT_0x05 ; <, goto.
    LDA #$04
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Set attr.
VAL_LT_0x05: ; 0C:11C9, 0x0191C9
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear.
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load
    CLC ; Prep add.
    ADC #$4C ; Add with.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    SEC ; Prep sub.
    SBC #$4D ; Sub with.
    BMI LT_0x08 ; If negative, goto.
    CLC ; Prep add.
    ADC #$9A ; Add with.
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
LT_0x08: ; 0C:11E2, 0x0191E2
    JSR OBJECT_X_MOVE? ; Do.
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Prep add.
    AND #$03 ; Keep bits.
    BEQ RTS ; If not set, leave.
    JMP INIT_OBJECT[X]_DATA_FULL ; Die.
RTS: ; 0C:11EF, 0x0191EF
    RTS
OBJ_STATE_0x5D_HANDLER: ; 0C:11F0, 0x0191F0
    LDA OBJ_TERTIARY_SWITCH?[18],X
    JSR SWITCH_CODE_PTRS_PAST_JSR
    LOW(STATE_0x51_ALTSWITCH_A) ; Uses other state switches.
    HIGH(STATE_0x51_ALTSWITCH_A)
    LOW(STATE_0x51_ALTSWITCH_B)
    HIGH(STATE_0x51_ALTSWITCH_B)
    LOW(STATE_0x51_ALTSWITCH_C)
    HIGH(STATE_0x51_ALTSWITCH_C)
    LOW(STATE_0x51_ALTSWITCH_D)
    HIGH(STATE_0x51_ALTSWITCH_D)
    LOW(STATE_0x51_ALTSWITCH_E)
    HIGH(STATE_0x51_ALTSWITCH_E)
    LOW(STATE_0x51_ALTSWITCH_F)
    HIGH(STATE_0x51_ALTSWITCH_F)
    LOW(STATE_0x51_ALTSWITCH_G)
    HIGH(STATE_0x51_ALTSWITCH_G)
    LOW(STATE_0x51_ALTSWITCH_H)
    HIGH(STATE_0x51_ALTSWITCH_H)
    LOW(STATE_0x51_ALTSWITCH_I)
    HIGH(STATE_0x51_ALTSWITCH_I)
    LOW(STATE_0x51_ALTSWITCH_J)
    HIGH(STATE_0x51_ALTSWITCH_J)
    LOW(STATE_0x51_ALTSWITCH_K)
    HIGH(STATE_0x51_ALTSWITCH_K)
    LOW(STATE_0x51_ALTSWITCH_L)
    HIGH(STATE_0x51_ALTSWITCH_L)
    LOW(STATE_0x51_ALTSWITCH_M)
    HIGH(STATE_0x51_ALTSWITCH_M)
    LOW(STATE_0x5D_UNIQUE_SWITCH)
    HIGH(STATE_0x5D_UNIQUE_SWITCH)
STATE_0x5D_UNIQUE_SWITCH: ; 0C:1212, 0x019212
    LDY #$0F
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Set color.
    JSR INIT_OBJECT[X]_DATA_FULL ; Kill object.
    LDA #$70
    JSR SND_BANKED_DISPATCH ; Play sound.
    JMP L_0D:02A2 ; Goto.
OBJ_STATE_0x55_HANDLER: ; 0C:1222, 0x019222
    STX OBJ_HANDLER_FOCUS_SCRATCHPAD ; Save to scratch.
    LDA #$07
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    JSR OBJ_MULTISWITCH ; Do.
    LDA OBJECT_DATA_EXTRA_B?[18],X
    BEQ EXIT_JMP ; == 0 now, goto.
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    CMP #$04 ; If _ #$04.
    BCS EXIT_JMP ; >=, goto.
    LDA ARR_SPRITE_OBJ_TIMER?+1 ; Load.
    LSR A ; Shift.
    BCS EXIT_JMP ; If shifted 1, goto.
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do rtn.
    LSR A ; Shift A.
    BCS EXIT_SOUND ; Shifted 1, do.
EXIT_JMP: ; 0C:1245, 0x019245
    JMP MISC_OBJ_END ; Goto.
EXIT_SOUND: ; 0C:1248, 0x019248
    LDA #$2C
    JSR SND_BANKED_DISPATCH ; PLay sound.
    JMP FOCUS_CHANGE ; Goto.
OBJ_STATE_0x56_HANDLER: ; 0C:1250, 0x019250
    LDA 544_OBJ_UNK_POS_DELTA?+17,X ; Move from Obj[17] to Xobj.
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    LDA OBJ_POS_Y_CONFIRMED+17,X ; 2x
    STA OBJ_POS_X_CONFIRMED[18],X
    LDA OBJ_POS_X_SUBPIXEL?+17,X ; 3x
    STA OBJ_POS_Y_CONFIRMED[18],X
    LDA #$A2 ; Anim.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    RTS
OBJ_MULTISWITCH: ; 0C:1268, 0x019268
    LDA OBJ_SECONDARY_SWITCH?[18],X
    ASL A
    TAY
    LDA PTRS_UNK_L,Y
    STA TMP_00
    LDA PTRS_UNK_H,Y
    STA TMP_01
    LDA OBJ_TERTIARY_SWITCH?[18],X
    ASL A
    TAY
    LDA [TMP_00],Y
    STA TMP_02
    INY
    LDA [TMP_00],Y
    STA TMP_03
    JMP [TMP_02]
PTRS_UNK_L: ; 0C:1288, 0x019288
    LOW(OLD_MS_A) ; This is the old/alt multiswitch.
PTRS_UNK_H: ; 0C:1289, 0x019289
    HIGH(OLD_MS_A)
    LOW(OLD_MS_B)
    HIGH(OLD_MS_B)
    LOW(OLD_MS_C)
    HIGH(OLD_MS_C)
    LOW(OLD_MS_C)
    HIGH(OLD_MS_C)
    LOW(OLD_MS_C)
    HIGH(OLD_MS_C)
    LOW(OLD_MS_D)
    HIGH(OLD_MS_D)
OLD_MS_A: ; 0C:1294, 0x019294
    LOW(RTN_A) ; Init. LDA #$00 world record.
    HIGH(RTN_A)
OLD_MS_B: ; 0C:1296, 0x019296
    LOW(RTN_A)
    HIGH(RTN_A)
OLD_MS_C: ; 0C:1298, 0x019298
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
OLD_MS_C: ; 0C:129E, 0x01929E
    LOW(RTN_A) ; Stuck if ever here, lol.
    HIGH(RTN_A)
OLD_MS_D: ; 0C:12A0, 0x0192A0
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
RTN_A: ; 0C:12A6, 0x0192A6
    .db 60 ; Leave.
RTN_C: ; 0C:12A7, 0x0192A7
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; --
    BNE RTS ; != 0, goto.
    JSR INIT_OBJECT[X]_DATA_FULL ; Kill object.
RTS: ; 0C:12AF, 0x0192AF
    RTS ; Leave.
RTN_A: ; 0C:12B0, 0x0192B0
    LDA #$03
    STA 707_SWITCHED_ON?? ; Set.
    LDY #$06
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Set color.
    LDA #$56
    STA OBJ_ENABLED_STATE+MORE?+1,X ; Set pair state.
    LDA #$01
    STA 556_OBJ_STATUS_FLAGS_A[18],X ; Set attr.
    LDA #$30
    STA OBJ_POS_X_CONFIRMED[18],X ; Set.
    LDA #$B0
    STA OBJ_POS_X??[18],X ; Set.
    LDA #$D0
    STA 4C6_OBJ_UNK[18],X ; Set attr.
    JSR MOVE_Y_FINALIZE ; Do.
    JSR SET_GFX/ANIM/MISC ; Do.
    LDA #$64
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Clear attrs.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    LDA #$14
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Set pair.
    LDA #$00
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Clear these. Ugh, why not done above, avoid extra LDA. :(
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    STA 710_BOSS_WHICH_HIT?
    STA 711_UNK
    LDA #$00 ; Mistake for 3rd time, LDA #$00 AGAIN.
    STA ARR_SPRITE_OBJ_TIMER?+1
    STA 704_OBJ_USE_UNK
    LDA #$FE
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA #$C0
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attr.
    LDA #$00 ; Wtf this code sucks.
    STA 59E_OBJ_UNK/EXTRA_TIMER+1,X ; Clear pair.
    STA STATUS_FLAGS_B/OBJ_FOCUS+1,X
    JSR PAIR_HELPER_ATTR_UNK ; Do sub.
    LDA #$05
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Set hold.
    LDA #$00 ; Mistake billionth LDA #$00. -_-
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Clear.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDA #$60
    JSR SND_BANKED_DISPATCH ; Play sound.
    RTS ; Leave.
RTN_A: ; 0C:1329, 0x019329
    JSR XPOS_RTN_RET_?? ; Do rtn.
    BCC RET_CC ; CC, goto.
    LDA #$00
    STA 556_OBJ_STATUS_FLAGS_A[18],X ; Clear.
RET_CC: ; 0C:1333, 0x019333
    LDA 556_OBJ_STATUS_FLAGS_A[18],X ; Load
    BNE EXIT_JMP ; If set, leave.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$A0 ; If _ #$A0
    BCC EXIT_STATE_MOVE_POS+ATTRS_IDK ; <, goto.
EXIT_JMP: ; 0C:133F, 0x01933F
    JMP SET_GFX/ANIM/MISC ; Goto, abuse RTS.
SET_GFX/ANIM/MISC: ; 0C:1342, 0x019342
    LDA #$2C
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX.
    LDA #$2D
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; --
    BPL HOLD_POSITIVE ; If positive, goto.
    LDA #$06
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Set hold.
    INC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; ++
HOLD_POSITIVE: ; 0C:1357, 0x019357
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    AND #$04 ; Swap bit.
    LSR A ; >> 1, /2. 0x00 / 0x02
    STA TMP_00 ; Store to TMP.
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    AND #$01 ; Keep only 0000.0001
    ORA TMP_00 ; Set bit.
    CLC ; Prep add.
    ADC #$05 ; Add with.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set as anim.
    LDY 59E_OBJ_UNK/EXTRA_TIMER+1,X ; Load from pair.
    BEQ RTS ; == 0, leave.
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load from Xobj.
    AND #$01 ; Keep bit.
    CLC ; Prep add.
    ADC RTS,Y ; Add with RTS. Mistake? 0x60/0xA0, idk?? TODO
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim disp.
RTS: ; 0C:137D, 0x01937D
    RTS ; Leave.
    LDY #$9E
EXIT_STATE_MOVE_POS+ATTRS_IDK: ; 0C:1380, 0x019380
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set secondary.
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC #$1A ; -= 0x1A
    STA OBJ_POS_X_SUBPIXEL?[18],X ; Store back.
    LDA OBJ_POS_X??[18],X ; Load
    STA 4B4_OBJ_SPEED?[18],X ; Store to.
    LDA #$00
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Clear.
    LDA #$02
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Set attr.
    RTS ; Leave.
SET_PAIR_ATTRS_IF_OBJ_PAIR_FOUND: ; 0C:13A4, 0x0193A4
    JSR OBJ_SEARCH_UNUSED_PAIR_RET_CS_FAIL ; Get obj pair.
    LDX OBJ_HANDLER_FOCUS_SCRATCHPAD ; Clobber return.
    BCS RTS ; Fail, leave.
    LDA #$02
    STA 59E_OBJ_UNK/EXTRA_TIMER+1,X ; Set pair attrs if exist, since we clobbered ret. Prob intended.
    LDA #$28
    STA OBJ_ANIM_HOLD_TIMER?+1,X
RTS: ; 0C:13B6, 0x0193B6
    RTS ; Leave.
SPAWN_OBJ+??: ; 0C:13B7, 0x0193B7
    LDA 59E_OBJ_UNK/EXTRA_TIMER+1,X ; Load pair.
    BEQ RTS ; == 0, leave.
    DEC OBJ_ANIM_HOLD_TIMER?+1,X ; --
    BPL ALT_PATH ; If positive, goto.
    LDA #$28
    STA OBJ_ANIM_HOLD_TIMER?+1,X ; Reset val.
    DEC 59E_OBJ_UNK/EXTRA_TIMER+1,X ; --
    JMP RTS ; Goto.
ALT_PATH: ; 0C:13CC, 0x0193CC
    LDA OBJ_ANIM_HOLD_TIMER?+1,X ; Load attr.
    CMP #$14 ; If _ #$14
    BNE RTS ; !=, leave.
    LDA 59E_OBJ_UNK/EXTRA_TIMER+1,X ; Load attr.
    CMP #$01 ; If _ #$01
    BNE RTS ; !=, leave.
    JSR CROSSBANK_SPAWN_OBJECT_RTN ; Spawn object.
    LDA TMP_17 ; Load
    BEQ RTS ; Not spawned, leave.
    LDA #$14
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Set pair attr.
RTS: ; 0C:13E6, 0x0193E6
    RTS ; Leave.
SET_SWITCHES_HELPER_707_C_OTHER: ; 0C:13E7, 0x0193E7
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
    RTS
RTN_A: ; 0C:13F2, 0x0193F2
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    JMP RTN_B ; Do rtn B. Lol, what a fix. Not mistake but odd. Directly below, lol.
RTN_B: ; 0C:13F8, 0x0193F8
    LDA 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Load
    BEQ VAL_EQ_ZERO ; == 0, goto.
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; --
VAL_EQ_ZERO: ; 0C:1400, 0x019400
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load
    AND #$7F ; Keep lower.
    BNE VAL_NONZERO
    INC OBJECT_DATA_HEALTH?+1,X ; Pair attr++
VAL_NONZERO: ; 0C:1409, 0x019409
    LDA OBJECT_DATA_HEALTH?+1,X ; Load pair.
    AND #$03 ; Keep 0x03
    CMP #$02 ; If _ #$02
    BCS QUARTER_CHANCE_ROUTINE ; >=, goto.
    ASL A ; << 1, *2.
    TAY ; To Y index.
    LDA OBJ_DATA_A,Y
    STA OBJECT_DATA_EXTRA_B?+1,X ; Set attrs from data.
    LDA OBJ_DATA_B,Y
    STA OBJ_TERTIARY_SWITCH?+1,X
    JMP ALT_ENTRY ; Goto.
QUARTER_CHANCE_ROUTINE: ; 0C:1423, 0x019423
    JSR FOCUS_EITHER_PLAYER_HELPER_RET_CS_FAIL_TO_FOCUS ; Do.
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Get focus.
    LDA OBJ_POS_X_CONFIRMED[18],Y ; Focus val.
    STA OBJECT_DATA_EXTRA_B?+1,X ; To pair.
    LDA OBJ_POS_X??[18],Y ; Focus val.
    STA OBJ_TERTIARY_SWITCH?+1,X ; To pair.
ALT_ENTRY: ; 0C:1435, 0x019435
    JSR DIFF_ATTRS ; Do subs.
    JSR MOVEMENT_HELPER? ; Do.
    JSR MOVEMENT_IN_RANGE_HELPER ; Do.
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load
    AND #$03 ; Keep 0000.0011
    BNE BIT_SET
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Pair--
    BNE BIT_SET ; Nonzero still, goto.
    JSR SET_PAIR_ATTRS_IF_OBJ_PAIR_FOUND ; Do.
BIT_SET: ; 0C:144C, 0x01944C
    LDA STATUS_FLAGS_B/OBJ_FOCUS+1,X ; Load pair.
    BNE MAIN_PATH ; != 0, goto.
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX+1,X ; Load pair.
    CMP #$7D ; If _ #$7D
    BNE MAIN_PATH ; !=, goto.
    LDA 59E_OBJ_UNK/EXTRA_TIMER+1,X ; Load pair.
    BNE MAIN_PATH ; != 0, goto.
    JMP EXIT_MOVE_STATE ; Do.
MAIN_PATH: ; 0C:1460, 0x019460
    JSR ATTR_MOD_RTN+MORE ; Do.
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    JSR TMP_FILL_BASED_ON_ATTR_VAL_UNK ; Do ??
    CLC ; Prep add.
    LDA TMP_08 ; Load
    ADC OBJ_POS_X_SUBPIXEL?[18],X ; Add with.
    CMP #$1C ; If _ #$1C
    BCS VAL_GT_0x1C
    LDA #$1C ; Min.
VAL_GT_0x1C: ; 0C:1475, 0x019475
    CMP #$E4 ; If _ #$E4
    BCC VAL_LT_0xE4 ; <, goto.
    LDA #$E4 ; Max.
VAL_LT_0xE4: ; 0C:147B, 0x01947B
    STA OBJ_POS_X_CONFIRMED[18],X ; Set pos.
    CLC ; Prep add.
    LDA TMP_09 ; Load
    ADC 4B4_OBJ_SPEED?[18],X ; Add with.
    STA OBJ_POS_X??[18],X ; Store to.
    JSR MOVE_Y_FINALIZE ; Do.
    JSR ATTR_WATCH_UNK ; Do.
    JSR STEPPED_RTN_ATTR_MANIP ; Do.
    JSR SET_GFX/ANIM/MISC ; Do.
    JMP SPAWN_OBJ+?? ; Goto.
ATTR_WATCH_UNK: ; 0C:1496, 0x019496
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load.
    LSR A ; >> 1, /2.
    BCS SHIFTED_ONE ; Shifed off 1, goto.
    INC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; ++
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    CMP #$78 ; If _ #$78
    BCC JMP_RTS ; <, goto.
    LDA #$00
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Clear if reached.
JMP_RTS: ; 0C:14AB, 0x0194AB
    JMP RTS ; Goto. Why JMP to RTS's, ugh.
SHIFTED_ONE: ; 0C:14AE, 0x0194AE
    DEC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; --
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load val.
    CMP #$78 ; If _ #$78
    BCC RTS ; <, goto.
    LDA #$77
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Set if reached.
RTS: ; 0C:14BD, 0x0194BD
    RTS ; Leave.
STEPPED_RTN_ATTR_MANIP: ; 0C:14BE, 0x0194BE
    LDA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Load
    BEQ EXTENSION_ADD ; == 0, goto.
    CMP #$3C ; If _ #$3C
    BEQ EXTENSION_SUB ; ==, goto.
RTS: ; 0C:14C7, 0x0194C7
    RTS ; Leave.
EXTENSION_ADD: ; 0C:14C8, 0x0194C8
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load from Xobj.
    CMP OBJECT_DATA_EXTRA_B?+1,X ; If _ pair
    BCS RTS ; >=, goto.
    CLC ; Prep add.
    LDA OBJ_POS_X_SUBPIXEL?[18],X ; Load
    ADC #$34 ; Add val.
    BCS RTS ; Overflow, leave.
    CMP #$1C ; If _ #$1C
    BCC RTS ; <, leave.
    CMP #$E4 ; If _ #$E4
    BCS RTS ; >=, leave.
    STA OBJ_POS_X_SUBPIXEL?[18],X ; Store, 0x1C-0xE4
    SEC ; Prep sub.
    LDA #$3C ; Load val.
    SBC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; -= Val.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Store back.
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load attr.
    EOR #$01 ; Invert bit.
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Store back.
RTS: ; 0C:14F4, 0x0194F4
    RTS ; Leave.
EXTENSION_SUB: ; 0C:14F5, 0x0194F5
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP OBJECT_DATA_EXTRA_B?+1,X ; If _ pair
    BCC RTS ; <, goto.
    SEC ; Prep sub.
    LDA OBJ_POS_X_SUBPIXEL?[18],X ; Load val.
    SBC #$34 ; Sub.
    BCC RTS ; Underflow, leave.
    CMP #$1C ; If _ #$1C
    BCC RTS ; <, leave.
    CMP #$E4 ; If _ #$E4
    BCS RTS ; >=, leave.
    STA OBJ_POS_X_SUBPIXEL?[18],X ; Store, 0x1C-0xE4.
    SEC ; Prep sub.
    LDA #$3C ; Load val.
    SBC 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Subtract.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X ; Store back.
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load attr.
    EOR #$01 ; Invert bit.
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Store back.
RTS: ; 0C:1521, 0x019521
    RTS ; Leave.
ATTR_MOD_RTN+MORE: ; 0C:1522, 0x019522
    LDA STATUS_FLAGS_B/OBJ_FOCUS+1,X ; Load pair.
    BEQ SKIP_UNK ; == 0, goto.
    CMP #$02 ; If _ #$02
    BEQ SKIP_UNK ; ==, goto.
    CMP #$01 ; If _ #$01
    BNE ALT_3+ ; !=, goto.
    LDA #$08 ; Val pair.
    LDY #$00
    JSR ADD_A/Y_TO_ATTRS ; Do.
    LDA 4C6_OBJ_UNK[18],X ; Load
    BPL RTS ; If positive, leave.
    CMP #$F8 ; If _ #$F8
    BCC RTS ; <, leave.
    LDA #$00
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Clear attrs.
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    JMP REENTER_ATTRMOD ; Goto.
ALT_3+: ; 0C:154A, 0x01954A
    LDA #$F8 ; Attrmod.
    LDY #$FF
    JSR ADD_A/Y_TO_ATTRS ; Do.
    LDA 4C6_OBJ_UNK[18],X ; Load
    BPL RTS ; If positive, leave.
    CMP #$D0 ; If _ #$D0
    BCS RTS ; >=, leave.
    LDA #$D0 ; Min?
    STA 4C6_OBJ_UNK[18],X ; Set attr.
    JMP REENTER_ATTRMOD ; Goto.
SKIP_UNK: ; 0C:1562, 0x019562
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load
    AND #$07 ; Keep 0000.0111
    BNE RTS ; If any set, leave. 1 in 8 to fall through.
    DEC 5C2_OBJ_DATA_PTR/MISC_INDEX+1,X ; --
    BNE RTS ; != 0, leave.
REENTER_ATTRMOD: ; 0C:156D, 0x01956D
    INC STATUS_FLAGS_B/OBJ_FOCUS+1,X ; Inc pair.
    LDA STATUS_FLAGS_B/OBJ_FOCUS+1,X ; Load
    AND #$03 ; Range to bits.
    STA STATUS_FLAGS_B/OBJ_FOCUS+1,X ; Store back.
PAIR_HELPER_ATTR_UNK: ; 0C:1578, 0x019578
    LDY STATUS_FLAGS_B/OBJ_FOCUS+1,X ; Y from pair.
    LDA DATA_A,Y ; Load data.
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX+1,X ; Store to pair.
RTS: ; 0C:1581, 0x019581
    RTS ; Leave.
ADD_A/Y_TO_ATTRS: ; 0C:1582, 0x019582
    CLC ; Prep add.
    ADC 544_OBJ_UNK_POS_DELTA?[18],X ; Add val.
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Store to.
    TYA ; Y to A.
    ADC 532_OBJ_UNK_POS_DELTA?[18],X ; Add Y, and carry.
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Store to.
    CLC ; Prep add.
    LDA 544_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4D8_OBJ_UNK[18],X ; Add with.
    STA 4D8_OBJ_UNK[18],X ; Store to.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4C6_OBJ_UNK[18],X ; Carry add.
    STA 4C6_OBJ_UNK[18],X ; Store.
    RTS ; Leave.
DATA_A: ; 0C:15A4, 0x0195A4
    .db FA
    .db 64
    .db 03
    .db 64
EXIT_MOVE_STATE: ; 0C:15A8, 0x0195A8
    LDA #$02
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    LDA #$12
    STA 710_BOSS_WHICH_HIT? ; Set ??
    LDA #$01
    STA 711_UNK ; Set ??
    LDA #$00
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Clear attrs.
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    DEC 5C2_OBJ_DATA_PTR/MISC_INDEX+1,X ; Pair--
    RTS ; Leave.
RTN_C: ; 0C:15C3, 0x0195C3
    JSR SET_GFX/ANIM/MISC ; Do.
    JSR POS_RTN_UNK ; Do.
    LDA 711_UNK ; Load
    BMI EXIT_TERT ; If negative, goto.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    BMI VAL_NEG ; If negative, goto.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    CMP #$01 ; If _ #$01
    BCC RTS ; <, leave. Bad code, BEQ dudes.
    JMP 0C:15E4 ; Goto.
VAL_NEG: ; 0C:15DD, 0x0195DD
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    CMP #$FF ; If _ #$FF
    BCS RTS ; >=, goto.
    LDA #$00 ; Seed invert.
    SEC ; Prep sub.
    SBC 710_BOSS_WHICH_HIT? ; Sub with, inverting.
    STA 710_BOSS_WHICH_HIT? ; Store to.
    JSR POS_RTN_UNK ; Do pos. Not JMP abused, ugh.
RTS: ; 0C:15F0, 0x0195F0
    RTS ; Leave.
EXIT_TERT: ; 0C:15F1, 0x0195F1
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X
    RTS
POS_RTN_UNK: ; 0C:15F7, 0x0195F7
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load attr.
    STA TMP_06 ; Store to.
    LDA #$00 ; Val.
    STA TMP_07 ; Set.
    LDA 710_BOSS_WHICH_HIT? ; Load
    BPL 710_POSITIVE ; If positive, goto.
    DEC TMP_07 ; --
710_POSITIVE: ; 0C:1607, 0x019607
    CLC ; Prep add.
    ADC 544_OBJ_UNK_POS_DELTA?[18],X ; Add with.
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Store back.
    LDA TMP_07 ; Load val.
    ADC 532_OBJ_UNK_POS_DELTA?[18],X ; Add with.
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Store to.
    BNE VAL_NE_ZERO ; != 0, goto.
    LDA TMP_06 ; Load val.
    BPL VAL_NE_ZERO ; If positive, goto.
    LDA #$00
    STA 4D8_OBJ_UNK[18],X ; Clear attr.
    DEC 711_UNK ; --
VAL_NE_ZERO: ; 0C:1624, 0x019624
    CLC ; Prep add.
    LDA 544_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4D8_OBJ_UNK[18],X ; Add with.
    STA 4D8_OBJ_UNK[18],X ; Store back.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4C6_OBJ_UNK[18],X ; Carry add.
    STA 4C6_OBJ_UNK[18],X ; Store to.
    CLC ; Prep add.
    ADC OBJ_POS_X??[18],X ; Add to.
    STA OBJ_POS_Y_CONFIRMED[18],X ; Store.
    RTS ; Leave.
    LDA OBJ_POS_X_CONFIRMED[18],X
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    CMP OBJ_POS_X_CONFIRMED[18],Y
    ROL A
    AND #$01
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    STA TMP_00
    LDY 503_OBJ_POS_X_LARGEST?[18],X
    BMI 0C:1657
    EOR #$01
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    LDY TMP_00
    LDA 0C:16A1,Y
    CLC
    ADC OBJ_POS_X_CONFIRMED[18],X
    PHA
    ROR A
    EOR 0C:16A1,Y
    ASL A
    PLA
    BCC 0C:1682
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    EOR #$01
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    LDA TMP_00
    EOR #$01
    STA TMP_00
    TAY
    LDA 0C:16A1,Y
    CLC
    ADC OBJ_POS_X_CONFIRMED[18],X
    STA OBJ_POS_X_SUBPIXEL?[18],X
    LDA OBJ_POS_X??[18],X
    STA 4B4_OBJ_SPEED?[18],X
    ASL TMP_00
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    AND #$01
    ORA TMP_00
    TAY
    LDA 0C:16A3,Y
    STA 5C2_OBJ_DATA_PTR/MISC_INDEX[18],X
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X
    RTS
    .db 1A
    .db E6
    .db 3D
    .db 3B
    .db 01
    .db 77
MOVEMENT_HELPER?: ; 0C:16A7, 0x0196A7
    CLC ; Prep add.
    LDA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Load from obj.
    ADC OBJ_POS_X_SUBPIXEL?+1,X ; Add to pair.
    STA OBJ_POS_X_SUBPIXEL?+1,X ; Store to pair.
    LDA OBJ_POS_X_DELTA?[18],X ; Load from obj.
    ADC OBJ_POS_X_SUBPIXEL?[18],X ; Add with.
    CMP #$1C ; If _ #$1C
    BCC RTS ; <, don't store.
    CMP #$E4 ; If _ #$E4
    BCS RTS ; >=, goto.
    STA OBJ_POS_X_SUBPIXEL?[18],X ; Valid here, store.
RTS: ; 0C:16C2, 0x0196C2
    RTS ; Leave.
MOVEMENT_IN_RANGE_HELPER: ; 0C:16C3, 0x0196C3
    CLC ; Prep add.
    LDA 520_OBJ_POS_X_LARGE?[18],X ; Load val.
    ADC 4B4_OBJ_SPEED?+1,X ; Add with pair.
    STA 4B4_OBJ_SPEED?+1,X ; Store back.
    LDA 503_OBJ_POS_X_LARGEST?[18],X ; Load val.
    ADC 4B4_OBJ_SPEED?[18],X ; Add with.
    STA 4B4_OBJ_SPEED?[18],X ; Store to.
    CMP #$9C ; If _ #$9C
    BCS ALT_CMP ; >=, goto.
    LDA #$9C ; Seed min.
    STA 4B4_OBJ_SPEED?[18],X ; Fix.
    BNE RTS ; Always taken. Bad code, just RTS here.
ALT_CMP: ; 0C:16E1, 0x0196E1
    CMP #$AD ; If _  #$AD
    BCC RTS ; <, goto.
    LDA #$AC
    STA 4B4_OBJ_SPEED?[18],X ; Fix.
RTS: ; 0C:16EA, 0x0196EA
    RTS ; Leave.
    CLC
    LDA 520_OBJ_POS_X_LARGE?[18],X
    ADC 4B4_OBJ_SPEED?+1,X
    STA 4B4_OBJ_SPEED?+1,X
    LDA 503_OBJ_POS_X_LARGEST?[18],X
    ADC OBJ_POS_X??[18],X
    STA OBJ_POS_X??[18],X
    CMP #$83
    BCS 0C:1709
    LDA #$83
    STA OBJ_POS_X??[18],X
    BNE 0C:1712
    CMP #$C6
    BCC 0C:1712
    LDA #$C5
    STA OBJ_POS_X??[18],X
    RTS
DIFF_ATTRS: ; 0C:1713, 0x019713
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    SEC ; Prep sub.
    SBC OBJECT_DATA_EXTRA_B?+1,X ; Sub pair val.
    BPL POSITIVE ; Positive, goto.
    STA TMP_00 ; Store.
    LDA #$00 ; Prep diff find.
    SEC ; Prep sub.
    SBC TMP_00 ; Sub with.
POSITIVE: ; 0C:1723, 0x019723
    STA TMP_10 ; Store abs(diff)
    CMP #$10 ; If _ #$10
    LDA #$00 ; Prep val.
    BCC VAL_FOUND ; <, goto.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP OBJECT_DATA_EXTRA_B?+1,X ; CMP to attr.
    LDA #$02 ; Val.
    BCS VAL_FOUND ; Pos >= attr.
    LDA #$04 ; Alt val.
VAL_FOUND: ; 0C:1737, 0x019737
    TAY ; To index.
    LDA DATA_A,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attrs from arr.
    LDA DATA_B,Y
    STA OBJ_POS_X_DELTA?[18],X
    LDA OBJ_POS_X??[18],X ; Load
    SEC ; Prep sub.
    SBC OBJ_TERTIARY_SWITCH?+1,X ; -= pair tert.
    BPL SUB_POSITIVE ; If positive, goto.
    STA TMP_00 ; Store neg.
    LDA #$00 ; Prep diff.
    SEC ; Prep sub.
    SBC TMP_00 ; Get diff.
SUB_POSITIVE: ; 0C:1754, 0x019754
    STA TMP_11 ; Store abs(diff)
    CMP #$08 ; If _ #$08
    LDA #$00
    BCC VAL_FOUND ; <, goto.
    LDA OBJ_POS_X??[18],X ; Load
    CMP OBJ_TERTIARY_SWITCH?+1,X ; If _ attr
    LDA #$02 ; Val
    BCS VAL_FOUND ; >=, goto.
    LDA #$04 ; Val.
VAL_FOUND: ; 0C:1768, 0x019768
    TAY ; Val to index.
    LDA DATA_A,Y
    STA 520_OBJ_POS_X_LARGE?[18],X ; Set attrs from vals.
    LDA DATA_B,Y
    STA 503_OBJ_POS_X_LARGEST?[18],X
    RTS ; Leave.
OBJ_DATA_A: ; 0C:1776, 0x019776
    .db 30
OBJ_DATA_B: ; 0C:1777, 0x019777
    .db C0
    .db C0
    .db A0
    .db 00
    .db 00
    .db 00
    .db 00
DATA_A: ; 0C:177E, 0x01977E
    .db 00
DATA_B: ; 0C:177F, 0x01977F
    .db 00
    .db 80
    .db FF
    .db 80
    .db 00
DATA_A: ; 0C:1784, 0x019784
    .db 00
DATA_B: ; 0C:1785, 0x019785
    .db 00
    .db A0
    .db FF
    .db 60
    .db 00
TMP_FILL_BASED_ON_ATTR_VAL_UNK: ; 0C:178A, 0x01978A
    STA TMP_00 ; A to.
    LDY #$00
    STY TMP_01 ; Clear.
    CMP #$3D ; If _ #$3D
    BCC LT_A ; <, goto.
    LDA #$78 ; Load. SEC implied.
    SBC TMP_00 ; Subtract.
    STA TMP_00 ; Store to.
    LDY #$02 ; Val for tmp.
    STY TMP_01
LT_A: ; 0C:179E, 0x01979E
    CMP #$1F ; If _ #$1F
    BCC LT_B ; <, goto.
    LDA #$3C ; Load. SEC implied.
    SBC TMP_00 ; Sub with.
    STA TMP_00 ; Store back.
    LDA TMP_01 ; Load val.
    ORA #$01 ; Set bit.
    STA TMP_01 ; Store back.
LT_B: ; 0C:17AE, 0x0197AE
    LDA TMP_00 ; Load val.
    ASL A ; *2, word index.
    TAY ; To index.
    LDA DATA_A,Y ; Move data to TMP.
    STA TMP_08
    LDA DATA_B,Y
    STA TMP_09
    LSR TMP_01 ; Shift made.
    BCC BIT_NOT_SET
    LDA #$00 ; Prep invert. SEC implied.
    SBC TMP_08 ; Invert.
    STA TMP_08 ; Store back.
BIT_NOT_SET: ; 0C:17C6, 0x0197C6
    LSR TMP_01 ; Shift again.
    BCC RTS ; Not set, goto.
    LDA #$00 ; Prep invert. SEC implied.
    SBC TMP_09 ; Invert.
    STA TMP_09 ; Store back.
RTS: ; 0C:17D0, 0x0197D0
    RTS ; Leave.
DATA_A: ; 0C:17D1, 0x0197D1
    .db 1A
DATA_B: ; 0C:17D2, 0x0197D2
    .db 00
    .db 1A
    .db 02
    .db 1A
    .db 04
    .db 1A
    .db 06
    .db 1A
    .db 08
    .db 1A
    .db 0A
    .db 19
    .db 0C
    .db 19
    .db 0E
    .db 18
    .db 10
    .db 18
    .db 12
    .db 17
    .db 14
    .db 16
    .db 16
    .db 15
    .db 17
    .db 14
    .db 19
    .db 14
    .db 1B
    .db 13
    .db 1C
    .db 12
    .db 1E
    .db 10
    .db 1F
    .db 0F
    .db 20
    .db 0E
    .db 21
    .db 0D
    .db 23
    .db 0C
    .db 24
    .db 0A
    .db 24
    .db 09
    .db 25
    .db 08
    .db 26
    .db 06
    .db 27
    .db 05
    .db 27
    .db 04
    .db 28
    .db 02
    .db 28
    .db 01
    .db 28
    .db 00
    .db 28
OBJ_STATE_0x57_HANDLER: ; 0C:180F, 0x01980F
    LDA 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Load pair.
    BEQ PAIR_EQ_ZERO ; ==, goto.
    DEC 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; -- if nonzero.
PAIR_EQ_ZERO: ; 0C:1817, 0x019817
    LDA #$05
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    JSR RTN_MULTISWITCH ; Do.
    LDA 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Load pair.
    BNE EXIT ; != 0, goto.
    LDA OBJECT_DATA_EXTRA_B?[18],X ; Load
    BEQ EXIT ; == 0, goto.
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    TAY ; Return to Y index.
    BEQ EXIT ; == 0, goto.
    LSR A ; >> 1
    BCC EXIT ; Bit shifted off not set, goto.
    LDA #$2F
    JSR SND_BANKED_DISPATCH ; Play sound.
    JMP FOCUS_NOHEALTH_MISC
EXIT: ; 0C:183A, 0x01983A
    JMP MISC_OBJ_END ; Goto.
RTN_MULTISWITCH: ; 0C:183D, 0x01983D
    LDA OBJ_SECONDARY_SWITCH?[18],X ; Load
    ASL A ; Make into word index.
    TAY
    LDA MS_FILES_L,Y ; Move first ptr.
    STA TMP_00
    LDA MS_FILES_H,Y
    STA TMP_01
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Load tert.
    ASL A ; To word index.
    TAY ; File index.
    LDA [TMP_00],Y ; Move file ptr array to TMP_02
    STA TMP_02
    INY
    LDA [TMP_00],Y
    STA TMP_03
    JMP [TMP_02] ; Run the code.
MS_FILES_L: ; 0C:185D, 0x01985D
    LOW(FILE_A)
MS_FILES_H: ; 0C:185E, 0x01985E
    HIGH(FILE_A)
    LOW(FILE_B)
    HIGH(FILE_B)
    LOW(FILE_C)
    HIGH(FILE_C)
    LOW(FILE_D)
    HIGH(FILE_D)
    LOW(FILE_E)
    HIGH(FILE_E)
    LOW(FILE_F)
    HIGH(FILE_F)
FILE_A: ; 0C:1869, 0x019869
    LOW(RTN_A)
    HIGH(RTN_A)
FILE_B: ; 0C:186B, 0x01986B
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
FILE_C: ; 0C:186F, 0x01986F
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
    LOW(RTN_D)
    HIGH(RTN_D)
FILE_D: ; 0C:1877, 0x019877
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
FILE_E: ; 0C:187B, 0x01987B
    LOW(RTN_A)
    HIGH(RTN_A)
FILE_F: ; 0C:187D, 0x01987D
    LOW(RTN_A)
    HIGH(RTN_A)
    LOW(RTN_B)
    HIGH(RTN_B)
    LOW(RTN_C)
    HIGH(RTN_C)
RTN_A: ; 0C:1883, 0x019883
    LDY #$0E
    JSR UPDATE_PALETTE[0x1C]_WITH_Y_SAVING_XOBJ ; Set color.
    LDA #$50
    STA OBJECT_DATA_HEALTH?[18],X ; Set health.
    LDA #$58
    STA OBJ_ENABLED_STATE+MORE?+1,X ; Set pair enabled.
    LDA #$00
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Set focus.
    LDA ROM_ATTR_A
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Set attr.
    LDA ROM_ATTR_B
    STA OBJ_POS_X_DELTA?[18],X ; Set attr.
    LDA #$FC
    STA 4C6_OBJ_UNK[18],X ; Set attr.
    CLC ; Prep add.
    ADC OBJ_POS_X??[18],X ; Add with.
    STA OBJ_POS_Y_CONFIRMED[18],X ; Store to.
    JSR GFX/ANIM_HELPER ; Do.
    LDA #$00
    STA ARR_SPRITE_OBJ_TIMER?+1 ; Clear.
    STA 704_OBJ_USE_UNK ; Clear.
    STA 705_UNK ; Clear.
    LDA #$3C
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Set attr.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    RTS ; Leave.
GFX/ANIM_HELPER: ; 0C:18C6, 0x0198C6
    LDA #$A4
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4
    LDA #$A5
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$51
    STA OBJ_ANIMATION_DISPLAY[18],X
    RTS
RTN_A: ; 0C:18D4, 0x0198D4
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    JSR EXIT_ANIM_MOD ; Solve.
    DEC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; --
    BNE RTS ; != 0, leave.
    LDA ROM_ATTR_C
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Move attrs from ROM.
    LDA ROM_ATTR_D
    STA OBJ_POS_X_DELTA?[18],X
    LDA ROM_ATTR_C
    STA 520_OBJ_POS_X_LARGE?[18],X
    LDA ROM_ATTR_D
    STA 503_OBJ_POS_X_LARGEST?[18],X
    LDA ROM_ATTR_E
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    LDA ROM_ATTR_F
    STA 532_OBJ_UNK_POS_DELTA?[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
RTS: ; 0C:1908, 0x019908
    RTS ; Leave.
ROM_ATTR_C: ; 0C:1909, 0x019909
    .db 80
ROM_ATTR_D: ; 0C:190A, 0x01990A
    .db 01
ROM_ATTR_E: ; 0C:190B, 0x01990B
    .db 80
ROM_ATTR_F: ; 0C:190C, 0x01990C
    .db FF
RTN_B: ; 0C:190D, 0x01990D
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    JSR XPOS_RTN_RET_?? ; Do.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$E0 ; If _ #$E0
    BCC LT_0xE0
    LDA #$DF ; That's cap.
    STA OBJ_POS_X_CONFIRMED[18],X ; Set cap.
LT_0xE0: ; 0C:1921, 0x019921
    JSR MOVE_UNK_RET_?? ; Do.
    SEC ; Prep sub.
    LDA 544_OBJ_UNK_POS_DELTA?[18],X ; Load
    SBC #$40 ; Sub with.
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Store back.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    SBC #$00 ; Carry sub.
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Store back.
    JSR MOVE_UNK_RET_CS_POS_CS_NEG ; Do.
    LDA 4C6_OBJ_UNK[18],X ; Load
    CMP #$C6 ; If _ #$C6
    BCS VAL_GTE_0xC6 ; >=, goto.
    LDA #$C6 ; That's cap again. But min.
    STA 4C6_OBJ_UNK[18],X ; Min val.
    JSR ADD_MIN_HELPER ; Do.
    INC OBJ_SECONDARY_SWITCH?[18],X ; Move secondary.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    JMP EXIT_GFX ; Skip around. Bad code, BEQ better.
VAL_GTE_0xC6: ; 0C:1952, 0x019952
    JSR ADD_MIN_HELPER ; Do.
    JMP EXIT_ANIM_MOD ; Goto, abuse RTS.
EXIT_GFX: ; 0C:1958, 0x019958
    LDA #$A4
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Gfx swap.
    LDA #$A5
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Mod state.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
    LDA #$14
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Set attr.
    JSR EXIT_ANIM_MOD ; Anim disp.
    JMP FOCUS_EITHER_PLAYER_HELPER_RET_CS_FAIL_TO_FOCUS ; Goto, abuse RTS.
RTN_A: ; 0C:1975, 0x019975
    DEC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; --
    BPL EXIT_ANIM_DISP ; If positive, goto.
    JSR RANDOMNESS ; Random.
    AND #$01 ; Keep bit.
    BNE ALT_EXIT
    JMP STATE/GFX/EXTENSION_EXIT ; Exit A
ALT_EXIT: ; 0C:1984, 0x019984
    JMP SEC/TERT_0x02_HELPER ; Exit B.
EXIT_ANIM_DISP: ; 0C:1987, 0x019987
    JMP EXIT_ANIM_MOD ; Goto.
SEC/TERT_0x02_HELPER: ; 0C:198A, 0x01998A
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X
    LDA #$02
    STA OBJ_TERTIARY_SWITCH?[18],X
    RTS
RTN_C: ; 0C:1995, 0x019995
    JSR FOCUS_L/R_SET_HELPER
    JSR 0C:19BC
    BCC 0C:19D5
    JMP 0C:1A68
FOCUS_L/R_SET_HELPER: ; 0C:19A0, 0x0199A0
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Get focus.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load Xobj.
    CMP OBJ_POS_X_CONFIRMED[18],Y ; If _ Focus. Carry set/clear.
    ROR A ; >> 2. Carry to 0x40.
    ROR A
    EOR #$40 ; Invert
    AND #$40 ; Isolate.
    STA TMP_00 ; Store.
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$BF ; Keep 1011.1111
    ORA TMP_00 ; Set bit.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back.
    RTS ; Leave.
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X
    LDA OBJ_POS_X_CONFIRMED[18],Y
    LDY OBJ_POS_X_CONFIRMED[18],X
    BMI 0C:19CC
    CMP #$60
    LDA #$01
    RTS
    CMP #$A0
    ROL A
    EOR #$01
    LSR A
    LDA #$00
    RTS
    ASL A
    TAY
    LDA ROM_ATTR_A,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA ROM_ATTR_B,Y
    STA OBJ_POS_X_DELTA?[18],X
    INC OBJ_TERTIARY_SWITCH?[18],X
    JMP EXIT_ANIM_MOD
RTN_D: ; 0C:19E9, 0x0199E9
    CLC ; Prep add.
    LDA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Load
    ADC OBJ_POS_X_SUBPIXEL?[18],X ; Add with.
    STA OBJ_POS_X_SUBPIXEL?[18],X ; Store to.
    LDA OBJ_POS_X_DELTA?[18],X ; Load
    ADC OBJ_POS_X_CONFIRMED[18],X ; Carry add.
    STA OBJ_POS_X_CONFIRMED[18],X ; Store to.
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load count.
    AND #$1F ; Keep bits 0001.1111
    BEQ ONE_IN_THIRTY_TWO ; == 0, goto. 1 in 32 chance of.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$20 ; If _ #$20
    BCC 0C:1A0D ; <, goto.
    CMP #$E0 ; If _ #$E0
    BCC ANIM_DISP_MOD ; <, goto.
    LDA #$00
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Clear these attrs.
    STA 520_OBJ_POS_X_LARGE?[18],X
    JSR DIRECTION_HELPER_INVERT_SUB ; Do.
    JMP EXIT_GFX ; Do.
ANIM_DISP_MOD: ; 0C:1A1B, 0x019A1B
    JMP EXIT_ANIM_MOD ; Goto, abuse RTS.
ONE_IN_THIRTY_TWO: ; 0C:1A1E, 0x019A1E
    JSR STATE/GFX/EXTENSION_EXIT ; Do.
    RTS ; Leave.
DIRECTION_HELPER_INVERT_SUB: ; 0C:1A22, 0x019A22
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    EOR #$40
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    RTS
EXIT_TERT/ATTR_CLEAR: ; 0C:1A2B, 0x019A2B
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    RTS
RTN_B: ; 0C:1A39, 0x019A39
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; ++
    LDY 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Index from.
    LDA #$53 ; Val seed.
    CPY #$05 ; Step
    BCC EXIT_SET_ANIM ; <, goto.
    BNE NEXT_LINE_LOL ; Mistake. Goes 1 ahead, rofl.
NEXT_LINE_LOL: ; 0C:1A47, 0x019A47
    LDA #$92
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$55 ; Val.
    CPY #$14 ; Step.
    BCS STEP_ABOVE ; >=, goto.
EXIT_SET_ANIM: ; 0C:1A52, 0x019A52
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    JMP EXIT_ANIM_MOD ; Goto.
STEP_ABOVE: ; 0C:1A58, 0x019A58
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Clear tert.
    LDA #$51
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Clear attr.
    RTS ; Leave.
    PHA ; TODO: Anything go here?
    LDA #$00
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    LDA #$03
    STA 532_OBJ_UNK_POS_DELTA?[18],X
    PLA
    JSR 0C:19D5
    LDA #$03
    STA OBJ_SECONDARY_SWITCH?[18],X
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
    LDA #$80
    STA STATUS_FLAGS_B/OBJ_FOCUS[18],X
    RTS
RTN_A: ; 0C:1A8C, 0x019A8C
    LDA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Load
    BEQ STEP_ZERO ; == 0, goto.
    BMI STEP_ZERO ; Negative, goto.
    DEC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; --
    BEQ NOW_ZERO ; == 0 now, goto.
    LDA STATUS_FLAGS_B/OBJ_FOCUS[18],X ; Load
    BMI STATUS_NEG ; If negatiuve, goto.
    JMP OOB ; Goto.
STATUS_NEG: ; 0C:1AA0, 0x019AA0
    SEC ; Prep sub.
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Get focus obj.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load X attr.
    SBC OBJ_POS_X_CONFIRMED[18],Y ; Subtract Y attr.
    LDY OBJ_POS_X_DELTA?[18],X ; Y from Xobj.
    BMI SUB_NEG ; Subu result neg, goto.
    CMP #$F0 ; If _ #$F0
    BCC OOB ; <, goto.
    JMP EXIT_TERT/ATTR_CLEAR ; Goto.
SUB_NEG: ; 0C:1AB6, 0x019AB6
    CMP #$10 ; If _ #$10
    BCS OOB ; >=, goto.
    JMP EXIT_TERT/ATTR_CLEAR ; Goto.
NOW_ZERO: ; 0C:1ABD, 0x019ABD
    DEC 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; --
    JSR DIRECTION_HELPER_INVERT_SUB ; Invert.
    SEC ; Prep sub.
    LDA #$00 ; Seed invert.
    SBC 544_OBJ_UNK_POS_DELTA?[18],X ; Subtract to invert.
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Store back.
    LDA #$00 ; Load
    SBC 532_OBJ_UNK_POS_DELTA?[18],X ; Sub to invert.
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Store back.
STEP_ZERO: ; 0C:1AD4, 0x019AD4
    CLC ; Prep add.
    LDA 544_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4D8_OBJ_UNK[18],X ; Add.
    STA 4D8_OBJ_UNK[18],X ; Store back.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4C6_OBJ_UNK[18],X ; Carry add.
    STA 4C6_OBJ_UNK[18],X ; Store back.
    LDY 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Step.
    BPL STEP_POSITIVE ; Positive, goto.
    LDA OBJ_POS_X??[18],X ; Load attr.
    LSR A ; >> 4, /16.
    LSR A
    LSR A
    LSR A
    TAY ; To index.
    LDA OBJ_DATA_C,Y ; Load.
    CMP 4C6_OBJ_UNK[18],X ; If _ Attr
    BCC OOB ; <, goto.
    STA 4C6_OBJ_UNK[18],X ; Store higher.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Load
    CMP #$21 ; If _ #$21
    BCC SKIP_JMP ; <, goto.
    CMP #$DF ; If _ #$DF
    BCS SKIP_JMP ; >=, goto.
    JMP OOB ; Goto.
SKIP_JMP: ; 0C:1B0D, 0x019B0D
    LDA #$00
    STA 503_OBJ_POS_X_LARGEST?[18],X ; Clear attrs.
    STA 520_OBJ_POS_X_LARGE?[18],X
    JSR EXIT_GFX ; Do gfx end.
    JMP FOCUS_FIND_SEED_0x80 ; Goto.
STEP_POSITIVE: ; 0C:1B1B, 0x019B1B
    CMP #$E0 ; If _ #$E0
    BCC OOB ; <, goto.
    LDA #$DF
    STA 4C6_OBJ_UNK[18],X ; Set attr.
    LDA #$19
    STA 45A_OBJ_DATA_ENTRY?STATE_STEP?[18],X ; Set step.
OOB: ; 0C:1B29, 0x019B29
    JSR RANGED_MOVE ; Do.
    JSR FOCUS_ATTR_DIFF_RTN ; Do.
    CLC ; Prep add.
    LDA 520_OBJ_POS_X_LARGE?[18],X ; Load
    ADC 4B4_OBJ_SPEED?[18],X ; Add.
    STA 4B4_OBJ_SPEED?[18],X ; Store back.
    LDA 503_OBJ_POS_X_LARGEST?[18],X ; Load
    ADC OBJ_POS_X??[18],X ; Carry add.
    STA OBJ_POS_X??[18],X ; Store back.
    JSR ADD_MIN_HELPER ; Do.
    JMP EXIT_ANIM_MOD ; Goto, abuse RTS.
RANGED_MOVE: ; 0C:1B48, 0x019B48
    CLC ; Prep add.
    LDA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Load
    ADC OBJ_POS_X_SUBPIXEL?[18],X ; Add
    STA OBJ_POS_X_SUBPIXEL?[18],X ; Store.
    LDA OBJ_POS_X_DELTA?[18],X ; Load
    ADC OBJ_POS_X_CONFIRMED[18],X ; Carry add.
    STA OBJ_POS_X_CONFIRMED[18],X ; Store back.
    CMP #$20 ; If _ #$20
    BCS ABOVE_MIN ; >=, goto.
    LDA #$20
    STA OBJ_POS_X_CONFIRMED[18],X ; Store min.
    BNE RTS
ABOVE_MIN: ; 0C:1B66, 0x019B66
    CMP #$E0 ; If _ #$E0
    BCC RTS ; <, goto. Below max.
    LDA #$DF
    STA OBJ_POS_X_CONFIRMED[18],X ; Store max.
RTS: ; 0C:1B6F, 0x019B6F
    RTS ; Leave.
OBJ_DATA_C: ; 0C:1B70, 0x019B70
    .db E0
    .db E0
    .db E0
    .db E0
    .db E0
    .db E0
    .db E0
    .db E0
    .db D0
    .db C0
    .db B0
    .db A0
    .db 90
    .db 80
    .db 80
    .db 80
EXIT_ANIM_MOD: ; 0C:1B80, 0x019B80
    LDA OBJ_ANIMATION_DISPLAY[18],X ; Load
    SEC ; Prep sub.
    SBC #$51 ; Sub with to get base.
    TAY ; To index.
    LDA IRQ/SCRIPT_RUN_COUNT? ; Load count.
    LSR A ; >> 3, /8. Carry matters.
    LSR A
    LSR A
    LDA DATA_A,Y ; Load base val.
    ADC #$00 ; Add with carry.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim disp.
    RTS
DATA_A: ; 0C:1B95, 0x019B95
    .db 51
    .db 51
    .db 53
    .db 53
    .db 55
    .db 55
    .db 57
    .db 57
    .db 59
    .db 59
OBJ_STATE_0x58_HANDLER: ; 0C:1B9F, 0x019B9F
    LDA 544_OBJ_UNK_POS_DELTA?+17,X ; Load from obj-1
    STA 556_OBJ_STATUS_FLAGS_A[18],X ; Store to us.
    LDA OBJ_POS_Y_CONFIRMED+17,X ; Load from obj-1
    STA OBJ_POS_X_CONFIRMED[18],X ; Store to us.
    LDA OBJ_POS_X_SUBPIXEL?+17,X ; Load from obj-1, different var.
    STA OBJ_POS_Y_CONFIRMED[18],X ; Store to us.
    LDA OBJ_ANIMATION_DISPLAY+17,X ; Load from obj - 1
    CMP #$02 ; If _ #$02
    LDA #$00 ; Seed val.
    BCC ANIM_SEEDED ; <, use val.
    LDA #$61 ; Seed other val.
ANIM_SEEDED: ; 0C:1BBC, 0x019BBC
    STA OBJ_ANIMATION_DISPLAY[18],X ; Store anim.
    RTS ; Leave.
FOCUS_ATTR_DIFF_RTN: ; 0C:1BC0, 0x019BC0
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Load focus.
    SEC ; Prep sub.
    LDA OBJ_POS_X??[18],X ; Xobj attr.
    SBC OBJ_POS_X??[18],Y ; - Yobj attr.
    LDY #$00 ; Index for range.
    CMP #$03 ; Diff val.
    BCC INDEX_DECIDED ; <, goto.
    CMP #$FE ; Diff val.
    BCS INDEX_DECIDED ; >=, goto.
    LDY #$02 ; Alt index diff >= 0x03 and X < Y
    ASL A ; Result << 1
    BCC INDEX_DECIDED ; Clear, use.
    LDY #$04 ; Alt index diff >= 0x03 and Y > X
INDEX_DECIDED: ; 0C:1BDB, 0x019BDB
    LDA DATA_A,Y
    STA 520_OBJ_POS_X_LARGE?[18],X ; Move attrs based on.
    LDA DATYA_B,Y
    STA 503_OBJ_POS_X_LARGEST?[18],X
    RTS ; Leave.
    .db 00
    .db 00
ROM_ATTR_A: ; 0C:1BEA, 0x019BEA
    .db 00
ROM_ATTR_B: ; 0C:1BEB, 0x019BEB
    .db FC
ROM_ATTR_C: ; 0C:1BEC, 0x019BEC
    .db 00
ROM_ATTR_D: ; 0C:1BED, 0x019BED
    .db 04
    .db 00
    .db 00
DATA_A: ; 0C:1BF0, 0x019BF0
    .db 00
DATYA_B: ; 0C:1BF1, 0x019BF1
    .db 00
    .db A0
    .db FF
    .db 60
    .db 00
ADD_MIN_HELPER: ; 0C:1BF6, 0x019BF6
    CLC ; Prep add.
    LDA 4C6_OBJ_UNK[18],X ; Load
    ADC OBJ_POS_X??[18],X ; Add with.
    CMP #$30 ; If _ #$30
    BCS DONT_MIN ; >=, goto.
    LDA #$30 ; Min.
DONT_MIN: ; 0C:1C03, 0x019C03
    STA OBJ_POS_Y_CONFIRMED[18],X ; Set attr.
    RTS ; Leave.
    LDA #$40
    BNE 0C:1C0B
    CLC
    ADC 544_OBJ_UNK_POS_DELTA?[18],X
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    BCC 0C:1C17
    INC 532_OBJ_UNK_POS_DELTA?[18],X
    JMP MOVE_UNK_RET_CS_POS_CS_NEG
STATE/GFX/EXTENSION_EXIT: ; 0C:1C1A, 0x019C1A
    LDA #$02
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set secondary.
    LDA #$01
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    LDA #$00
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Clear.
    LDA #$A6
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5 ; Mod GFX.
    JMP FOCUS_L/R_SET_HELPER ; Goto.
RTN_B: ; 0C:1C30, 0x019C30
    INC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; ++
    LDY 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Index.
    LDA #$57 ; Anim.
    CPY #$01 ; Step
    BEQ ANIMATION_DISP ; ==, goto.
    LDA #$59 ; Anim.
    CPY #$14 ; Step.
    BEQ ANIMATION_DISP ; ==, goto.
    BCC EXIT_MOD_ONLY ; <, goto.
    LDA #$51 ; Anim.
    CPY #$28 ; Step.
    BEQ DISP_ALT_SOUND/NO_MOD ; ==, goto.
    BCC EXIT_MOD_ONLY ; <, goto.
    LDA #$57 ; Anim.
    CPY #$32 ; Step.
    BEQ ANIMATION_DISP ; ==, goto.
    BCC EXIT_MOD_ONLY ; <, goto.
    LDA #$59 ; Anim.
    CPY #$46 ; Step.
    BEQ ANIMATION_DISP ; ==, goto.
    BCC EXIT_MOD_ONLY ; <, goto.
    LDA #$51 ; Anim.
    CPY #$5A ; Step.
    BEQ DISP_ALT_SOUND/NO_MOD ; ==, goto.
    BCC EXIT_MOD_ONLY ; <, goto.
    CPY #$96 ; If _ Step
    BCS MOVE_TERT ; >=, goto.
    BCC EXIT_MOD_ONLY
ANIMATION_DISP: ; 0C:1C6A, 0x019C6A
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim disp.
EXIT_MOD_ONLY: ; 0C:1C6D, 0x019C6D
    JMP EXIT_ANIM_MOD ; Mod.
MOVE_TERT: ; 0C:1C70, 0x019C70
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA #$A5
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5 ; Set GFX.
    LDA #$51
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Load
    EOR #$02 ; Invert.
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Store back.
    JMP FOCUS_EITHER_PLAYER_HELPER_RET_CS_FAIL_TO_FOCUS ; Goto.
DISP_ALT_SOUND/NO_MOD: ; 0C:1C87, 0x019C87
    STA OBJ_ANIMATION_DISPLAY[18],X ; Store anim.
    JSR 0C:1CF1 ; Do.
    LDA #$18 ; Play sound.
    JMP SND_BANKED_DISPATCH ; ABuse RTS.
OBJ_STATE_0x59_HANDLER: ; 0C:1C92, 0x019C92
    LDA OBJ_TERTIARY_SWITCH?[18],X ; Load
    BNE SIMPLE_HOLD_OR_DIE ; != 0, goto.
    JSR MOVE_UNK_RET_CS_POS_CS_NEG ; Do.
    BCS ANIM_HOLD/DISP/TERT_HELPER ; Ret CS, positive result, goto.
    JSR XPOS_RTN_RET_?? ; Do.
    BCS EXIT_DIE ; Ret CS, die.
    LDA 4C6_OBJ_UNK[18],X ; Load
    ADC OBJ_POS_X??[18],X ; Add with.
    STA OBJ_POS_Y_CONFIRMED[18],X ; Store to.
    LDA #$93
    STA OBJECT_DATA_EXTRA_B?[18],X ; Set attr.
    LDA #$FF
    STA OBJECT_DATA_HEALTH?[18],X ; Set attr.
    JSR OBJ_RTN_UNK_RET_VAL_UNK ; Do.
    LSR A ; >> 2, /4.
    LSR A
    BCS ANIM_HOLD/DISP/TERT_HELPER ; Bit set, goto.
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; --
    BPL RTS ; If positive, goto.
    LDA #$05
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Set hold.
    LDA OBJ_ANIMATION_DISPLAY[18],X ; Load
    EOR #$01 ; Invert bit.
    STA OBJ_ANIMATION_DISPLAY[18],X ; Store back.
RTS: ; 0C:1CCD, 0x019CCD
    RTS ; Leave.
ANIM_HOLD/DISP/TERT_HELPER: ; 0C:1CCE, 0x019CCE
    LDA #$05
    STA OBJ_ANIM_HOLD_TIMER?[18],X ; Set hold.
    LDA #$60
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
RTS: ; 0C:1CDB, 0x019CDB
    RTS ; Leave.
SIMPLE_HOLD_OR_DIE: ; 0C:1CDC, 0x019CDC
    DEC OBJ_ANIM_HOLD_TIMER?[18],X ; --
    BPL RTS ; If positive, leave.
EXIT_DIE: ; 0C:1CE1, 0x019CE1
    JMP INIT_OBJECT[X]_DATA_FULL ; Else, kill self.
    LDA OBJ_POS_Y_CONFIRMED+17,X
    STA OBJ_POS_X_CONFIRMED[18],X
    LDA OBJ_POS_X_SUBPIXEL?+17,X
    STA OBJ_POS_Y_CONFIRMED[18],X
    RTS
    STX OBJ_HANDLER_FOCUS_SCRATCHPAD ; Save Xobj.
    LDA OBJ_POS_X_CONFIRMED[18],X ; Set TMP's from Xobj.
    STA TMP_08
    LDA OBJ_POS_Y_CONFIRMED[18],X
    STA TMP_09
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Get focus obj.
    LDA OBJ_POS_X_CONFIRMED[18],Y ; Set TMP's from focus OBJ.
    STA TMP_0A
    LDA OBJ_POS_Y_CONFIRMED[18],Y
    STA TMP_0B
    JSR L_0C:1D96 ; Do.
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    ASL A ; << 2. *4.
    ASL A
    LDA #$00 ; Val.
    BCC CCLEAR ; CC, goto.
    LDA #$04 ; Alt val.
CCLEAR: ; 0C:1D19, 0x019D19
    STA TMP_07 ; Store val.
    LDA OBJ_POS_X??[18],X
    STA TMP_06
    JSR QUERY_OBJ_UNUSED_CS_TRUE_CC_FALSE
    BCC EXIT_XRESTORE
    JSR CREATE_OBJ
    JSR QUERY_OBJ_UNUSED_CS_TRUE_CC_FALSE
    BCC EXIT_XRESTORE
CREATE_OBJ: ; 0C:1D2D, 0x019D2D
    LDY TMP_07
    CLC
    LDA L_0C:1D8E,Y
    ADC TMP_08
    STA OBJ_POS_X_CONFIRMED[18],X
    CLC
    LDA L_0C:1D8F,Y
    LDY OBJ_HANDLER_FOCUS_SCRATCHPAD
    ADC 4C6_OBJ_UNK[18],Y
    STA 4C6_OBJ_UNK[18],X
    CLC
    ADC TMP_06
    STA OBJ_POS_Y_CONFIRMED[18],X
    LDA TMP_06
    STA OBJ_POS_X??[18],X
    LDA #$00
    STA 556_OBJ_STATUS_FLAGS_A[18],X
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X
    STA 503_OBJ_POS_X_LARGEST?[18],X
    STA 520_OBJ_POS_X_LARGE?[18],X
    LDA TMP_0C
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X
    LDA TMP_0D
    STA OBJ_POS_X_DELTA?[18],X
    LDA TMP_0E
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    LDA TMP_0F
    STA 532_OBJ_UNK_POS_DELTA?[18],X
    LDA #$59
    STA OBJ_ENABLED_STATE+MORE?[18],X
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
    LDA #$5E
    STA OBJ_ANIMATION_DISPLAY[18],X
    LDA #$06
    STA OBJ_ANIM_HOLD_TIMER?[18],X
    INC TMP_07
    INC TMP_07
EXIT_XRESTORE: ; 0C:1D8A, 0x019D8A
    LDX OBJ_HANDLER_FOCUS_SCRATCHPAD
    RTS
L_0C:1D8E: ; 0C:1D8E, 0x019D8E
    .db E4
L_0C:1D8F: ; 0C:1D8F, 0x019D8F
    .db 00
    .db 1C
    .db 0A
    .db E4
    .db 0A
    .db 1C
    .db 00
L_0C:1D96: ; 0C:1D96, 0x019D96
    SEC
    LDA TMP_08
    SBC TMP_0A
    STA TMP_04
    LDY #$00
    BCS 0C:1DA8
    LDY #$02
    LDA #$00
    SEC
    SBC TMP_04
    STY TMP_02
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    STA TMP_04
    SEC
    LDA TMP_09
    SBC TMP_0B
    STA TMP_05
    LDA #$00
    BCS 0C:1DC3
    SEC
    SBC TMP_05
    STA TMP_05
    LDA #$01
    ORA TMP_02
    STA TMP_02
    LDA TMP_05
    LSR A
    LSR A
    AND #$38
    ORA TMP_04
    LSR A
    TAY
    LDA 0C:1E16,Y
    BCS 0C:1DDA
    LSR A
    LSR A
    LSR A
    LSR A
    AND #$07
    ASL A
    ASL A
    TAY
    LDA 0C:1E32,Y
    STA TMP_0C
    LDA 0C:1E33,Y
    STA TMP_0D
    LDA 0C:1E34,Y
    STA TMP_0E
    LDA 0C:1E35,Y
    STA TMP_0F
    LSR TMP_02
    BCS 0C:1E04
    SEC
    LDA #$00
    SBC TMP_0E
    STA TMP_0E
    LDA #$00
    SBC TMP_0F
    STA TMP_0F
    LSR TMP_02
    BCS 0C:1E15
    SEC
    LDA #$00
    SBC TMP_0C
    STA TMP_0C
    LDA #$00
    SBC TMP_0D
    STA TMP_0D
    RTS
    .db 00
    .db 00
    .db 00
    .db 00
    .db 63
    .db 21
    .db 11
    .db 11
    .db 64
    .db 32
    .db 21
    .db 11
    .db 65
    .db 43
    .db 22
    .db 22
    .db 65
    .db 44
    .db 33
    .db 22
    .db 65
    .db 54
    .db 33
    .db 32
    .db 65
    .db 54
    .db 44
    .db 33
    .db 00
    .db 03
    .db 00
    .db 00
    .db E4
    .db 02
    .db C5
    .db 00
    .db 97
    .db 02
    .db 7D
    .db 01
    .db 1F
    .db 02
    .db 1F
    .db 02
    .db 7D
    .db 01
    .db 97
    .db 02
    .db C5
    .db 00
    .db E4
    .db 02
    .db 00
    .db 00
    .db 00
    .db 03
FOCUS_NOHEALTH_MISC: ; 0C:1E4E, 0x019E4E
    JSR XOBJ_WRITE_PLAYER_FOCUS ; Get focus.
    LDA OBJECT_DATA_HEALTH?[18],X ; Load from Xobj.
    BNE OBJ_HAS_HEALTH ; != 0, has health, goto.
    JMP DEATH_HELPER ; Goto.
OBJ_HAS_HEALTH: ; 0C:1E59, 0x019E59
    CMP #$18 ; If _ #$18
    BCS RUN_SUB ; >=, goto.
    LDA ARR_SPRITE_OBJ_TIMER?+1 ; Load
    BMI RUN_SUB ; If negative, goto.
    LDA #$80 ; Load
    ORA ARR_SPRITE_OBJ_TIMER?+1 ; Set bits.
    STA ARR_SPRITE_OBJ_TIMER?+1 ; Store back.
    BNE RE-ENTER ; Always taken.
RUN_SUB: ; 0C:1E6C, 0x019E6C
    JSR ATTRS_SET_UNSURE ; Do.
RE-ENTER: ; 0C:1E6F, 0x019E6F
    LDA #$04
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set secondary.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X ; Set tert.
    LDA #$FD
    STA 532_OBJ_UNK_POS_DELTA?[18],X ; Set attr.
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Clear attrs.
    STA OBJECT_DATA_EXTRA_B?[18],X
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$BF ; Keep 0011.1111
    STA TMP_00 ; Store to TMP.
    LDY 5D4_EXTRA_TIMER/OBJ/FOCUS[18],X ; Load focus.
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],Y ; Load
    AND #$40 ; Keep bit.
    ORA TMP_00 ; Add to bits.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back to Xobj.
    ASL A ; << 2, *4.
    ASL A
    LDY #$00 ; Index
    BCS BIT_0x40_SET ; If set, goto.
    LDY #$02 ; Alt data index.
BIT_0x40_SET: ; 0C:1EA2, 0x019EA2
    LDA OBJ_DATA_A,Y
    STA OBJ_POS_X_SUBPIXEL_DELTA?[18],X ; Move attrs from data.
    LDA OBJ_DATA_B,Y
    STA OBJ_POS_X_DELTA?[18],X
    LDA OBJ_POS_X??[18],X ; Load
    LSR A ; >> 4, /16.
    LSR A
    LSR A
    LSR A
    TAY ; To index.
    LDA OBJ_DATA_C,Y ; Load from Yobj.
    CMP 4C6_OBJ_UNK[18],X ; If _ attr
    BNE ANIM/GFX_HELPER ; !=, goto.
    LDA #$40
    STA 5D4_EXTRA_TIMER/OBJ/FOCUS+1,X ; Set pair.
ANIM/GFX_HELPER: ; 0C:1EC3, 0x019EC3
    LDA #$5B
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim disp.
    LDA #$A7
    STA SCRIPT_R0-R5_GFX_BANK_VALS+4 ; Set GFX banks to use.
    LDA #$A6
    STA SCRIPT_R0-R5_GFX_BANK_VALS+5
    RTS ; Leave.
OBJ_DATA_A: ; 0C:1ED1, 0x019ED1
    .db 00
OBJ_DATA_B: ; 0C:1ED2, 0x019ED2
    .db FE
    .db 00
    .db 02
RTN_A: ; 0C:1ED5, 0x019ED5
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Clear.
    CLC ; Prep add.
    LDA #$20 ; Load
    ADC 544_OBJ_UNK_POS_DELTA?[18],X ; Add with.
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Store to.
    BCC NO_OVERFLOW ; No overflow.
    INC 532_OBJ_UNK_POS_DELTA?[18],X ; ++
    BPL EXIT_GFX/STATE_RTNS ; If positive, goto.
NO_OVERFLOW: ; 0C:1EEA, 0x019EEA
    CLC ; Prep add.
    LDA 544_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4D8_OBJ_UNK[18],X ; Add with.
    STA 4D8_OBJ_UNK[18],X ; Store back.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4C6_OBJ_UNK[18],X ; Carry add.
    STA 4C6_OBJ_UNK[18],X ; Store back.
    LDA OBJ_POS_X??[18],X ; Load
    LSR A ; >> 4, /16.
    LSR A
    LSR A
    LSR A
    TAY ; To index.
    LDA OBJ_DATA_C,Y ; Load with index.
    CMP 4C6_OBJ_UNK[18],X ; If _ attr
    BCC VAL_LT_ATTR ; <, goto.
    STA 4C6_OBJ_UNK[18],X ; GT attr, set.
    LDA #$00
    STA 4D8_OBJ_UNK[18],X ; Clear.
VAL_LT_ATTR: ; 0C:1F15, 0x019F15
    JSR ADD_MIN_HELPER ; Do.
    JMP RANGED_MOVE ; Goto.
EXIT_GFX/STATE_RTNS: ; 0C:1F1B, 0x019F1B
    JSR GFX/ANIM_HELPER ; Do.
    JMP STATE/GFX/EXTENSION_EXIT ; Goto.
DEATH_HELPER: ; 0C:1F21, 0x019F21
    LDA #$01
    STA 3DB_UNKNOWN ; Set.
    JSR SOUND_RESET/INIT_RTN? ; No sound.
    LDA #$59
    JSR SND_BANKED_DISPATCH ; Play sound.
    LDA #$05
    STA OBJ_SECONDARY_SWITCH?[18],X ; Set attrs/state.
    LDA #$00
    STA OBJ_TERTIARY_SWITCH?[18],X
    LDA #$FD
    STA 532_OBJ_UNK_POS_DELTA?[18],X
    LDA #$00
    STA 544_OBJ_UNK_POS_DELTA?[18],X
    JSR ANIM/GFX_HELPER ; Do.
    LDX #$07 ; Obj.
LOOP_ALL_OBJS: ; 0C:1F47, 0x019F47
    LDA OBJ_ENABLED_STATE+MORE?[18],X ; Load obj state.
    CMP #$59 ; If _ #$59
    BNE NEXT_OBJ
    JSR INIT_OBJECT[X]_DATA_FULL ; Kill it.
NEXT_OBJ: ; 0C:1F51, 0x019F51
    INX ; Next obj.
    CPX #$12 ; If _ #$12
    BCC LOOP_ALL_OBJS ; <, loop more objs.
    RTS ; Leave.
RTN_A: ; 0C:1F57, 0x019F57
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Clear.
    CLC ; Prep add.
    LDA #$20 ; Load
    ADC 544_OBJ_UNK_POS_DELTA?[18],X ; Add to.
    STA 544_OBJ_UNK_POS_DELTA?[18],X ; Store.
    BCC NO_OVERFLOW
    INC 532_OBJ_UNK_POS_DELTA?[18],X ; Overflow to.
    BNE NO_OVERFLOW ; != 0, goto.
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    ORA #$80 ; Set bit.
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store back.
    SEC ; Prep sub.
    LDA 4C6_OBJ_UNK[18],X ; Load
    SBC #$2F ; -= 0x2F
    BMI RESULT_NEGATIVE ; Result negative.
    LDA #$80 ; Set negative anyway?
RESULT_NEGATIVE: ; 0C:1F7E, 0x019F7E
    STA 4C6_OBJ_UNK[18],X ; Set attr with crap in it?
    JMP JMP_TO_JMP_ADD_MIN ; Goto.
NO_OVERFLOW: ; 0C:1F84, 0x019F84
    CLC ; Prep add.
    LDA 544_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4D8_OBJ_UNK[18],X ; Add with.
    STA 4D8_OBJ_UNK[18],X ; Store.
    LDA 532_OBJ_UNK_POS_DELTA?[18],X ; Load
    ADC 4C6_OBJ_UNK[18],X ; Carry add.
    STA 4C6_OBJ_UNK[18],X ; Store.
    BPL SET_ATTR ; Result positive, goto.
    LDY 532_OBJ_UNK_POS_DELTA?[18],X ; Y from.
    BMI JMP_TO_JMP_ADD_MIN ; Negative, goto.
    CMP #$D1 ; If _ #$D1
    BCS 0C:1FAC ; >=, goto.
    BCC JMP_TO_JMP_ADD_MIN ; <, goto.
SET_ATTR: ; 0C:1FA4, 0x019FA4
    LDA #$80
    STA 4C6_OBJ_UNK[18],X ; Set attr.
JMP_TO_JMP_ADD_MIN: ; 0C:1FA9, 0x019FA9
    JMP ADD_MIN_HELPER ; Goto.
    INC OBJ_TERTIARY_SWITCH?[18],X
    LDA #$14
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X
    LDA #$00
    STA OBJ_ENABLED_STATE+MORE?+1,X
    STA OBJ_ANIMATION_DISPLAY+1,X
    JSR ADD_MIN_HELPER
    LDA #$5A
    JMP SND_BANKED_DISPATCH
RTN_B: ; 0C:1FC4, 0x019FC4
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Clear.
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BNE RTS ; != 0, goto.
    INC OBJ_TERTIARY_SWITCH?[18],X ; Move tert.
    LDA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Load
    AND #$7F ; Keep 0111.1111
    STA OBJ_STATE_DIR_RELATED_C_SPR_DATA?[18],X ; Store to.
    LDA #$5C
    STA OBJ_ANIMATION_DISPLAY[18],X ; Set anim.
    LDA #$64
    STA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Set attr.
    LDA #$00
    STA 4C6_OBJ_UNK[18],X ; Clear.
    JMP ADD_MIN_HELPER ; Goto, abuse RTS.
RTN_C: ; 0C:1FEB, 0x019FEB
    LDA #$00
    STA OBJECT_DATA_EXTRA_B?[18],X ; Cler.
    DEC 59E_OBJ_UNK/EXTRA_TIMER[18],X ; --
    BEQ DIE ; == 0, goto.
    LDA 59E_OBJ_UNK/EXTRA_TIMER[18],X ; Load
    AND #$07 ; Keep 0000.0111
    BNE RTS ; != 0, leave.
    LDA OBJ_ANIMATION_DISPLAY[18],X ; Load
    EOR #$01 ; Invert bit.
